Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> INIT programA
Rule 2     programA -> programB END
Rule 3     programA -> END
Rule 4     programB -> workspace programC
Rule 5     programC -> programB
Rule 6     programC -> empty
Rule 7     workspace -> statute
Rule 8     workspace -> module
Rule 9     statute -> assign
Rule 10    statute -> condition
Rule 11    statute -> write
Rule 12    statute -> repeat
Rule 13    statute -> command
Rule 14    statute -> calling
Rule 15    statute -> pipeline
Rule 16    statute -> screen
Rule 17    module -> MOD # ID moduleA
Rule 18    moduleA -> ( vars ) block
Rule 19    moduleA -> block
Rule 20    vars -> type ID varsA
Rule 21    varsA -> , vars
Rule 22    varsA -> empty
Rule 23    type -> INT
Rule 24    type -> FLOAT
Rule 25    type -> BOOL
Rule 26    calling -> # ID ( callingA
Rule 27    callingA -> callingB ) ;
Rule 28    callingA -> ) ;
Rule 29    callingB -> expression callingC
Rule 30    callingC -> , callingB
Rule 31    callingC -> empty
Rule 32    block -> { blockA
Rule 33    blockA -> blockB }
Rule 34    blockA -> }
Rule 35    blockB -> statute blockC
Rule 36    blockC -> blockB
Rule 37    blockC -> empty
Rule 38    assign -> ID = expression ;
Rule 39    condition -> IF ( expression ) gotoFalse block conditionA
Rule 40    conditionA -> ELSE block
Rule 41    conditionA -> empty
Rule 42    write -> ECHO writeA ;
Rule 43    writeA -> expression
Rule 44    writeA -> CTE_STRING
Rule 45    pipeline -> PIPE ID pipelineA
Rule 46    pipelineA -> [ pipelineB ] ;
Rule 47    pipelineA -> IN ( var_cte ) ;
Rule 48    pipelineA -> OUT ( ) ;
Rule 49    pipelineA -> COUNT ;
Rule 50    pipelineB -> exp pipelineC
Rule 51    pipelineC -> , pipelineB
Rule 52    pipelineC -> empty
Rule 53    command -> figure exp exp color ;
Rule 54    command -> SAMPLE commandA
Rule 55    commandA -> ON move exp CTE_INTEGER color ;
Rule 56    commandA -> OFF move exp ;
Rule 57    repeat -> REPLAY CTE_INTEGER [ repeatA ] ;
Rule 58    repeatA -> command repeatB
Rule 59    repeatB -> repeatA
Rule 60    repeatB -> empty
Rule 61    expression -> exp = = exp
Rule 62    expression -> exp < > exp
Rule 63    expression -> exp < = exp
Rule 64    expression -> exp > = exp
Rule 65    expression -> exp > exp
Rule 66    expression -> exp < exp
Rule 67    expression -> exp AND exp
Rule 68    expression -> exp OR exp
Rule 69    expression -> exp empty
Rule 70    exp -> exp + exp
Rule 71    exp -> exp - exp
Rule 72    exp -> exp * exp
Rule 73    exp -> exp / exp
Rule 74    exp -> factor empty
Rule 75    factor -> ( expression )
Rule 76    factor -> var_cte
Rule 77    figure -> OVAL
Rule 78    figure -> TRIO
Rule 79    figure -> QUAD
Rule 80    figure -> ARC
Rule 81    move -> UP
Rule 82    move -> DOWN
Rule 83    move -> LEFT
Rule 84    move -> RIGHT
Rule 85    color -> RED
Rule 86    color -> YELLOW
Rule 87    color -> BLUE
Rule 88    color -> GREEN
Rule 89    color -> BLACK
Rule 90    color -> ORANGE
Rule 91    color -> PURPLE
Rule 92    color -> CYAN
Rule 93    screen -> WHERE
Rule 94    screen -> CLEAR
Rule 95    var_cte -> ID
Rule 96    var_cte -> CTE_INTEGER
Rule 97    var_cte -> CTE_FLOAT
Rule 98    var_cte -> TRUE
Rule 99    var_cte -> FALSE
Rule 100   gotoFalse -> <empty>
Rule 101   empty -> <empty>

Terminals, with rules where they appear

#                    : 17 26
(                    : 18 26 39 47 48 75
)                    : 18 27 28 39 47 48 75
*                    : 72
+                    : 70
,                    : 21 30 51
-                    : 71
/                    : 73
;                    : 27 28 38 42 46 47 48 49 53 55 56 57
<                    : 62 63 66
=                    : 38 61 61 63 64
>                    : 62 64 65
AND                  : 67
ARC                  : 80
BLACK                : 89
BLUE                 : 87
BOOL                 : 25
CLEAR                : 94
COUNT                : 49
CTE_FLOAT            : 97
CTE_INTEGER          : 55 57 96
CTE_STRING           : 44
CYAN                 : 92
DOWN                 : 82
ECHO                 : 42
ELSE                 : 40
END                  : 2 3
FALSE                : 99
FLOAT                : 24
GREEN                : 88
ID                   : 17 20 26 38 45 95
IF                   : 39
IN                   : 47
INIT                 : 1
INT                  : 23
LEFT                 : 83
MOD                  : 17
OFF                  : 56
ON                   : 55
OR                   : 68
ORANGE               : 90
OUT                  : 48
OVAL                 : 77
PIPE                 : 45
PURPLE               : 91
QUAD                 : 79
RED                  : 85
REPLAY               : 57
RIGHT                : 84
SAMPLE               : 54
TRIO                 : 78
TRUE                 : 98
UP                   : 81
WHERE                : 93
YELLOW               : 86
[                    : 46 57
]                    : 46 57
error                : 
{                    : 32
}                    : 33 34

Nonterminals, with rules where they appear

assign               : 9
block                : 18 19 39 40
blockA               : 32
blockB               : 33 36
blockC               : 35
calling              : 14
callingA             : 26
callingB             : 27 30
callingC             : 29
color                : 53 55
command              : 13 58
commandA             : 54
condition            : 10
conditionA           : 39
empty                : 6 22 31 37 41 52 60 69 74
exp                  : 50 53 53 55 56 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 70 70 71 71 72 72 73 73
expression           : 29 38 39 43 75
factor               : 74
figure               : 53
gotoFalse            : 39
module               : 8
moduleA              : 17
move                 : 55 56
pipeline             : 15
pipelineA            : 45
pipelineB            : 46 51
pipelineC            : 50
program              : 0
programA             : 1
programB             : 2 5
programC             : 4
repeat               : 12
repeatA              : 57 59
repeatB              : 58
screen               : 16
statute              : 7 35
type                 : 20
var_cte              : 47 76
vars                 : 18 21
varsA                : 20
workspace            : 4
write                : 11
writeA               : 42

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . INIT programA

    INIT            shift and go to state 1

    program                        shift and go to state 2

state 1

    (1) program -> INIT . programA
    (2) programA -> . programB END
    (3) programA -> . END
    (4) programB -> . workspace programC
    (7) workspace -> . statute
    (8) workspace -> . module
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . repeat
    (13) statute -> . command
    (14) statute -> . calling
    (15) statute -> . pipeline
    (16) statute -> . screen
    (17) module -> . MOD # ID moduleA
    (38) assign -> . ID = expression ;
    (39) condition -> . IF ( expression ) gotoFalse block conditionA
    (42) write -> . ECHO writeA ;
    (57) repeat -> . REPLAY CTE_INTEGER [ repeatA ] ;
    (53) command -> . figure exp exp color ;
    (54) command -> . SAMPLE commandA
    (26) calling -> . # ID ( callingA
    (45) pipeline -> . PIPE ID pipelineA
    (93) screen -> . WHERE
    (94) screen -> . CLEAR
    (77) figure -> . OVAL
    (78) figure -> . TRIO
    (79) figure -> . QUAD
    (80) figure -> . ARC

    END             shift and go to state 14
    MOD             shift and go to state 31
    ID              shift and go to state 21
    IF              shift and go to state 22
    ECHO            shift and go to state 16
    REPLAY          shift and go to state 6
    SAMPLE          shift and go to state 17
    #               shift and go to state 8
    PIPE            shift and go to state 7
    WHERE           shift and go to state 26
    CLEAR           shift and go to state 11
    OVAL            shift and go to state 5
    TRIO            shift and go to state 12
    QUAD            shift and go to state 20
    ARC             shift and go to state 27

    figure                         shift and go to state 3
    module                         shift and go to state 4
    write                          shift and go to state 9
    condition                      shift and go to state 10
    repeat                         shift and go to state 13
    screen                         shift and go to state 15
    programB                       shift and go to state 19
    statute                        shift and go to state 23
    pipeline                       shift and go to state 24
    calling                        shift and go to state 25
    command                        shift and go to state 28
    workspace                      shift and go to state 29
    assign                         shift and go to state 30
    programA                       shift and go to state 18

state 2

    (0) S' -> program .



state 3

    (53) command -> figure . exp exp color ;
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 37
    factor                         shift and go to state 38

state 4

    (8) workspace -> module .

    MOD             reduce using rule 8 (workspace -> module .)
    ID              reduce using rule 8 (workspace -> module .)
    IF              reduce using rule 8 (workspace -> module .)
    ECHO            reduce using rule 8 (workspace -> module .)
    REPLAY          reduce using rule 8 (workspace -> module .)
    SAMPLE          reduce using rule 8 (workspace -> module .)
    #               reduce using rule 8 (workspace -> module .)
    PIPE            reduce using rule 8 (workspace -> module .)
    WHERE           reduce using rule 8 (workspace -> module .)
    CLEAR           reduce using rule 8 (workspace -> module .)
    OVAL            reduce using rule 8 (workspace -> module .)
    TRIO            reduce using rule 8 (workspace -> module .)
    QUAD            reduce using rule 8 (workspace -> module .)
    ARC             reduce using rule 8 (workspace -> module .)
    END             reduce using rule 8 (workspace -> module .)


state 5

    (77) figure -> OVAL .

    (               reduce using rule 77 (figure -> OVAL .)
    ID              reduce using rule 77 (figure -> OVAL .)
    CTE_INTEGER     reduce using rule 77 (figure -> OVAL .)
    CTE_FLOAT       reduce using rule 77 (figure -> OVAL .)
    TRUE            reduce using rule 77 (figure -> OVAL .)
    FALSE           reduce using rule 77 (figure -> OVAL .)


state 6

    (57) repeat -> REPLAY . CTE_INTEGER [ repeatA ] ;

    CTE_INTEGER     shift and go to state 41


state 7

    (45) pipeline -> PIPE . ID pipelineA

    ID              shift and go to state 42


state 8

    (26) calling -> # . ID ( callingA

    ID              shift and go to state 43


state 9

    (11) statute -> write .

    ID              reduce using rule 11 (statute -> write .)
    IF              reduce using rule 11 (statute -> write .)
    ECHO            reduce using rule 11 (statute -> write .)
    REPLAY          reduce using rule 11 (statute -> write .)
    SAMPLE          reduce using rule 11 (statute -> write .)
    #               reduce using rule 11 (statute -> write .)
    PIPE            reduce using rule 11 (statute -> write .)
    WHERE           reduce using rule 11 (statute -> write .)
    CLEAR           reduce using rule 11 (statute -> write .)
    OVAL            reduce using rule 11 (statute -> write .)
    TRIO            reduce using rule 11 (statute -> write .)
    QUAD            reduce using rule 11 (statute -> write .)
    ARC             reduce using rule 11 (statute -> write .)
    }               reduce using rule 11 (statute -> write .)
    MOD             reduce using rule 11 (statute -> write .)
    END             reduce using rule 11 (statute -> write .)


state 10

    (10) statute -> condition .

    ID              reduce using rule 10 (statute -> condition .)
    IF              reduce using rule 10 (statute -> condition .)
    ECHO            reduce using rule 10 (statute -> condition .)
    REPLAY          reduce using rule 10 (statute -> condition .)
    SAMPLE          reduce using rule 10 (statute -> condition .)
    #               reduce using rule 10 (statute -> condition .)
    PIPE            reduce using rule 10 (statute -> condition .)
    WHERE           reduce using rule 10 (statute -> condition .)
    CLEAR           reduce using rule 10 (statute -> condition .)
    OVAL            reduce using rule 10 (statute -> condition .)
    TRIO            reduce using rule 10 (statute -> condition .)
    QUAD            reduce using rule 10 (statute -> condition .)
    ARC             reduce using rule 10 (statute -> condition .)
    }               reduce using rule 10 (statute -> condition .)
    MOD             reduce using rule 10 (statute -> condition .)
    END             reduce using rule 10 (statute -> condition .)


state 11

    (94) screen -> CLEAR .

    MOD             reduce using rule 94 (screen -> CLEAR .)
    ID              reduce using rule 94 (screen -> CLEAR .)
    IF              reduce using rule 94 (screen -> CLEAR .)
    ECHO            reduce using rule 94 (screen -> CLEAR .)
    REPLAY          reduce using rule 94 (screen -> CLEAR .)
    SAMPLE          reduce using rule 94 (screen -> CLEAR .)
    #               reduce using rule 94 (screen -> CLEAR .)
    PIPE            reduce using rule 94 (screen -> CLEAR .)
    WHERE           reduce using rule 94 (screen -> CLEAR .)
    CLEAR           reduce using rule 94 (screen -> CLEAR .)
    OVAL            reduce using rule 94 (screen -> CLEAR .)
    TRIO            reduce using rule 94 (screen -> CLEAR .)
    QUAD            reduce using rule 94 (screen -> CLEAR .)
    ARC             reduce using rule 94 (screen -> CLEAR .)
    END             reduce using rule 94 (screen -> CLEAR .)
    }               reduce using rule 94 (screen -> CLEAR .)


state 12

    (78) figure -> TRIO .

    (               reduce using rule 78 (figure -> TRIO .)
    ID              reduce using rule 78 (figure -> TRIO .)
    CTE_INTEGER     reduce using rule 78 (figure -> TRIO .)
    CTE_FLOAT       reduce using rule 78 (figure -> TRIO .)
    TRUE            reduce using rule 78 (figure -> TRIO .)
    FALSE           reduce using rule 78 (figure -> TRIO .)


state 13

    (12) statute -> repeat .

    ID              reduce using rule 12 (statute -> repeat .)
    IF              reduce using rule 12 (statute -> repeat .)
    ECHO            reduce using rule 12 (statute -> repeat .)
    REPLAY          reduce using rule 12 (statute -> repeat .)
    SAMPLE          reduce using rule 12 (statute -> repeat .)
    #               reduce using rule 12 (statute -> repeat .)
    PIPE            reduce using rule 12 (statute -> repeat .)
    WHERE           reduce using rule 12 (statute -> repeat .)
    CLEAR           reduce using rule 12 (statute -> repeat .)
    OVAL            reduce using rule 12 (statute -> repeat .)
    TRIO            reduce using rule 12 (statute -> repeat .)
    QUAD            reduce using rule 12 (statute -> repeat .)
    ARC             reduce using rule 12 (statute -> repeat .)
    }               reduce using rule 12 (statute -> repeat .)
    MOD             reduce using rule 12 (statute -> repeat .)
    END             reduce using rule 12 (statute -> repeat .)


state 14

    (3) programA -> END .

    $end            reduce using rule 3 (programA -> END .)


state 15

    (16) statute -> screen .

    ID              reduce using rule 16 (statute -> screen .)
    IF              reduce using rule 16 (statute -> screen .)
    ECHO            reduce using rule 16 (statute -> screen .)
    REPLAY          reduce using rule 16 (statute -> screen .)
    SAMPLE          reduce using rule 16 (statute -> screen .)
    #               reduce using rule 16 (statute -> screen .)
    PIPE            reduce using rule 16 (statute -> screen .)
    WHERE           reduce using rule 16 (statute -> screen .)
    CLEAR           reduce using rule 16 (statute -> screen .)
    OVAL            reduce using rule 16 (statute -> screen .)
    TRIO            reduce using rule 16 (statute -> screen .)
    QUAD            reduce using rule 16 (statute -> screen .)
    ARC             reduce using rule 16 (statute -> screen .)
    }               reduce using rule 16 (statute -> screen .)
    MOD             reduce using rule 16 (statute -> screen .)
    END             reduce using rule 16 (statute -> screen .)


state 16

    (42) write -> ECHO . writeA ;
    (43) writeA -> . expression
    (44) writeA -> . CTE_STRING
    (61) expression -> . exp = = exp
    (62) expression -> . exp < > exp
    (63) expression -> . exp < = exp
    (64) expression -> . exp > = exp
    (65) expression -> . exp > exp
    (66) expression -> . exp < exp
    (67) expression -> . exp AND exp
    (68) expression -> . exp OR exp
    (69) expression -> . exp empty
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    CTE_STRING      shift and go to state 45
    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 46
    factor                         shift and go to state 38
    writeA                         shift and go to state 44
    expression                     shift and go to state 47

state 17

    (54) command -> SAMPLE . commandA
    (55) commandA -> . ON move exp CTE_INTEGER color ;
    (56) commandA -> . OFF move exp ;

    ON              shift and go to state 50
    OFF             shift and go to state 49

    commandA                       shift and go to state 48

state 18

    (1) program -> INIT programA .

    $end            reduce using rule 1 (program -> INIT programA .)


state 19

    (2) programA -> programB . END

    END             shift and go to state 51


state 20

    (79) figure -> QUAD .

    (               reduce using rule 79 (figure -> QUAD .)
    ID              reduce using rule 79 (figure -> QUAD .)
    CTE_INTEGER     reduce using rule 79 (figure -> QUAD .)
    CTE_FLOAT       reduce using rule 79 (figure -> QUAD .)
    TRUE            reduce using rule 79 (figure -> QUAD .)
    FALSE           reduce using rule 79 (figure -> QUAD .)


state 21

    (38) assign -> ID . = expression ;

    =               shift and go to state 52


state 22

    (39) condition -> IF . ( expression ) gotoFalse block conditionA

    (               shift and go to state 53


state 23

    (7) workspace -> statute .

    MOD             reduce using rule 7 (workspace -> statute .)
    ID              reduce using rule 7 (workspace -> statute .)
    IF              reduce using rule 7 (workspace -> statute .)
    ECHO            reduce using rule 7 (workspace -> statute .)
    REPLAY          reduce using rule 7 (workspace -> statute .)
    SAMPLE          reduce using rule 7 (workspace -> statute .)
    #               reduce using rule 7 (workspace -> statute .)
    PIPE            reduce using rule 7 (workspace -> statute .)
    WHERE           reduce using rule 7 (workspace -> statute .)
    CLEAR           reduce using rule 7 (workspace -> statute .)
    OVAL            reduce using rule 7 (workspace -> statute .)
    TRIO            reduce using rule 7 (workspace -> statute .)
    QUAD            reduce using rule 7 (workspace -> statute .)
    ARC             reduce using rule 7 (workspace -> statute .)
    END             reduce using rule 7 (workspace -> statute .)


state 24

    (15) statute -> pipeline .

    ID              reduce using rule 15 (statute -> pipeline .)
    IF              reduce using rule 15 (statute -> pipeline .)
    ECHO            reduce using rule 15 (statute -> pipeline .)
    REPLAY          reduce using rule 15 (statute -> pipeline .)
    SAMPLE          reduce using rule 15 (statute -> pipeline .)
    #               reduce using rule 15 (statute -> pipeline .)
    PIPE            reduce using rule 15 (statute -> pipeline .)
    WHERE           reduce using rule 15 (statute -> pipeline .)
    CLEAR           reduce using rule 15 (statute -> pipeline .)
    OVAL            reduce using rule 15 (statute -> pipeline .)
    TRIO            reduce using rule 15 (statute -> pipeline .)
    QUAD            reduce using rule 15 (statute -> pipeline .)
    ARC             reduce using rule 15 (statute -> pipeline .)
    }               reduce using rule 15 (statute -> pipeline .)
    MOD             reduce using rule 15 (statute -> pipeline .)
    END             reduce using rule 15 (statute -> pipeline .)


state 25

    (14) statute -> calling .

    ID              reduce using rule 14 (statute -> calling .)
    IF              reduce using rule 14 (statute -> calling .)
    ECHO            reduce using rule 14 (statute -> calling .)
    REPLAY          reduce using rule 14 (statute -> calling .)
    SAMPLE          reduce using rule 14 (statute -> calling .)
    #               reduce using rule 14 (statute -> calling .)
    PIPE            reduce using rule 14 (statute -> calling .)
    WHERE           reduce using rule 14 (statute -> calling .)
    CLEAR           reduce using rule 14 (statute -> calling .)
    OVAL            reduce using rule 14 (statute -> calling .)
    TRIO            reduce using rule 14 (statute -> calling .)
    QUAD            reduce using rule 14 (statute -> calling .)
    ARC             reduce using rule 14 (statute -> calling .)
    }               reduce using rule 14 (statute -> calling .)
    MOD             reduce using rule 14 (statute -> calling .)
    END             reduce using rule 14 (statute -> calling .)


state 26

    (93) screen -> WHERE .

    MOD             reduce using rule 93 (screen -> WHERE .)
    ID              reduce using rule 93 (screen -> WHERE .)
    IF              reduce using rule 93 (screen -> WHERE .)
    ECHO            reduce using rule 93 (screen -> WHERE .)
    REPLAY          reduce using rule 93 (screen -> WHERE .)
    SAMPLE          reduce using rule 93 (screen -> WHERE .)
    #               reduce using rule 93 (screen -> WHERE .)
    PIPE            reduce using rule 93 (screen -> WHERE .)
    WHERE           reduce using rule 93 (screen -> WHERE .)
    CLEAR           reduce using rule 93 (screen -> WHERE .)
    OVAL            reduce using rule 93 (screen -> WHERE .)
    TRIO            reduce using rule 93 (screen -> WHERE .)
    QUAD            reduce using rule 93 (screen -> WHERE .)
    ARC             reduce using rule 93 (screen -> WHERE .)
    END             reduce using rule 93 (screen -> WHERE .)
    }               reduce using rule 93 (screen -> WHERE .)


state 27

    (80) figure -> ARC .

    (               reduce using rule 80 (figure -> ARC .)
    ID              reduce using rule 80 (figure -> ARC .)
    CTE_INTEGER     reduce using rule 80 (figure -> ARC .)
    CTE_FLOAT       reduce using rule 80 (figure -> ARC .)
    TRUE            reduce using rule 80 (figure -> ARC .)
    FALSE           reduce using rule 80 (figure -> ARC .)


state 28

    (13) statute -> command .

    ID              reduce using rule 13 (statute -> command .)
    IF              reduce using rule 13 (statute -> command .)
    ECHO            reduce using rule 13 (statute -> command .)
    REPLAY          reduce using rule 13 (statute -> command .)
    SAMPLE          reduce using rule 13 (statute -> command .)
    #               reduce using rule 13 (statute -> command .)
    PIPE            reduce using rule 13 (statute -> command .)
    WHERE           reduce using rule 13 (statute -> command .)
    CLEAR           reduce using rule 13 (statute -> command .)
    OVAL            reduce using rule 13 (statute -> command .)
    TRIO            reduce using rule 13 (statute -> command .)
    QUAD            reduce using rule 13 (statute -> command .)
    ARC             reduce using rule 13 (statute -> command .)
    }               reduce using rule 13 (statute -> command .)
    MOD             reduce using rule 13 (statute -> command .)
    END             reduce using rule 13 (statute -> command .)


state 29

    (4) programB -> workspace . programC
    (5) programC -> . programB
    (6) programC -> . empty
    (4) programB -> . workspace programC
    (101) empty -> .
    (7) workspace -> . statute
    (8) workspace -> . module
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . repeat
    (13) statute -> . command
    (14) statute -> . calling
    (15) statute -> . pipeline
    (16) statute -> . screen
    (17) module -> . MOD # ID moduleA
    (38) assign -> . ID = expression ;
    (39) condition -> . IF ( expression ) gotoFalse block conditionA
    (42) write -> . ECHO writeA ;
    (57) repeat -> . REPLAY CTE_INTEGER [ repeatA ] ;
    (53) command -> . figure exp exp color ;
    (54) command -> . SAMPLE commandA
    (26) calling -> . # ID ( callingA
    (45) pipeline -> . PIPE ID pipelineA
    (93) screen -> . WHERE
    (94) screen -> . CLEAR
    (77) figure -> . OVAL
    (78) figure -> . TRIO
    (79) figure -> . QUAD
    (80) figure -> . ARC

    END             reduce using rule 101 (empty -> .)
    MOD             shift and go to state 31
    ID              shift and go to state 21
    IF              shift and go to state 22
    ECHO            shift and go to state 16
    REPLAY          shift and go to state 6
    SAMPLE          shift and go to state 17
    #               shift and go to state 8
    PIPE            shift and go to state 7
    WHERE           shift and go to state 26
    CLEAR           shift and go to state 11
    OVAL            shift and go to state 5
    TRIO            shift and go to state 12
    QUAD            shift and go to state 20
    ARC             shift and go to state 27

    figure                         shift and go to state 3
    module                         shift and go to state 4
    write                          shift and go to state 9
    condition                      shift and go to state 10
    empty                          shift and go to state 54
    repeat                         shift and go to state 13
    screen                         shift and go to state 15
    programB                       shift and go to state 55
    programC                       shift and go to state 56
    statute                        shift and go to state 23
    pipeline                       shift and go to state 24
    calling                        shift and go to state 25
    command                        shift and go to state 28
    workspace                      shift and go to state 29
    assign                         shift and go to state 30

state 30

    (9) statute -> assign .

    ID              reduce using rule 9 (statute -> assign .)
    IF              reduce using rule 9 (statute -> assign .)
    ECHO            reduce using rule 9 (statute -> assign .)
    REPLAY          reduce using rule 9 (statute -> assign .)
    SAMPLE          reduce using rule 9 (statute -> assign .)
    #               reduce using rule 9 (statute -> assign .)
    PIPE            reduce using rule 9 (statute -> assign .)
    WHERE           reduce using rule 9 (statute -> assign .)
    CLEAR           reduce using rule 9 (statute -> assign .)
    OVAL            reduce using rule 9 (statute -> assign .)
    TRIO            reduce using rule 9 (statute -> assign .)
    QUAD            reduce using rule 9 (statute -> assign .)
    ARC             reduce using rule 9 (statute -> assign .)
    }               reduce using rule 9 (statute -> assign .)
    MOD             reduce using rule 9 (statute -> assign .)
    END             reduce using rule 9 (statute -> assign .)


state 31

    (17) module -> MOD . # ID moduleA

    #               shift and go to state 57


state 32

    (97) var_cte -> CTE_FLOAT .

    =               reduce using rule 97 (var_cte -> CTE_FLOAT .)
    <               reduce using rule 97 (var_cte -> CTE_FLOAT .)
    >               reduce using rule 97 (var_cte -> CTE_FLOAT .)
    AND             reduce using rule 97 (var_cte -> CTE_FLOAT .)
    OR              reduce using rule 97 (var_cte -> CTE_FLOAT .)
    +               reduce using rule 97 (var_cte -> CTE_FLOAT .)
    -               reduce using rule 97 (var_cte -> CTE_FLOAT .)
    *               reduce using rule 97 (var_cte -> CTE_FLOAT .)
    /               reduce using rule 97 (var_cte -> CTE_FLOAT .)
    )               reduce using rule 97 (var_cte -> CTE_FLOAT .)
    ;               reduce using rule 97 (var_cte -> CTE_FLOAT .)
    ,               reduce using rule 97 (var_cte -> CTE_FLOAT .)
    (               reduce using rule 97 (var_cte -> CTE_FLOAT .)
    ID              reduce using rule 97 (var_cte -> CTE_FLOAT .)
    CTE_INTEGER     reduce using rule 97 (var_cte -> CTE_FLOAT .)
    CTE_FLOAT       reduce using rule 97 (var_cte -> CTE_FLOAT .)
    TRUE            reduce using rule 97 (var_cte -> CTE_FLOAT .)
    FALSE           reduce using rule 97 (var_cte -> CTE_FLOAT .)
    RED             reduce using rule 97 (var_cte -> CTE_FLOAT .)
    YELLOW          reduce using rule 97 (var_cte -> CTE_FLOAT .)
    BLUE            reduce using rule 97 (var_cte -> CTE_FLOAT .)
    GREEN           reduce using rule 97 (var_cte -> CTE_FLOAT .)
    BLACK           reduce using rule 97 (var_cte -> CTE_FLOAT .)
    ORANGE          reduce using rule 97 (var_cte -> CTE_FLOAT .)
    PURPLE          reduce using rule 97 (var_cte -> CTE_FLOAT .)
    CYAN            reduce using rule 97 (var_cte -> CTE_FLOAT .)
    ]               reduce using rule 97 (var_cte -> CTE_FLOAT .)


state 33

    (75) factor -> ( . expression )
    (61) expression -> . exp = = exp
    (62) expression -> . exp < > exp
    (63) expression -> . exp < = exp
    (64) expression -> . exp > = exp
    (65) expression -> . exp > exp
    (66) expression -> . exp < exp
    (67) expression -> . exp AND exp
    (68) expression -> . exp OR exp
    (69) expression -> . exp empty
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    expression                     shift and go to state 58
    exp                            shift and go to state 46
    factor                         shift and go to state 38

state 34

    (76) factor -> var_cte .

    =               reduce using rule 76 (factor -> var_cte .)
    <               reduce using rule 76 (factor -> var_cte .)
    >               reduce using rule 76 (factor -> var_cte .)
    AND             reduce using rule 76 (factor -> var_cte .)
    OR              reduce using rule 76 (factor -> var_cte .)
    +               reduce using rule 76 (factor -> var_cte .)
    -               reduce using rule 76 (factor -> var_cte .)
    *               reduce using rule 76 (factor -> var_cte .)
    /               reduce using rule 76 (factor -> var_cte .)
    )               reduce using rule 76 (factor -> var_cte .)
    ;               reduce using rule 76 (factor -> var_cte .)
    ,               reduce using rule 76 (factor -> var_cte .)
    (               reduce using rule 76 (factor -> var_cte .)
    ID              reduce using rule 76 (factor -> var_cte .)
    CTE_INTEGER     reduce using rule 76 (factor -> var_cte .)
    CTE_FLOAT       reduce using rule 76 (factor -> var_cte .)
    TRUE            reduce using rule 76 (factor -> var_cte .)
    FALSE           reduce using rule 76 (factor -> var_cte .)
    RED             reduce using rule 76 (factor -> var_cte .)
    YELLOW          reduce using rule 76 (factor -> var_cte .)
    BLUE            reduce using rule 76 (factor -> var_cte .)
    GREEN           reduce using rule 76 (factor -> var_cte .)
    BLACK           reduce using rule 76 (factor -> var_cte .)
    ORANGE          reduce using rule 76 (factor -> var_cte .)
    PURPLE          reduce using rule 76 (factor -> var_cte .)
    CYAN            reduce using rule 76 (factor -> var_cte .)
    ]               reduce using rule 76 (factor -> var_cte .)


state 35

    (96) var_cte -> CTE_INTEGER .

    =               reduce using rule 96 (var_cte -> CTE_INTEGER .)
    <               reduce using rule 96 (var_cte -> CTE_INTEGER .)
    >               reduce using rule 96 (var_cte -> CTE_INTEGER .)
    AND             reduce using rule 96 (var_cte -> CTE_INTEGER .)
    OR              reduce using rule 96 (var_cte -> CTE_INTEGER .)
    +               reduce using rule 96 (var_cte -> CTE_INTEGER .)
    -               reduce using rule 96 (var_cte -> CTE_INTEGER .)
    *               reduce using rule 96 (var_cte -> CTE_INTEGER .)
    /               reduce using rule 96 (var_cte -> CTE_INTEGER .)
    )               reduce using rule 96 (var_cte -> CTE_INTEGER .)
    ;               reduce using rule 96 (var_cte -> CTE_INTEGER .)
    ,               reduce using rule 96 (var_cte -> CTE_INTEGER .)
    (               reduce using rule 96 (var_cte -> CTE_INTEGER .)
    ID              reduce using rule 96 (var_cte -> CTE_INTEGER .)
    CTE_INTEGER     reduce using rule 96 (var_cte -> CTE_INTEGER .)
    CTE_FLOAT       reduce using rule 96 (var_cte -> CTE_INTEGER .)
    TRUE            reduce using rule 96 (var_cte -> CTE_INTEGER .)
    FALSE           reduce using rule 96 (var_cte -> CTE_INTEGER .)
    RED             reduce using rule 96 (var_cte -> CTE_INTEGER .)
    YELLOW          reduce using rule 96 (var_cte -> CTE_INTEGER .)
    BLUE            reduce using rule 96 (var_cte -> CTE_INTEGER .)
    GREEN           reduce using rule 96 (var_cte -> CTE_INTEGER .)
    BLACK           reduce using rule 96 (var_cte -> CTE_INTEGER .)
    ORANGE          reduce using rule 96 (var_cte -> CTE_INTEGER .)
    PURPLE          reduce using rule 96 (var_cte -> CTE_INTEGER .)
    CYAN            reduce using rule 96 (var_cte -> CTE_INTEGER .)
    ]               reduce using rule 96 (var_cte -> CTE_INTEGER .)


state 36

    (98) var_cte -> TRUE .

    =               reduce using rule 98 (var_cte -> TRUE .)
    <               reduce using rule 98 (var_cte -> TRUE .)
    >               reduce using rule 98 (var_cte -> TRUE .)
    AND             reduce using rule 98 (var_cte -> TRUE .)
    OR              reduce using rule 98 (var_cte -> TRUE .)
    +               reduce using rule 98 (var_cte -> TRUE .)
    -               reduce using rule 98 (var_cte -> TRUE .)
    *               reduce using rule 98 (var_cte -> TRUE .)
    /               reduce using rule 98 (var_cte -> TRUE .)
    )               reduce using rule 98 (var_cte -> TRUE .)
    ;               reduce using rule 98 (var_cte -> TRUE .)
    ,               reduce using rule 98 (var_cte -> TRUE .)
    (               reduce using rule 98 (var_cte -> TRUE .)
    ID              reduce using rule 98 (var_cte -> TRUE .)
    CTE_INTEGER     reduce using rule 98 (var_cte -> TRUE .)
    CTE_FLOAT       reduce using rule 98 (var_cte -> TRUE .)
    TRUE            reduce using rule 98 (var_cte -> TRUE .)
    FALSE           reduce using rule 98 (var_cte -> TRUE .)
    RED             reduce using rule 98 (var_cte -> TRUE .)
    YELLOW          reduce using rule 98 (var_cte -> TRUE .)
    BLUE            reduce using rule 98 (var_cte -> TRUE .)
    GREEN           reduce using rule 98 (var_cte -> TRUE .)
    BLACK           reduce using rule 98 (var_cte -> TRUE .)
    ORANGE          reduce using rule 98 (var_cte -> TRUE .)
    PURPLE          reduce using rule 98 (var_cte -> TRUE .)
    CYAN            reduce using rule 98 (var_cte -> TRUE .)
    ]               reduce using rule 98 (var_cte -> TRUE .)


state 37

    (53) command -> figure exp . exp color ;
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    +               shift and go to state 59
    -               shift and go to state 61
    *               shift and go to state 60
    /               shift and go to state 62
    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 63
    factor                         shift and go to state 38

state 38

    (74) exp -> factor . empty
    (101) empty -> .

    +               reduce using rule 101 (empty -> .)
    -               reduce using rule 101 (empty -> .)
    *               reduce using rule 101 (empty -> .)
    /               reduce using rule 101 (empty -> .)
    (               reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)
    CTE_INTEGER     reduce using rule 101 (empty -> .)
    CTE_FLOAT       reduce using rule 101 (empty -> .)
    TRUE            reduce using rule 101 (empty -> .)
    FALSE           reduce using rule 101 (empty -> .)
    =               reduce using rule 101 (empty -> .)
    <               reduce using rule 101 (empty -> .)
    >               reduce using rule 101 (empty -> .)
    AND             reduce using rule 101 (empty -> .)
    OR              reduce using rule 101 (empty -> .)
    ;               reduce using rule 101 (empty -> .)
    )               reduce using rule 101 (empty -> .)
    RED             reduce using rule 101 (empty -> .)
    YELLOW          reduce using rule 101 (empty -> .)
    BLUE            reduce using rule 101 (empty -> .)
    GREEN           reduce using rule 101 (empty -> .)
    BLACK           reduce using rule 101 (empty -> .)
    ORANGE          reduce using rule 101 (empty -> .)
    PURPLE          reduce using rule 101 (empty -> .)
    CYAN            reduce using rule 101 (empty -> .)
    ,               reduce using rule 101 (empty -> .)
    ]               reduce using rule 101 (empty -> .)

    empty                          shift and go to state 64

state 39

    (99) var_cte -> FALSE .

    =               reduce using rule 99 (var_cte -> FALSE .)
    <               reduce using rule 99 (var_cte -> FALSE .)
    >               reduce using rule 99 (var_cte -> FALSE .)
    AND             reduce using rule 99 (var_cte -> FALSE .)
    OR              reduce using rule 99 (var_cte -> FALSE .)
    +               reduce using rule 99 (var_cte -> FALSE .)
    -               reduce using rule 99 (var_cte -> FALSE .)
    *               reduce using rule 99 (var_cte -> FALSE .)
    /               reduce using rule 99 (var_cte -> FALSE .)
    )               reduce using rule 99 (var_cte -> FALSE .)
    ;               reduce using rule 99 (var_cte -> FALSE .)
    ,               reduce using rule 99 (var_cte -> FALSE .)
    (               reduce using rule 99 (var_cte -> FALSE .)
    ID              reduce using rule 99 (var_cte -> FALSE .)
    CTE_INTEGER     reduce using rule 99 (var_cte -> FALSE .)
    CTE_FLOAT       reduce using rule 99 (var_cte -> FALSE .)
    TRUE            reduce using rule 99 (var_cte -> FALSE .)
    FALSE           reduce using rule 99 (var_cte -> FALSE .)
    RED             reduce using rule 99 (var_cte -> FALSE .)
    YELLOW          reduce using rule 99 (var_cte -> FALSE .)
    BLUE            reduce using rule 99 (var_cte -> FALSE .)
    GREEN           reduce using rule 99 (var_cte -> FALSE .)
    BLACK           reduce using rule 99 (var_cte -> FALSE .)
    ORANGE          reduce using rule 99 (var_cte -> FALSE .)
    PURPLE          reduce using rule 99 (var_cte -> FALSE .)
    CYAN            reduce using rule 99 (var_cte -> FALSE .)
    ]               reduce using rule 99 (var_cte -> FALSE .)


state 40

    (95) var_cte -> ID .

    =               reduce using rule 95 (var_cte -> ID .)
    <               reduce using rule 95 (var_cte -> ID .)
    >               reduce using rule 95 (var_cte -> ID .)
    AND             reduce using rule 95 (var_cte -> ID .)
    OR              reduce using rule 95 (var_cte -> ID .)
    +               reduce using rule 95 (var_cte -> ID .)
    -               reduce using rule 95 (var_cte -> ID .)
    *               reduce using rule 95 (var_cte -> ID .)
    /               reduce using rule 95 (var_cte -> ID .)
    )               reduce using rule 95 (var_cte -> ID .)
    ;               reduce using rule 95 (var_cte -> ID .)
    ,               reduce using rule 95 (var_cte -> ID .)
    (               reduce using rule 95 (var_cte -> ID .)
    ID              reduce using rule 95 (var_cte -> ID .)
    CTE_INTEGER     reduce using rule 95 (var_cte -> ID .)
    CTE_FLOAT       reduce using rule 95 (var_cte -> ID .)
    TRUE            reduce using rule 95 (var_cte -> ID .)
    FALSE           reduce using rule 95 (var_cte -> ID .)
    RED             reduce using rule 95 (var_cte -> ID .)
    YELLOW          reduce using rule 95 (var_cte -> ID .)
    BLUE            reduce using rule 95 (var_cte -> ID .)
    GREEN           reduce using rule 95 (var_cte -> ID .)
    BLACK           reduce using rule 95 (var_cte -> ID .)
    ORANGE          reduce using rule 95 (var_cte -> ID .)
    PURPLE          reduce using rule 95 (var_cte -> ID .)
    CYAN            reduce using rule 95 (var_cte -> ID .)
    ]               reduce using rule 95 (var_cte -> ID .)


state 41

    (57) repeat -> REPLAY CTE_INTEGER . [ repeatA ] ;

    [               shift and go to state 65


state 42

    (45) pipeline -> PIPE ID . pipelineA
    (46) pipelineA -> . [ pipelineB ] ;
    (47) pipelineA -> . IN ( var_cte ) ;
    (48) pipelineA -> . OUT ( ) ;
    (49) pipelineA -> . COUNT ;

    [               shift and go to state 69
    IN              shift and go to state 67
    OUT             shift and go to state 70
    COUNT           shift and go to state 66

    pipelineA                      shift and go to state 68

state 43

    (26) calling -> # ID . ( callingA

    (               shift and go to state 71


state 44

    (42) write -> ECHO writeA . ;

    ;               shift and go to state 72


state 45

    (44) writeA -> CTE_STRING .

    ;               reduce using rule 44 (writeA -> CTE_STRING .)


state 46

    (61) expression -> exp . = = exp
    (62) expression -> exp . < > exp
    (63) expression -> exp . < = exp
    (64) expression -> exp . > = exp
    (65) expression -> exp . > exp
    (66) expression -> exp . < exp
    (67) expression -> exp . AND exp
    (68) expression -> exp . OR exp
    (69) expression -> exp . empty
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp
    (101) empty -> .

    =               shift and go to state 75
    <               shift and go to state 74
    >               shift and go to state 78
    AND             shift and go to state 73
    OR              shift and go to state 76
    +               shift and go to state 59
    -               shift and go to state 61
    *               shift and go to state 60
    /               shift and go to state 62
    ;               reduce using rule 101 (empty -> .)
    )               reduce using rule 101 (empty -> .)
    ,               reduce using rule 101 (empty -> .)

    empty                          shift and go to state 77

state 47

    (43) writeA -> expression .

    ;               reduce using rule 43 (writeA -> expression .)


state 48

    (54) command -> SAMPLE commandA .

    SAMPLE          reduce using rule 54 (command -> SAMPLE commandA .)
    OVAL            reduce using rule 54 (command -> SAMPLE commandA .)
    TRIO            reduce using rule 54 (command -> SAMPLE commandA .)
    QUAD            reduce using rule 54 (command -> SAMPLE commandA .)
    ARC             reduce using rule 54 (command -> SAMPLE commandA .)
    ]               reduce using rule 54 (command -> SAMPLE commandA .)
    MOD             reduce using rule 54 (command -> SAMPLE commandA .)
    ID              reduce using rule 54 (command -> SAMPLE commandA .)
    IF              reduce using rule 54 (command -> SAMPLE commandA .)
    ECHO            reduce using rule 54 (command -> SAMPLE commandA .)
    REPLAY          reduce using rule 54 (command -> SAMPLE commandA .)
    #               reduce using rule 54 (command -> SAMPLE commandA .)
    PIPE            reduce using rule 54 (command -> SAMPLE commandA .)
    WHERE           reduce using rule 54 (command -> SAMPLE commandA .)
    CLEAR           reduce using rule 54 (command -> SAMPLE commandA .)
    END             reduce using rule 54 (command -> SAMPLE commandA .)
    }               reduce using rule 54 (command -> SAMPLE commandA .)


state 49

    (56) commandA -> OFF . move exp ;
    (81) move -> . UP
    (82) move -> . DOWN
    (83) move -> . LEFT
    (84) move -> . RIGHT

    UP              shift and go to state 81
    DOWN            shift and go to state 82
    LEFT            shift and go to state 83
    RIGHT           shift and go to state 79

    move                           shift and go to state 80

state 50

    (55) commandA -> ON . move exp CTE_INTEGER color ;
    (81) move -> . UP
    (82) move -> . DOWN
    (83) move -> . LEFT
    (84) move -> . RIGHT

    UP              shift and go to state 81
    DOWN            shift and go to state 82
    LEFT            shift and go to state 83
    RIGHT           shift and go to state 79

    move                           shift and go to state 84

state 51

    (2) programA -> programB END .

    $end            reduce using rule 2 (programA -> programB END .)


state 52

    (38) assign -> ID = . expression ;
    (61) expression -> . exp = = exp
    (62) expression -> . exp < > exp
    (63) expression -> . exp < = exp
    (64) expression -> . exp > = exp
    (65) expression -> . exp > exp
    (66) expression -> . exp < exp
    (67) expression -> . exp AND exp
    (68) expression -> . exp OR exp
    (69) expression -> . exp empty
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    expression                     shift and go to state 85
    exp                            shift and go to state 46
    factor                         shift and go to state 38

state 53

    (39) condition -> IF ( . expression ) gotoFalse block conditionA
    (61) expression -> . exp = = exp
    (62) expression -> . exp < > exp
    (63) expression -> . exp < = exp
    (64) expression -> . exp > = exp
    (65) expression -> . exp > exp
    (66) expression -> . exp < exp
    (67) expression -> . exp AND exp
    (68) expression -> . exp OR exp
    (69) expression -> . exp empty
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    exp                            shift and go to state 46
    factor                         shift and go to state 38
    var_cte                        shift and go to state 34
    expression                     shift and go to state 86

state 54

    (6) programC -> empty .

    END             reduce using rule 6 (programC -> empty .)


state 55

    (5) programC -> programB .

    END             reduce using rule 5 (programC -> programB .)


state 56

    (4) programB -> workspace programC .

    END             reduce using rule 4 (programB -> workspace programC .)


state 57

    (17) module -> MOD # . ID moduleA

    ID              shift and go to state 87


state 58

    (75) factor -> ( expression . )

    )               shift and go to state 88


state 59

    (70) exp -> exp + . exp
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 89
    factor                         shift and go to state 38

state 60

    (72) exp -> exp * . exp
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 90
    factor                         shift and go to state 38

state 61

    (71) exp -> exp - . exp
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 91
    factor                         shift and go to state 38

state 62

    (73) exp -> exp / . exp
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 92
    factor                         shift and go to state 38

state 63

    (53) command -> figure exp exp . color ;
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp
    (85) color -> . RED
    (86) color -> . YELLOW
    (87) color -> . BLUE
    (88) color -> . GREEN
    (89) color -> . BLACK
    (90) color -> . ORANGE
    (91) color -> . PURPLE
    (92) color -> . CYAN

    +               shift and go to state 59
    -               shift and go to state 61
    *               shift and go to state 60
    /               shift and go to state 62
    RED             shift and go to state 101
    YELLOW          shift and go to state 97
    BLUE            shift and go to state 93
    GREEN           shift and go to state 96
    BLACK           shift and go to state 100
    ORANGE          shift and go to state 99
    PURPLE          shift and go to state 95
    CYAN            shift and go to state 98

    color                          shift and go to state 94

state 64

    (74) exp -> factor empty .

    =               reduce using rule 74 (exp -> factor empty .)
    <               reduce using rule 74 (exp -> factor empty .)
    >               reduce using rule 74 (exp -> factor empty .)
    AND             reduce using rule 74 (exp -> factor empty .)
    OR              reduce using rule 74 (exp -> factor empty .)
    +               reduce using rule 74 (exp -> factor empty .)
    -               reduce using rule 74 (exp -> factor empty .)
    *               reduce using rule 74 (exp -> factor empty .)
    /               reduce using rule 74 (exp -> factor empty .)
    ;               reduce using rule 74 (exp -> factor empty .)
    (               reduce using rule 74 (exp -> factor empty .)
    ID              reduce using rule 74 (exp -> factor empty .)
    CTE_INTEGER     reduce using rule 74 (exp -> factor empty .)
    CTE_FLOAT       reduce using rule 74 (exp -> factor empty .)
    TRUE            reduce using rule 74 (exp -> factor empty .)
    FALSE           reduce using rule 74 (exp -> factor empty .)
    )               reduce using rule 74 (exp -> factor empty .)
    ,               reduce using rule 74 (exp -> factor empty .)
    RED             reduce using rule 74 (exp -> factor empty .)
    YELLOW          reduce using rule 74 (exp -> factor empty .)
    BLUE            reduce using rule 74 (exp -> factor empty .)
    GREEN           reduce using rule 74 (exp -> factor empty .)
    BLACK           reduce using rule 74 (exp -> factor empty .)
    ORANGE          reduce using rule 74 (exp -> factor empty .)
    PURPLE          reduce using rule 74 (exp -> factor empty .)
    CYAN            reduce using rule 74 (exp -> factor empty .)
    ]               reduce using rule 74 (exp -> factor empty .)


state 65

    (57) repeat -> REPLAY CTE_INTEGER [ . repeatA ] ;
    (58) repeatA -> . command repeatB
    (53) command -> . figure exp exp color ;
    (54) command -> . SAMPLE commandA
    (77) figure -> . OVAL
    (78) figure -> . TRIO
    (79) figure -> . QUAD
    (80) figure -> . ARC

    SAMPLE          shift and go to state 17
    OVAL            shift and go to state 5
    TRIO            shift and go to state 12
    QUAD            shift and go to state 20
    ARC             shift and go to state 27

    figure                         shift and go to state 3
    repeatA                        shift and go to state 102
    command                        shift and go to state 103

state 66

    (49) pipelineA -> COUNT . ;

    ;               shift and go to state 104


state 67

    (47) pipelineA -> IN . ( var_cte ) ;

    (               shift and go to state 105


state 68

    (45) pipeline -> PIPE ID pipelineA .

    MOD             reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    ID              reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    IF              reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    ECHO            reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    REPLAY          reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    SAMPLE          reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    #               reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    PIPE            reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    WHERE           reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    CLEAR           reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    OVAL            reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    TRIO            reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    QUAD            reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    ARC             reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    END             reduce using rule 45 (pipeline -> PIPE ID pipelineA .)
    }               reduce using rule 45 (pipeline -> PIPE ID pipelineA .)


state 69

    (46) pipelineA -> [ . pipelineB ] ;
    (50) pipelineB -> . exp pipelineC
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    pipelineB                      shift and go to state 106
    exp                            shift and go to state 107
    factor                         shift and go to state 38

state 70

    (48) pipelineA -> OUT . ( ) ;

    (               shift and go to state 108


state 71

    (26) calling -> # ID ( . callingA
    (27) callingA -> . callingB ) ;
    (28) callingA -> . ) ;
    (29) callingB -> . expression callingC
    (61) expression -> . exp = = exp
    (62) expression -> . exp < > exp
    (63) expression -> . exp < = exp
    (64) expression -> . exp > = exp
    (65) expression -> . exp > exp
    (66) expression -> . exp < exp
    (67) expression -> . exp AND exp
    (68) expression -> . exp OR exp
    (69) expression -> . exp empty
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    )               shift and go to state 109
    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    callingA                       shift and go to state 110
    callingB                       shift and go to state 111
    exp                            shift and go to state 46
    factor                         shift and go to state 38
    expression                     shift and go to state 112

state 72

    (42) write -> ECHO writeA ; .

    ID              reduce using rule 42 (write -> ECHO writeA ; .)
    IF              reduce using rule 42 (write -> ECHO writeA ; .)
    ECHO            reduce using rule 42 (write -> ECHO writeA ; .)
    REPLAY          reduce using rule 42 (write -> ECHO writeA ; .)
    SAMPLE          reduce using rule 42 (write -> ECHO writeA ; .)
    #               reduce using rule 42 (write -> ECHO writeA ; .)
    PIPE            reduce using rule 42 (write -> ECHO writeA ; .)
    WHERE           reduce using rule 42 (write -> ECHO writeA ; .)
    CLEAR           reduce using rule 42 (write -> ECHO writeA ; .)
    OVAL            reduce using rule 42 (write -> ECHO writeA ; .)
    TRIO            reduce using rule 42 (write -> ECHO writeA ; .)
    QUAD            reduce using rule 42 (write -> ECHO writeA ; .)
    ARC             reduce using rule 42 (write -> ECHO writeA ; .)
    }               reduce using rule 42 (write -> ECHO writeA ; .)
    MOD             reduce using rule 42 (write -> ECHO writeA ; .)
    END             reduce using rule 42 (write -> ECHO writeA ; .)


state 73

    (67) expression -> exp AND . exp
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 113
    factor                         shift and go to state 38

state 74

    (62) expression -> exp < . > exp
    (63) expression -> exp < . = exp
    (66) expression -> exp < . exp
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    >               shift and go to state 116
    =               shift and go to state 115
    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 114
    factor                         shift and go to state 38

state 75

    (61) expression -> exp = . = exp

    =               shift and go to state 117


state 76

    (68) expression -> exp OR . exp
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 118
    factor                         shift and go to state 38

state 77

    (69) expression -> exp empty .

    ,               reduce using rule 69 (expression -> exp empty .)
    )               reduce using rule 69 (expression -> exp empty .)
    ;               reduce using rule 69 (expression -> exp empty .)


state 78

    (64) expression -> exp > . = exp
    (65) expression -> exp > . exp
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    =               shift and go to state 120
    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 119
    factor                         shift and go to state 38

state 79

    (84) move -> RIGHT .

    (               reduce using rule 84 (move -> RIGHT .)
    ID              reduce using rule 84 (move -> RIGHT .)
    CTE_INTEGER     reduce using rule 84 (move -> RIGHT .)
    CTE_FLOAT       reduce using rule 84 (move -> RIGHT .)
    TRUE            reduce using rule 84 (move -> RIGHT .)
    FALSE           reduce using rule 84 (move -> RIGHT .)


state 80

    (56) commandA -> OFF move . exp ;
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 121
    factor                         shift and go to state 38

state 81

    (81) move -> UP .

    (               reduce using rule 81 (move -> UP .)
    ID              reduce using rule 81 (move -> UP .)
    CTE_INTEGER     reduce using rule 81 (move -> UP .)
    CTE_FLOAT       reduce using rule 81 (move -> UP .)
    TRUE            reduce using rule 81 (move -> UP .)
    FALSE           reduce using rule 81 (move -> UP .)


state 82

    (82) move -> DOWN .

    (               reduce using rule 82 (move -> DOWN .)
    ID              reduce using rule 82 (move -> DOWN .)
    CTE_INTEGER     reduce using rule 82 (move -> DOWN .)
    CTE_FLOAT       reduce using rule 82 (move -> DOWN .)
    TRUE            reduce using rule 82 (move -> DOWN .)
    FALSE           reduce using rule 82 (move -> DOWN .)


state 83

    (83) move -> LEFT .

    (               reduce using rule 83 (move -> LEFT .)
    ID              reduce using rule 83 (move -> LEFT .)
    CTE_INTEGER     reduce using rule 83 (move -> LEFT .)
    CTE_FLOAT       reduce using rule 83 (move -> LEFT .)
    TRUE            reduce using rule 83 (move -> LEFT .)
    FALSE           reduce using rule 83 (move -> LEFT .)


state 84

    (55) commandA -> ON move . exp CTE_INTEGER color ;
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 122
    factor                         shift and go to state 38

state 85

    (38) assign -> ID = expression . ;

    ;               shift and go to state 123


state 86

    (39) condition -> IF ( expression . ) gotoFalse block conditionA

    )               shift and go to state 124


state 87

    (17) module -> MOD # ID . moduleA
    (18) moduleA -> . ( vars ) block
    (19) moduleA -> . block
    (32) block -> . { blockA

    (               shift and go to state 125
    {               shift and go to state 127

    block                          shift and go to state 126
    moduleA                        shift and go to state 128

state 88

    (75) factor -> ( expression ) .

    =               reduce using rule 75 (factor -> ( expression ) .)
    <               reduce using rule 75 (factor -> ( expression ) .)
    >               reduce using rule 75 (factor -> ( expression ) .)
    AND             reduce using rule 75 (factor -> ( expression ) .)
    OR              reduce using rule 75 (factor -> ( expression ) .)
    +               reduce using rule 75 (factor -> ( expression ) .)
    -               reduce using rule 75 (factor -> ( expression ) .)
    *               reduce using rule 75 (factor -> ( expression ) .)
    /               reduce using rule 75 (factor -> ( expression ) .)
    )               reduce using rule 75 (factor -> ( expression ) .)
    ;               reduce using rule 75 (factor -> ( expression ) .)
    ,               reduce using rule 75 (factor -> ( expression ) .)
    (               reduce using rule 75 (factor -> ( expression ) .)
    ID              reduce using rule 75 (factor -> ( expression ) .)
    CTE_INTEGER     reduce using rule 75 (factor -> ( expression ) .)
    CTE_FLOAT       reduce using rule 75 (factor -> ( expression ) .)
    TRUE            reduce using rule 75 (factor -> ( expression ) .)
    FALSE           reduce using rule 75 (factor -> ( expression ) .)
    RED             reduce using rule 75 (factor -> ( expression ) .)
    YELLOW          reduce using rule 75 (factor -> ( expression ) .)
    BLUE            reduce using rule 75 (factor -> ( expression ) .)
    GREEN           reduce using rule 75 (factor -> ( expression ) .)
    BLACK           reduce using rule 75 (factor -> ( expression ) .)
    ORANGE          reduce using rule 75 (factor -> ( expression ) .)
    PURPLE          reduce using rule 75 (factor -> ( expression ) .)
    CYAN            reduce using rule 75 (factor -> ( expression ) .)
    ]               reduce using rule 75 (factor -> ( expression ) .)


state 89

    (70) exp -> exp + exp .
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp

    =               reduce using rule 70 (exp -> exp + exp .)
    <               reduce using rule 70 (exp -> exp + exp .)
    >               reduce using rule 70 (exp -> exp + exp .)
    AND             reduce using rule 70 (exp -> exp + exp .)
    OR              reduce using rule 70 (exp -> exp + exp .)
    +               reduce using rule 70 (exp -> exp + exp .)
    -               reduce using rule 70 (exp -> exp + exp .)
    ;               reduce using rule 70 (exp -> exp + exp .)
    (               reduce using rule 70 (exp -> exp + exp .)
    ID              reduce using rule 70 (exp -> exp + exp .)
    CTE_INTEGER     reduce using rule 70 (exp -> exp + exp .)
    CTE_FLOAT       reduce using rule 70 (exp -> exp + exp .)
    TRUE            reduce using rule 70 (exp -> exp + exp .)
    FALSE           reduce using rule 70 (exp -> exp + exp .)
    )               reduce using rule 70 (exp -> exp + exp .)
    ,               reduce using rule 70 (exp -> exp + exp .)
    RED             reduce using rule 70 (exp -> exp + exp .)
    YELLOW          reduce using rule 70 (exp -> exp + exp .)
    BLUE            reduce using rule 70 (exp -> exp + exp .)
    GREEN           reduce using rule 70 (exp -> exp + exp .)
    BLACK           reduce using rule 70 (exp -> exp + exp .)
    ORANGE          reduce using rule 70 (exp -> exp + exp .)
    PURPLE          reduce using rule 70 (exp -> exp + exp .)
    CYAN            reduce using rule 70 (exp -> exp + exp .)
    ]               reduce using rule 70 (exp -> exp + exp .)
    *               shift and go to state 60
    /               shift and go to state 62

  ! *               [ reduce using rule 70 (exp -> exp + exp .) ]
  ! /               [ reduce using rule 70 (exp -> exp + exp .) ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 61 ]


state 90

    (72) exp -> exp * exp .
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp

    =               reduce using rule 72 (exp -> exp * exp .)
    <               reduce using rule 72 (exp -> exp * exp .)
    >               reduce using rule 72 (exp -> exp * exp .)
    AND             reduce using rule 72 (exp -> exp * exp .)
    OR              reduce using rule 72 (exp -> exp * exp .)
    +               reduce using rule 72 (exp -> exp * exp .)
    -               reduce using rule 72 (exp -> exp * exp .)
    *               reduce using rule 72 (exp -> exp * exp .)
    /               reduce using rule 72 (exp -> exp * exp .)
    ;               reduce using rule 72 (exp -> exp * exp .)
    (               reduce using rule 72 (exp -> exp * exp .)
    ID              reduce using rule 72 (exp -> exp * exp .)
    CTE_INTEGER     reduce using rule 72 (exp -> exp * exp .)
    CTE_FLOAT       reduce using rule 72 (exp -> exp * exp .)
    TRUE            reduce using rule 72 (exp -> exp * exp .)
    FALSE           reduce using rule 72 (exp -> exp * exp .)
    )               reduce using rule 72 (exp -> exp * exp .)
    ,               reduce using rule 72 (exp -> exp * exp .)
    RED             reduce using rule 72 (exp -> exp * exp .)
    YELLOW          reduce using rule 72 (exp -> exp * exp .)
    BLUE            reduce using rule 72 (exp -> exp * exp .)
    GREEN           reduce using rule 72 (exp -> exp * exp .)
    BLACK           reduce using rule 72 (exp -> exp * exp .)
    ORANGE          reduce using rule 72 (exp -> exp * exp .)
    PURPLE          reduce using rule 72 (exp -> exp * exp .)
    CYAN            reduce using rule 72 (exp -> exp * exp .)
    ]               reduce using rule 72 (exp -> exp * exp .)

  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 61 ]
  ! *               [ shift and go to state 60 ]
  ! /               [ shift and go to state 62 ]


state 91

    (71) exp -> exp - exp .
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp

    =               reduce using rule 71 (exp -> exp - exp .)
    <               reduce using rule 71 (exp -> exp - exp .)
    >               reduce using rule 71 (exp -> exp - exp .)
    AND             reduce using rule 71 (exp -> exp - exp .)
    OR              reduce using rule 71 (exp -> exp - exp .)
    +               reduce using rule 71 (exp -> exp - exp .)
    -               reduce using rule 71 (exp -> exp - exp .)
    ;               reduce using rule 71 (exp -> exp - exp .)
    (               reduce using rule 71 (exp -> exp - exp .)
    ID              reduce using rule 71 (exp -> exp - exp .)
    CTE_INTEGER     reduce using rule 71 (exp -> exp - exp .)
    CTE_FLOAT       reduce using rule 71 (exp -> exp - exp .)
    TRUE            reduce using rule 71 (exp -> exp - exp .)
    FALSE           reduce using rule 71 (exp -> exp - exp .)
    )               reduce using rule 71 (exp -> exp - exp .)
    ,               reduce using rule 71 (exp -> exp - exp .)
    RED             reduce using rule 71 (exp -> exp - exp .)
    YELLOW          reduce using rule 71 (exp -> exp - exp .)
    BLUE            reduce using rule 71 (exp -> exp - exp .)
    GREEN           reduce using rule 71 (exp -> exp - exp .)
    BLACK           reduce using rule 71 (exp -> exp - exp .)
    ORANGE          reduce using rule 71 (exp -> exp - exp .)
    PURPLE          reduce using rule 71 (exp -> exp - exp .)
    CYAN            reduce using rule 71 (exp -> exp - exp .)
    ]               reduce using rule 71 (exp -> exp - exp .)
    *               shift and go to state 60
    /               shift and go to state 62

  ! *               [ reduce using rule 71 (exp -> exp - exp .) ]
  ! /               [ reduce using rule 71 (exp -> exp - exp .) ]
  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 61 ]


state 92

    (73) exp -> exp / exp .
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp

    =               reduce using rule 73 (exp -> exp / exp .)
    <               reduce using rule 73 (exp -> exp / exp .)
    >               reduce using rule 73 (exp -> exp / exp .)
    AND             reduce using rule 73 (exp -> exp / exp .)
    OR              reduce using rule 73 (exp -> exp / exp .)
    +               reduce using rule 73 (exp -> exp / exp .)
    -               reduce using rule 73 (exp -> exp / exp .)
    *               reduce using rule 73 (exp -> exp / exp .)
    /               reduce using rule 73 (exp -> exp / exp .)
    ;               reduce using rule 73 (exp -> exp / exp .)
    (               reduce using rule 73 (exp -> exp / exp .)
    ID              reduce using rule 73 (exp -> exp / exp .)
    CTE_INTEGER     reduce using rule 73 (exp -> exp / exp .)
    CTE_FLOAT       reduce using rule 73 (exp -> exp / exp .)
    TRUE            reduce using rule 73 (exp -> exp / exp .)
    FALSE           reduce using rule 73 (exp -> exp / exp .)
    )               reduce using rule 73 (exp -> exp / exp .)
    ,               reduce using rule 73 (exp -> exp / exp .)
    RED             reduce using rule 73 (exp -> exp / exp .)
    YELLOW          reduce using rule 73 (exp -> exp / exp .)
    BLUE            reduce using rule 73 (exp -> exp / exp .)
    GREEN           reduce using rule 73 (exp -> exp / exp .)
    BLACK           reduce using rule 73 (exp -> exp / exp .)
    ORANGE          reduce using rule 73 (exp -> exp / exp .)
    PURPLE          reduce using rule 73 (exp -> exp / exp .)
    CYAN            reduce using rule 73 (exp -> exp / exp .)
    ]               reduce using rule 73 (exp -> exp / exp .)

  ! +               [ shift and go to state 59 ]
  ! -               [ shift and go to state 61 ]
  ! *               [ shift and go to state 60 ]
  ! /               [ shift and go to state 62 ]


state 93

    (87) color -> BLUE .

    ;               reduce using rule 87 (color -> BLUE .)


state 94

    (53) command -> figure exp exp color . ;

    ;               shift and go to state 129


state 95

    (91) color -> PURPLE .

    ;               reduce using rule 91 (color -> PURPLE .)


state 96

    (88) color -> GREEN .

    ;               reduce using rule 88 (color -> GREEN .)


state 97

    (86) color -> YELLOW .

    ;               reduce using rule 86 (color -> YELLOW .)


state 98

    (92) color -> CYAN .

    ;               reduce using rule 92 (color -> CYAN .)


state 99

    (90) color -> ORANGE .

    ;               reduce using rule 90 (color -> ORANGE .)


state 100

    (89) color -> BLACK .

    ;               reduce using rule 89 (color -> BLACK .)


state 101

    (85) color -> RED .

    ;               reduce using rule 85 (color -> RED .)


state 102

    (57) repeat -> REPLAY CTE_INTEGER [ repeatA . ] ;

    ]               shift and go to state 130


state 103

    (58) repeatA -> command . repeatB
    (59) repeatB -> . repeatA
    (60) repeatB -> . empty
    (58) repeatA -> . command repeatB
    (101) empty -> .
    (53) command -> . figure exp exp color ;
    (54) command -> . SAMPLE commandA
    (77) figure -> . OVAL
    (78) figure -> . TRIO
    (79) figure -> . QUAD
    (80) figure -> . ARC

    ]               reduce using rule 101 (empty -> .)
    SAMPLE          shift and go to state 17
    OVAL            shift and go to state 5
    TRIO            shift and go to state 12
    QUAD            shift and go to state 20
    ARC             shift and go to state 27

    figure                         shift and go to state 3
    repeatA                        shift and go to state 131
    repeatB                        shift and go to state 132
    command                        shift and go to state 103
    empty                          shift and go to state 133

state 104

    (49) pipelineA -> COUNT ; .

    MOD             reduce using rule 49 (pipelineA -> COUNT ; .)
    ID              reduce using rule 49 (pipelineA -> COUNT ; .)
    IF              reduce using rule 49 (pipelineA -> COUNT ; .)
    ECHO            reduce using rule 49 (pipelineA -> COUNT ; .)
    REPLAY          reduce using rule 49 (pipelineA -> COUNT ; .)
    SAMPLE          reduce using rule 49 (pipelineA -> COUNT ; .)
    #               reduce using rule 49 (pipelineA -> COUNT ; .)
    PIPE            reduce using rule 49 (pipelineA -> COUNT ; .)
    WHERE           reduce using rule 49 (pipelineA -> COUNT ; .)
    CLEAR           reduce using rule 49 (pipelineA -> COUNT ; .)
    OVAL            reduce using rule 49 (pipelineA -> COUNT ; .)
    TRIO            reduce using rule 49 (pipelineA -> COUNT ; .)
    QUAD            reduce using rule 49 (pipelineA -> COUNT ; .)
    ARC             reduce using rule 49 (pipelineA -> COUNT ; .)
    END             reduce using rule 49 (pipelineA -> COUNT ; .)
    }               reduce using rule 49 (pipelineA -> COUNT ; .)


state 105

    (47) pipelineA -> IN ( . var_cte ) ;
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 134

state 106

    (46) pipelineA -> [ pipelineB . ] ;

    ]               shift and go to state 135


state 107

    (50) pipelineB -> exp . pipelineC
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp
    (51) pipelineC -> . , pipelineB
    (52) pipelineC -> . empty
    (101) empty -> .

    +               shift and go to state 59
    -               shift and go to state 61
    *               shift and go to state 60
    /               shift and go to state 62
    ,               shift and go to state 136
    ]               reduce using rule 101 (empty -> .)

    empty                          shift and go to state 138
    pipelineC                      shift and go to state 137

state 108

    (48) pipelineA -> OUT ( . ) ;

    )               shift and go to state 139


state 109

    (28) callingA -> ) . ;

    ;               shift and go to state 140


state 110

    (26) calling -> # ID ( callingA .

    ID              reduce using rule 26 (calling -> # ID ( callingA .)
    IF              reduce using rule 26 (calling -> # ID ( callingA .)
    ECHO            reduce using rule 26 (calling -> # ID ( callingA .)
    REPLAY          reduce using rule 26 (calling -> # ID ( callingA .)
    SAMPLE          reduce using rule 26 (calling -> # ID ( callingA .)
    #               reduce using rule 26 (calling -> # ID ( callingA .)
    PIPE            reduce using rule 26 (calling -> # ID ( callingA .)
    WHERE           reduce using rule 26 (calling -> # ID ( callingA .)
    CLEAR           reduce using rule 26 (calling -> # ID ( callingA .)
    OVAL            reduce using rule 26 (calling -> # ID ( callingA .)
    TRIO            reduce using rule 26 (calling -> # ID ( callingA .)
    QUAD            reduce using rule 26 (calling -> # ID ( callingA .)
    ARC             reduce using rule 26 (calling -> # ID ( callingA .)
    }               reduce using rule 26 (calling -> # ID ( callingA .)
    MOD             reduce using rule 26 (calling -> # ID ( callingA .)
    END             reduce using rule 26 (calling -> # ID ( callingA .)


state 111

    (27) callingA -> callingB . ) ;

    )               shift and go to state 141


state 112

    (29) callingB -> expression . callingC
    (30) callingC -> . , callingB
    (31) callingC -> . empty
    (101) empty -> .

    ,               shift and go to state 143
    )               reduce using rule 101 (empty -> .)

    callingC                       shift and go to state 142
    empty                          shift and go to state 144

state 113

    (67) expression -> exp AND exp .
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp

    ,               reduce using rule 67 (expression -> exp AND exp .)
    )               reduce using rule 67 (expression -> exp AND exp .)
    ;               reduce using rule 67 (expression -> exp AND exp .)
    +               shift and go to state 59
    -               shift and go to state 61
    *               shift and go to state 60
    /               shift and go to state 62


state 114

    (66) expression -> exp < exp .
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp

    ,               reduce using rule 66 (expression -> exp < exp .)
    )               reduce using rule 66 (expression -> exp < exp .)
    ;               reduce using rule 66 (expression -> exp < exp .)
    +               shift and go to state 59
    -               shift and go to state 61
    *               shift and go to state 60
    /               shift and go to state 62


state 115

    (63) expression -> exp < = . exp
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 145
    factor                         shift and go to state 38

state 116

    (62) expression -> exp < > . exp
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 146
    factor                         shift and go to state 38

state 117

    (61) expression -> exp = = . exp
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 147
    factor                         shift and go to state 38

state 118

    (68) expression -> exp OR exp .
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp

    ,               reduce using rule 68 (expression -> exp OR exp .)
    )               reduce using rule 68 (expression -> exp OR exp .)
    ;               reduce using rule 68 (expression -> exp OR exp .)
    +               shift and go to state 59
    -               shift and go to state 61
    *               shift and go to state 60
    /               shift and go to state 62


state 119

    (65) expression -> exp > exp .
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp

    ,               reduce using rule 65 (expression -> exp > exp .)
    )               reduce using rule 65 (expression -> exp > exp .)
    ;               reduce using rule 65 (expression -> exp > exp .)
    +               shift and go to state 59
    -               shift and go to state 61
    *               shift and go to state 60
    /               shift and go to state 62


state 120

    (64) expression -> exp > = . exp
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    exp                            shift and go to state 148
    factor                         shift and go to state 38

state 121

    (56) commandA -> OFF move exp . ;
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp

    ;               shift and go to state 149
    +               shift and go to state 59
    -               shift and go to state 61
    *               shift and go to state 60
    /               shift and go to state 62


state 122

    (55) commandA -> ON move exp . CTE_INTEGER color ;
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp

    CTE_INTEGER     shift and go to state 150
    +               shift and go to state 59
    -               shift and go to state 61
    *               shift and go to state 60
    /               shift and go to state 62


state 123

    (38) assign -> ID = expression ; .

    ID              reduce using rule 38 (assign -> ID = expression ; .)
    IF              reduce using rule 38 (assign -> ID = expression ; .)
    ECHO            reduce using rule 38 (assign -> ID = expression ; .)
    REPLAY          reduce using rule 38 (assign -> ID = expression ; .)
    SAMPLE          reduce using rule 38 (assign -> ID = expression ; .)
    #               reduce using rule 38 (assign -> ID = expression ; .)
    PIPE            reduce using rule 38 (assign -> ID = expression ; .)
    WHERE           reduce using rule 38 (assign -> ID = expression ; .)
    CLEAR           reduce using rule 38 (assign -> ID = expression ; .)
    OVAL            reduce using rule 38 (assign -> ID = expression ; .)
    TRIO            reduce using rule 38 (assign -> ID = expression ; .)
    QUAD            reduce using rule 38 (assign -> ID = expression ; .)
    ARC             reduce using rule 38 (assign -> ID = expression ; .)
    }               reduce using rule 38 (assign -> ID = expression ; .)
    MOD             reduce using rule 38 (assign -> ID = expression ; .)
    END             reduce using rule 38 (assign -> ID = expression ; .)


state 124

    (39) condition -> IF ( expression ) . gotoFalse block conditionA
    (100) gotoFalse -> .

    {               reduce using rule 100 (gotoFalse -> .)

    gotoFalse                      shift and go to state 151

state 125

    (18) moduleA -> ( . vars ) block
    (20) vars -> . type ID varsA
    (23) type -> . INT
    (24) type -> . FLOAT
    (25) type -> . BOOL

    INT             shift and go to state 154
    FLOAT           shift and go to state 153
    BOOL            shift and go to state 155

    type                           shift and go to state 156
    vars                           shift and go to state 152

state 126

    (19) moduleA -> block .

    MOD             reduce using rule 19 (moduleA -> block .)
    ID              reduce using rule 19 (moduleA -> block .)
    IF              reduce using rule 19 (moduleA -> block .)
    ECHO            reduce using rule 19 (moduleA -> block .)
    REPLAY          reduce using rule 19 (moduleA -> block .)
    SAMPLE          reduce using rule 19 (moduleA -> block .)
    #               reduce using rule 19 (moduleA -> block .)
    PIPE            reduce using rule 19 (moduleA -> block .)
    WHERE           reduce using rule 19 (moduleA -> block .)
    CLEAR           reduce using rule 19 (moduleA -> block .)
    OVAL            reduce using rule 19 (moduleA -> block .)
    TRIO            reduce using rule 19 (moduleA -> block .)
    QUAD            reduce using rule 19 (moduleA -> block .)
    ARC             reduce using rule 19 (moduleA -> block .)
    END             reduce using rule 19 (moduleA -> block .)


state 127

    (32) block -> { . blockA
    (33) blockA -> . blockB }
    (34) blockA -> . }
    (35) blockB -> . statute blockC
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . repeat
    (13) statute -> . command
    (14) statute -> . calling
    (15) statute -> . pipeline
    (16) statute -> . screen
    (38) assign -> . ID = expression ;
    (39) condition -> . IF ( expression ) gotoFalse block conditionA
    (42) write -> . ECHO writeA ;
    (57) repeat -> . REPLAY CTE_INTEGER [ repeatA ] ;
    (53) command -> . figure exp exp color ;
    (54) command -> . SAMPLE commandA
    (26) calling -> . # ID ( callingA
    (45) pipeline -> . PIPE ID pipelineA
    (93) screen -> . WHERE
    (94) screen -> . CLEAR
    (77) figure -> . OVAL
    (78) figure -> . TRIO
    (79) figure -> . QUAD
    (80) figure -> . ARC

    }               shift and go to state 158
    ID              shift and go to state 21
    IF              shift and go to state 22
    ECHO            shift and go to state 16
    REPLAY          shift and go to state 6
    SAMPLE          shift and go to state 17
    #               shift and go to state 8
    PIPE            shift and go to state 7
    WHERE           shift and go to state 26
    CLEAR           shift and go to state 11
    OVAL            shift and go to state 5
    TRIO            shift and go to state 12
    QUAD            shift and go to state 20
    ARC             shift and go to state 27

    figure                         shift and go to state 3
    write                          shift and go to state 9
    command                        shift and go to state 28
    repeat                         shift and go to state 13
    blockA                         shift and go to state 160
    screen                         shift and go to state 15
    condition                      shift and go to state 10
    statute                        shift and go to state 157
    pipeline                       shift and go to state 24
    calling                        shift and go to state 25
    blockB                         shift and go to state 159
    assign                         shift and go to state 30

state 128

    (17) module -> MOD # ID moduleA .

    MOD             reduce using rule 17 (module -> MOD # ID moduleA .)
    ID              reduce using rule 17 (module -> MOD # ID moduleA .)
    IF              reduce using rule 17 (module -> MOD # ID moduleA .)
    ECHO            reduce using rule 17 (module -> MOD # ID moduleA .)
    REPLAY          reduce using rule 17 (module -> MOD # ID moduleA .)
    SAMPLE          reduce using rule 17 (module -> MOD # ID moduleA .)
    #               reduce using rule 17 (module -> MOD # ID moduleA .)
    PIPE            reduce using rule 17 (module -> MOD # ID moduleA .)
    WHERE           reduce using rule 17 (module -> MOD # ID moduleA .)
    CLEAR           reduce using rule 17 (module -> MOD # ID moduleA .)
    OVAL            reduce using rule 17 (module -> MOD # ID moduleA .)
    TRIO            reduce using rule 17 (module -> MOD # ID moduleA .)
    QUAD            reduce using rule 17 (module -> MOD # ID moduleA .)
    ARC             reduce using rule 17 (module -> MOD # ID moduleA .)
    END             reduce using rule 17 (module -> MOD # ID moduleA .)


state 129

    (53) command -> figure exp exp color ; .

    SAMPLE          reduce using rule 53 (command -> figure exp exp color ; .)
    OVAL            reduce using rule 53 (command -> figure exp exp color ; .)
    TRIO            reduce using rule 53 (command -> figure exp exp color ; .)
    QUAD            reduce using rule 53 (command -> figure exp exp color ; .)
    ARC             reduce using rule 53 (command -> figure exp exp color ; .)
    ]               reduce using rule 53 (command -> figure exp exp color ; .)
    MOD             reduce using rule 53 (command -> figure exp exp color ; .)
    ID              reduce using rule 53 (command -> figure exp exp color ; .)
    IF              reduce using rule 53 (command -> figure exp exp color ; .)
    ECHO            reduce using rule 53 (command -> figure exp exp color ; .)
    REPLAY          reduce using rule 53 (command -> figure exp exp color ; .)
    #               reduce using rule 53 (command -> figure exp exp color ; .)
    PIPE            reduce using rule 53 (command -> figure exp exp color ; .)
    WHERE           reduce using rule 53 (command -> figure exp exp color ; .)
    CLEAR           reduce using rule 53 (command -> figure exp exp color ; .)
    END             reduce using rule 53 (command -> figure exp exp color ; .)
    }               reduce using rule 53 (command -> figure exp exp color ; .)


state 130

    (57) repeat -> REPLAY CTE_INTEGER [ repeatA ] . ;

    ;               shift and go to state 161


state 131

    (59) repeatB -> repeatA .

    ]               reduce using rule 59 (repeatB -> repeatA .)


state 132

    (58) repeatA -> command repeatB .

    ]               reduce using rule 58 (repeatA -> command repeatB .)


state 133

    (60) repeatB -> empty .

    ]               reduce using rule 60 (repeatB -> empty .)


state 134

    (47) pipelineA -> IN ( var_cte . ) ;

    )               shift and go to state 162


state 135

    (46) pipelineA -> [ pipelineB ] . ;

    ;               shift and go to state 163


state 136

    (51) pipelineC -> , . pipelineB
    (50) pipelineB -> . exp pipelineC
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    pipelineB                      shift and go to state 164
    exp                            shift and go to state 107
    factor                         shift and go to state 38

state 137

    (50) pipelineB -> exp pipelineC .

    ]               reduce using rule 50 (pipelineB -> exp pipelineC .)


state 138

    (52) pipelineC -> empty .

    ]               reduce using rule 52 (pipelineC -> empty .)


state 139

    (48) pipelineA -> OUT ( ) . ;

    ;               shift and go to state 165


state 140

    (28) callingA -> ) ; .

    MOD             reduce using rule 28 (callingA -> ) ; .)
    ID              reduce using rule 28 (callingA -> ) ; .)
    IF              reduce using rule 28 (callingA -> ) ; .)
    ECHO            reduce using rule 28 (callingA -> ) ; .)
    REPLAY          reduce using rule 28 (callingA -> ) ; .)
    SAMPLE          reduce using rule 28 (callingA -> ) ; .)
    #               reduce using rule 28 (callingA -> ) ; .)
    PIPE            reduce using rule 28 (callingA -> ) ; .)
    WHERE           reduce using rule 28 (callingA -> ) ; .)
    CLEAR           reduce using rule 28 (callingA -> ) ; .)
    OVAL            reduce using rule 28 (callingA -> ) ; .)
    TRIO            reduce using rule 28 (callingA -> ) ; .)
    QUAD            reduce using rule 28 (callingA -> ) ; .)
    ARC             reduce using rule 28 (callingA -> ) ; .)
    END             reduce using rule 28 (callingA -> ) ; .)
    }               reduce using rule 28 (callingA -> ) ; .)


state 141

    (27) callingA -> callingB ) . ;

    ;               shift and go to state 166


state 142

    (29) callingB -> expression callingC .

    )               reduce using rule 29 (callingB -> expression callingC .)


state 143

    (30) callingC -> , . callingB
    (29) callingB -> . expression callingC
    (61) expression -> . exp = = exp
    (62) expression -> . exp < > exp
    (63) expression -> . exp < = exp
    (64) expression -> . exp > = exp
    (65) expression -> . exp > exp
    (66) expression -> . exp < exp
    (67) expression -> . exp AND exp
    (68) expression -> . exp OR exp
    (69) expression -> . exp empty
    (70) exp -> . exp + exp
    (71) exp -> . exp - exp
    (72) exp -> . exp * exp
    (73) exp -> . exp / exp
    (74) exp -> . factor empty
    (75) factor -> . ( expression )
    (76) factor -> . var_cte
    (95) var_cte -> . ID
    (96) var_cte -> . CTE_INTEGER
    (97) var_cte -> . CTE_FLOAT
    (98) var_cte -> . TRUE
    (99) var_cte -> . FALSE

    (               shift and go to state 33
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 35
    CTE_FLOAT       shift and go to state 32
    TRUE            shift and go to state 36
    FALSE           shift and go to state 39

    var_cte                        shift and go to state 34
    callingB                       shift and go to state 167
    exp                            shift and go to state 46
    factor                         shift and go to state 38
    expression                     shift and go to state 112

state 144

    (31) callingC -> empty .

    )               reduce using rule 31 (callingC -> empty .)


state 145

    (63) expression -> exp < = exp .
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp

    ,               reduce using rule 63 (expression -> exp < = exp .)
    )               reduce using rule 63 (expression -> exp < = exp .)
    ;               reduce using rule 63 (expression -> exp < = exp .)
    +               shift and go to state 59
    -               shift and go to state 61
    *               shift and go to state 60
    /               shift and go to state 62


state 146

    (62) expression -> exp < > exp .
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp

    ,               reduce using rule 62 (expression -> exp < > exp .)
    )               reduce using rule 62 (expression -> exp < > exp .)
    ;               reduce using rule 62 (expression -> exp < > exp .)
    +               shift and go to state 59
    -               shift and go to state 61
    *               shift and go to state 60
    /               shift and go to state 62


state 147

    (61) expression -> exp = = exp .
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp

    ,               reduce using rule 61 (expression -> exp = = exp .)
    )               reduce using rule 61 (expression -> exp = = exp .)
    ;               reduce using rule 61 (expression -> exp = = exp .)
    +               shift and go to state 59
    -               shift and go to state 61
    *               shift and go to state 60
    /               shift and go to state 62


state 148

    (64) expression -> exp > = exp .
    (70) exp -> exp . + exp
    (71) exp -> exp . - exp
    (72) exp -> exp . * exp
    (73) exp -> exp . / exp

    ,               reduce using rule 64 (expression -> exp > = exp .)
    )               reduce using rule 64 (expression -> exp > = exp .)
    ;               reduce using rule 64 (expression -> exp > = exp .)
    +               shift and go to state 59
    -               shift and go to state 61
    *               shift and go to state 60
    /               shift and go to state 62


state 149

    (56) commandA -> OFF move exp ; .

    MOD             reduce using rule 56 (commandA -> OFF move exp ; .)
    ID              reduce using rule 56 (commandA -> OFF move exp ; .)
    IF              reduce using rule 56 (commandA -> OFF move exp ; .)
    ECHO            reduce using rule 56 (commandA -> OFF move exp ; .)
    REPLAY          reduce using rule 56 (commandA -> OFF move exp ; .)
    SAMPLE          reduce using rule 56 (commandA -> OFF move exp ; .)
    #               reduce using rule 56 (commandA -> OFF move exp ; .)
    PIPE            reduce using rule 56 (commandA -> OFF move exp ; .)
    WHERE           reduce using rule 56 (commandA -> OFF move exp ; .)
    CLEAR           reduce using rule 56 (commandA -> OFF move exp ; .)
    OVAL            reduce using rule 56 (commandA -> OFF move exp ; .)
    TRIO            reduce using rule 56 (commandA -> OFF move exp ; .)
    QUAD            reduce using rule 56 (commandA -> OFF move exp ; .)
    ARC             reduce using rule 56 (commandA -> OFF move exp ; .)
    END             reduce using rule 56 (commandA -> OFF move exp ; .)
    ]               reduce using rule 56 (commandA -> OFF move exp ; .)
    }               reduce using rule 56 (commandA -> OFF move exp ; .)


state 150

    (55) commandA -> ON move exp CTE_INTEGER . color ;
    (85) color -> . RED
    (86) color -> . YELLOW
    (87) color -> . BLUE
    (88) color -> . GREEN
    (89) color -> . BLACK
    (90) color -> . ORANGE
    (91) color -> . PURPLE
    (92) color -> . CYAN

    RED             shift and go to state 101
    YELLOW          shift and go to state 97
    BLUE            shift and go to state 93
    GREEN           shift and go to state 96
    BLACK           shift and go to state 100
    ORANGE          shift and go to state 99
    PURPLE          shift and go to state 95
    CYAN            shift and go to state 98

    color                          shift and go to state 168

state 151

    (39) condition -> IF ( expression ) gotoFalse . block conditionA
    (32) block -> . { blockA

    {               shift and go to state 127

    block                          shift and go to state 169

state 152

    (18) moduleA -> ( vars . ) block

    )               shift and go to state 170


state 153

    (24) type -> FLOAT .

    ID              reduce using rule 24 (type -> FLOAT .)


state 154

    (23) type -> INT .

    ID              reduce using rule 23 (type -> INT .)


state 155

    (25) type -> BOOL .

    ID              reduce using rule 25 (type -> BOOL .)


state 156

    (20) vars -> type . ID varsA

    ID              shift and go to state 171


state 157

    (35) blockB -> statute . blockC
    (36) blockC -> . blockB
    (37) blockC -> . empty
    (35) blockB -> . statute blockC
    (101) empty -> .
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . repeat
    (13) statute -> . command
    (14) statute -> . calling
    (15) statute -> . pipeline
    (16) statute -> . screen
    (38) assign -> . ID = expression ;
    (39) condition -> . IF ( expression ) gotoFalse block conditionA
    (42) write -> . ECHO writeA ;
    (57) repeat -> . REPLAY CTE_INTEGER [ repeatA ] ;
    (53) command -> . figure exp exp color ;
    (54) command -> . SAMPLE commandA
    (26) calling -> . # ID ( callingA
    (45) pipeline -> . PIPE ID pipelineA
    (93) screen -> . WHERE
    (94) screen -> . CLEAR
    (77) figure -> . OVAL
    (78) figure -> . TRIO
    (79) figure -> . QUAD
    (80) figure -> . ARC

    }               reduce using rule 101 (empty -> .)
    ID              shift and go to state 21
    IF              shift and go to state 22
    ECHO            shift and go to state 16
    REPLAY          shift and go to state 6
    SAMPLE          shift and go to state 17
    #               shift and go to state 8
    PIPE            shift and go to state 7
    WHERE           shift and go to state 26
    CLEAR           shift and go to state 11
    OVAL            shift and go to state 5
    TRIO            shift and go to state 12
    QUAD            shift and go to state 20
    ARC             shift and go to state 27

    figure                         shift and go to state 3
    write                          shift and go to state 9
    command                        shift and go to state 28
    empty                          shift and go to state 172
    repeat                         shift and go to state 13
    screen                         shift and go to state 15
    condition                      shift and go to state 10
    statute                        shift and go to state 157
    pipeline                       shift and go to state 24
    calling                        shift and go to state 25
    blockC                         shift and go to state 173
    blockB                         shift and go to state 174
    assign                         shift and go to state 30

state 158

    (34) blockA -> } .

    MOD             reduce using rule 34 (blockA -> } .)
    ID              reduce using rule 34 (blockA -> } .)
    IF              reduce using rule 34 (blockA -> } .)
    ECHO            reduce using rule 34 (blockA -> } .)
    REPLAY          reduce using rule 34 (blockA -> } .)
    SAMPLE          reduce using rule 34 (blockA -> } .)
    #               reduce using rule 34 (blockA -> } .)
    PIPE            reduce using rule 34 (blockA -> } .)
    WHERE           reduce using rule 34 (blockA -> } .)
    CLEAR           reduce using rule 34 (blockA -> } .)
    OVAL            reduce using rule 34 (blockA -> } .)
    TRIO            reduce using rule 34 (blockA -> } .)
    QUAD            reduce using rule 34 (blockA -> } .)
    ARC             reduce using rule 34 (blockA -> } .)
    END             reduce using rule 34 (blockA -> } .)
    ELSE            reduce using rule 34 (blockA -> } .)
    }               reduce using rule 34 (blockA -> } .)


state 159

    (33) blockA -> blockB . }

    }               shift and go to state 175


state 160

    (32) block -> { blockA .

    MOD             reduce using rule 32 (block -> { blockA .)
    ID              reduce using rule 32 (block -> { blockA .)
    IF              reduce using rule 32 (block -> { blockA .)
    ECHO            reduce using rule 32 (block -> { blockA .)
    REPLAY          reduce using rule 32 (block -> { blockA .)
    SAMPLE          reduce using rule 32 (block -> { blockA .)
    #               reduce using rule 32 (block -> { blockA .)
    PIPE            reduce using rule 32 (block -> { blockA .)
    WHERE           reduce using rule 32 (block -> { blockA .)
    CLEAR           reduce using rule 32 (block -> { blockA .)
    OVAL            reduce using rule 32 (block -> { blockA .)
    TRIO            reduce using rule 32 (block -> { blockA .)
    QUAD            reduce using rule 32 (block -> { blockA .)
    ARC             reduce using rule 32 (block -> { blockA .)
    END             reduce using rule 32 (block -> { blockA .)
    }               reduce using rule 32 (block -> { blockA .)
    ELSE            reduce using rule 32 (block -> { blockA .)


state 161

    (57) repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .

    ID              reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    IF              reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    ECHO            reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    REPLAY          reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    SAMPLE          reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    #               reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    PIPE            reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    WHERE           reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    CLEAR           reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    OVAL            reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    TRIO            reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    QUAD            reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    ARC             reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    }               reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    MOD             reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    END             reduce using rule 57 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)


state 162

    (47) pipelineA -> IN ( var_cte ) . ;

    ;               shift and go to state 176


state 163

    (46) pipelineA -> [ pipelineB ] ; .

    MOD             reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    ID              reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    IF              reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    ECHO            reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    REPLAY          reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    SAMPLE          reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    #               reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    PIPE            reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    WHERE           reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    CLEAR           reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    OVAL            reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    TRIO            reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    QUAD            reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    ARC             reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    END             reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)
    }               reduce using rule 46 (pipelineA -> [ pipelineB ] ; .)


state 164

    (51) pipelineC -> , pipelineB .

    ]               reduce using rule 51 (pipelineC -> , pipelineB .)


state 165

    (48) pipelineA -> OUT ( ) ; .

    MOD             reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    ID              reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    IF              reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    ECHO            reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    REPLAY          reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    SAMPLE          reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    #               reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    PIPE            reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    WHERE           reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    CLEAR           reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    OVAL            reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    TRIO            reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    QUAD            reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    ARC             reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    END             reduce using rule 48 (pipelineA -> OUT ( ) ; .)
    }               reduce using rule 48 (pipelineA -> OUT ( ) ; .)


state 166

    (27) callingA -> callingB ) ; .

    MOD             reduce using rule 27 (callingA -> callingB ) ; .)
    ID              reduce using rule 27 (callingA -> callingB ) ; .)
    IF              reduce using rule 27 (callingA -> callingB ) ; .)
    ECHO            reduce using rule 27 (callingA -> callingB ) ; .)
    REPLAY          reduce using rule 27 (callingA -> callingB ) ; .)
    SAMPLE          reduce using rule 27 (callingA -> callingB ) ; .)
    #               reduce using rule 27 (callingA -> callingB ) ; .)
    PIPE            reduce using rule 27 (callingA -> callingB ) ; .)
    WHERE           reduce using rule 27 (callingA -> callingB ) ; .)
    CLEAR           reduce using rule 27 (callingA -> callingB ) ; .)
    OVAL            reduce using rule 27 (callingA -> callingB ) ; .)
    TRIO            reduce using rule 27 (callingA -> callingB ) ; .)
    QUAD            reduce using rule 27 (callingA -> callingB ) ; .)
    ARC             reduce using rule 27 (callingA -> callingB ) ; .)
    END             reduce using rule 27 (callingA -> callingB ) ; .)
    }               reduce using rule 27 (callingA -> callingB ) ; .)


state 167

    (30) callingC -> , callingB .

    )               reduce using rule 30 (callingC -> , callingB .)


state 168

    (55) commandA -> ON move exp CTE_INTEGER color . ;

    ;               shift and go to state 177


state 169

    (39) condition -> IF ( expression ) gotoFalse block . conditionA
    (40) conditionA -> . ELSE block
    (41) conditionA -> . empty
    (101) empty -> .

    ELSE            shift and go to state 180
    MOD             reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)
    IF              reduce using rule 101 (empty -> .)
    ECHO            reduce using rule 101 (empty -> .)
    REPLAY          reduce using rule 101 (empty -> .)
    SAMPLE          reduce using rule 101 (empty -> .)
    #               reduce using rule 101 (empty -> .)
    PIPE            reduce using rule 101 (empty -> .)
    WHERE           reduce using rule 101 (empty -> .)
    CLEAR           reduce using rule 101 (empty -> .)
    OVAL            reduce using rule 101 (empty -> .)
    TRIO            reduce using rule 101 (empty -> .)
    QUAD            reduce using rule 101 (empty -> .)
    ARC             reduce using rule 101 (empty -> .)
    END             reduce using rule 101 (empty -> .)
    }               reduce using rule 101 (empty -> .)

    empty                          shift and go to state 179
    conditionA                     shift and go to state 178

state 170

    (18) moduleA -> ( vars ) . block
    (32) block -> . { blockA

    {               shift and go to state 127

    block                          shift and go to state 181

state 171

    (20) vars -> type ID . varsA
    (21) varsA -> . , vars
    (22) varsA -> . empty
    (101) empty -> .

    ,               shift and go to state 183
    )               reduce using rule 101 (empty -> .)

    varsA                          shift and go to state 182
    empty                          shift and go to state 184

state 172

    (37) blockC -> empty .

    }               reduce using rule 37 (blockC -> empty .)


state 173

    (35) blockB -> statute blockC .

    }               reduce using rule 35 (blockB -> statute blockC .)


state 174

    (36) blockC -> blockB .

    }               reduce using rule 36 (blockC -> blockB .)


state 175

    (33) blockA -> blockB } .

    MOD             reduce using rule 33 (blockA -> blockB } .)
    ID              reduce using rule 33 (blockA -> blockB } .)
    IF              reduce using rule 33 (blockA -> blockB } .)
    ECHO            reduce using rule 33 (blockA -> blockB } .)
    REPLAY          reduce using rule 33 (blockA -> blockB } .)
    SAMPLE          reduce using rule 33 (blockA -> blockB } .)
    #               reduce using rule 33 (blockA -> blockB } .)
    PIPE            reduce using rule 33 (blockA -> blockB } .)
    WHERE           reduce using rule 33 (blockA -> blockB } .)
    CLEAR           reduce using rule 33 (blockA -> blockB } .)
    OVAL            reduce using rule 33 (blockA -> blockB } .)
    TRIO            reduce using rule 33 (blockA -> blockB } .)
    QUAD            reduce using rule 33 (blockA -> blockB } .)
    ARC             reduce using rule 33 (blockA -> blockB } .)
    END             reduce using rule 33 (blockA -> blockB } .)
    ELSE            reduce using rule 33 (blockA -> blockB } .)
    }               reduce using rule 33 (blockA -> blockB } .)


state 176

    (47) pipelineA -> IN ( var_cte ) ; .

    MOD             reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    ID              reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    IF              reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    ECHO            reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    REPLAY          reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    SAMPLE          reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    #               reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    PIPE            reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    WHERE           reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    CLEAR           reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    OVAL            reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    TRIO            reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    QUAD            reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    ARC             reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    END             reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)
    }               reduce using rule 47 (pipelineA -> IN ( var_cte ) ; .)


state 177

    (55) commandA -> ON move exp CTE_INTEGER color ; .

    MOD             reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    ID              reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    IF              reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    ECHO            reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    REPLAY          reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    SAMPLE          reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    #               reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    PIPE            reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    WHERE           reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    CLEAR           reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    OVAL            reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    TRIO            reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    QUAD            reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    ARC             reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    END             reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    ]               reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)
    }               reduce using rule 55 (commandA -> ON move exp CTE_INTEGER color ; .)


state 178

    (39) condition -> IF ( expression ) gotoFalse block conditionA .

    MOD             reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    ID              reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    IF              reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    ECHO            reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    REPLAY          reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    SAMPLE          reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    #               reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    PIPE            reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    WHERE           reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    CLEAR           reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    OVAL            reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    TRIO            reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    QUAD            reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    ARC             reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    END             reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)
    }               reduce using rule 39 (condition -> IF ( expression ) gotoFalse block conditionA .)


state 179

    (41) conditionA -> empty .

    MOD             reduce using rule 41 (conditionA -> empty .)
    ID              reduce using rule 41 (conditionA -> empty .)
    IF              reduce using rule 41 (conditionA -> empty .)
    ECHO            reduce using rule 41 (conditionA -> empty .)
    REPLAY          reduce using rule 41 (conditionA -> empty .)
    SAMPLE          reduce using rule 41 (conditionA -> empty .)
    #               reduce using rule 41 (conditionA -> empty .)
    PIPE            reduce using rule 41 (conditionA -> empty .)
    WHERE           reduce using rule 41 (conditionA -> empty .)
    CLEAR           reduce using rule 41 (conditionA -> empty .)
    OVAL            reduce using rule 41 (conditionA -> empty .)
    TRIO            reduce using rule 41 (conditionA -> empty .)
    QUAD            reduce using rule 41 (conditionA -> empty .)
    ARC             reduce using rule 41 (conditionA -> empty .)
    END             reduce using rule 41 (conditionA -> empty .)
    }               reduce using rule 41 (conditionA -> empty .)


state 180

    (40) conditionA -> ELSE . block
    (32) block -> . { blockA

    {               shift and go to state 127

    block                          shift and go to state 185

state 181

    (18) moduleA -> ( vars ) block .

    MOD             reduce using rule 18 (moduleA -> ( vars ) block .)
    ID              reduce using rule 18 (moduleA -> ( vars ) block .)
    IF              reduce using rule 18 (moduleA -> ( vars ) block .)
    ECHO            reduce using rule 18 (moduleA -> ( vars ) block .)
    REPLAY          reduce using rule 18 (moduleA -> ( vars ) block .)
    SAMPLE          reduce using rule 18 (moduleA -> ( vars ) block .)
    #               reduce using rule 18 (moduleA -> ( vars ) block .)
    PIPE            reduce using rule 18 (moduleA -> ( vars ) block .)
    WHERE           reduce using rule 18 (moduleA -> ( vars ) block .)
    CLEAR           reduce using rule 18 (moduleA -> ( vars ) block .)
    OVAL            reduce using rule 18 (moduleA -> ( vars ) block .)
    TRIO            reduce using rule 18 (moduleA -> ( vars ) block .)
    QUAD            reduce using rule 18 (moduleA -> ( vars ) block .)
    ARC             reduce using rule 18 (moduleA -> ( vars ) block .)
    END             reduce using rule 18 (moduleA -> ( vars ) block .)


state 182

    (20) vars -> type ID varsA .

    )               reduce using rule 20 (vars -> type ID varsA .)


state 183

    (21) varsA -> , . vars
    (20) vars -> . type ID varsA
    (23) type -> . INT
    (24) type -> . FLOAT
    (25) type -> . BOOL

    INT             shift and go to state 154
    FLOAT           shift and go to state 153
    BOOL            shift and go to state 155

    type                           shift and go to state 156
    vars                           shift and go to state 186

state 184

    (22) varsA -> empty .

    )               reduce using rule 22 (varsA -> empty .)


state 185

    (40) conditionA -> ELSE block .

    MOD             reduce using rule 40 (conditionA -> ELSE block .)
    ID              reduce using rule 40 (conditionA -> ELSE block .)
    IF              reduce using rule 40 (conditionA -> ELSE block .)
    ECHO            reduce using rule 40 (conditionA -> ELSE block .)
    REPLAY          reduce using rule 40 (conditionA -> ELSE block .)
    SAMPLE          reduce using rule 40 (conditionA -> ELSE block .)
    #               reduce using rule 40 (conditionA -> ELSE block .)
    PIPE            reduce using rule 40 (conditionA -> ELSE block .)
    WHERE           reduce using rule 40 (conditionA -> ELSE block .)
    CLEAR           reduce using rule 40 (conditionA -> ELSE block .)
    OVAL            reduce using rule 40 (conditionA -> ELSE block .)
    TRIO            reduce using rule 40 (conditionA -> ELSE block .)
    QUAD            reduce using rule 40 (conditionA -> ELSE block .)
    ARC             reduce using rule 40 (conditionA -> ELSE block .)
    END             reduce using rule 40 (conditionA -> ELSE block .)
    }               reduce using rule 40 (conditionA -> ELSE block .)


state 186

    (21) varsA -> , vars .

    )               reduce using rule 21 (varsA -> , vars .)

