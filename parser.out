Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> INIT programA
Rule 2     programA -> programB END
Rule 3     programA -> END
Rule 4     programB -> workspace programC
Rule 5     programC -> programB
Rule 6     programC -> empty
Rule 7     workspace -> statute
Rule 8     workspace -> module
Rule 9     statute -> assign
Rule 10    statute -> condition
Rule 11    statute -> write
Rule 12    statute -> cycle
Rule 13    statute -> repeat
Rule 14    statute -> command
Rule 15    statute -> calling
Rule 16    statute -> pipeline
Rule 17    statute -> screen
Rule 18    module -> MOD # ID moduleA
Rule 19    moduleA -> ( vars ) block
Rule 20    moduleA -> block
Rule 21    vars -> type ID varsA
Rule 22    varsA -> , vars
Rule 23    varsA -> empty
Rule 24    type -> INT
Rule 25    type -> FLOAT
Rule 26    type -> BOOL
Rule 27    calling -> # ID ( callingA
Rule 28    callingA -> callingB ) ;
Rule 29    callingA -> ) ;
Rule 30    callingB -> expression callingC
Rule 31    callingC -> , callingB
Rule 32    callingC -> empty
Rule 33    block -> { blockA
Rule 34    blockA -> blockB }
Rule 35    blockA -> }
Rule 36    blockB -> statute blockC
Rule 37    blockC -> blockB
Rule 38    blockC -> empty
Rule 39    assign -> ID = expression ;
Rule 40    condition -> IF ( expression ) gotoFalse block conditionA continueGo
Rule 41    conditionA -> ELSE gotoE block
Rule 42    conditionA -> empty
Rule 43    write -> ECHO writeA ;
Rule 44    writeA -> expression
Rule 45    writeA -> CTE_STRING
Rule 46    pipeline -> PIPE ID pipelineA
Rule 47    pipelineA -> [ pipelineB ] ;
Rule 48    pipelineA -> IN ( var_cte ) ;
Rule 49    pipelineA -> OUT ( ) ;
Rule 50    pipelineA -> COUNT ;
Rule 51    pipelineB -> exp pipelineC
Rule 52    pipelineC -> , pipelineB
Rule 53    pipelineC -> empty
Rule 54    command -> figure exp exp color ;
Rule 55    command -> SAMPLE commandA
Rule 56    commandA -> ON move exp CTE_INTEGER color ;
Rule 57    commandA -> OFF move exp ;
Rule 58    cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW
Rule 59    repeat -> REPLAY CTE_INTEGER [ repeatA ] ;
Rule 60    repeatA -> command repeatB
Rule 61    repeatB -> repeatA
Rule 62    repeatB -> empty
Rule 63    expression -> exp = = exp
Rule 64    expression -> exp < > exp
Rule 65    expression -> exp < = exp
Rule 66    expression -> exp > = exp
Rule 67    expression -> exp > exp
Rule 68    expression -> exp < exp
Rule 69    expression -> exp AND exp
Rule 70    expression -> exp OR exp
Rule 71    expression -> exp empty
Rule 72    exp -> exp + exp
Rule 73    exp -> exp - exp
Rule 74    exp -> exp * exp
Rule 75    exp -> exp / exp
Rule 76    exp -> factor empty
Rule 77    factor -> ( expression )
Rule 78    factor -> var_cte
Rule 79    figure -> OVAL
Rule 80    figure -> TRIO
Rule 81    figure -> QUAD
Rule 82    figure -> ARC
Rule 83    move -> UP
Rule 84    move -> DOWN
Rule 85    move -> LEFT
Rule 86    move -> RIGHT
Rule 87    color -> RED
Rule 88    color -> YELLOW
Rule 89    color -> BLUE
Rule 90    color -> GREEN
Rule 91    color -> BLACK
Rule 92    color -> ORANGE
Rule 93    color -> PURPLE
Rule 94    color -> CYAN
Rule 95    screen -> WHERE
Rule 96    screen -> CLEAR
Rule 97    var_cte -> ID
Rule 98    var_cte -> CTE_INTEGER
Rule 99    var_cte -> CTE_FLOAT
Rule 100   var_cte -> TRUE
Rule 101   var_cte -> FALSE
Rule 102   gotoFalse -> <empty>
Rule 103   gotoE -> <empty>
Rule 104   gotoW -> <empty>
Rule 105   continueGo -> <empty>
Rule 106   continueGoW -> <empty>
Rule 107   empty -> <empty>

Terminals, with rules where they appear

#                    : 18 27
(                    : 19 27 40 48 49 58 77
)                    : 19 28 29 40 48 49 58 77
*                    : 74
+                    : 72
,                    : 22 31 52
-                    : 73
/                    : 75
;                    : 28 29 39 43 47 48 49 50 54 56 57 59
<                    : 64 65 68
=                    : 39 63 63 65 66
>                    : 64 66 67
AND                  : 69
ARC                  : 82
BLACK                : 91
BLUE                 : 89
BOOL                 : 26
CLEAR                : 96
COUNT                : 50
CTE_FLOAT            : 99
CTE_INTEGER          : 56 59 98
CTE_STRING           : 45
CYAN                 : 94
DOWN                 : 84
ECHO                 : 43
ELSE                 : 41
END                  : 2 3
FALSE                : 101
FLOAT                : 25
GREEN                : 90
ID                   : 18 21 27 39 46 97
IF                   : 40
IN                   : 48
INIT                 : 1
INT                  : 24
LEFT                 : 85
MOD                  : 18
OFF                  : 57
ON                   : 56
OR                   : 70
ORANGE               : 92
OUT                  : 49
OVAL                 : 79
PIPE                 : 46
PURPLE               : 93
QUAD                 : 81
RED                  : 87
REPLAY               : 59
RIGHT                : 86
SAMPLE               : 55
TRIO                 : 80
TRUE                 : 100
UP                   : 83
WHERE                : 95
WHILE                : 58
YELLOW               : 88
[                    : 47 59
]                    : 47 59
error                : 
{                    : 33
}                    : 34 35

Nonterminals, with rules where they appear

assign               : 9
block                : 19 20 40 41 58
blockA               : 33
blockB               : 34 37
blockC               : 36
calling              : 15
callingA             : 27
callingB             : 28 31
callingC             : 30
color                : 54 56
command              : 14 60
commandA             : 55
condition            : 10
conditionA           : 40
continueGo           : 40
continueGoW          : 58
cycle                : 12
empty                : 6 23 32 38 42 53 62 71 76
exp                  : 51 54 54 56 57 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 72 72 73 73 74 74 75 75
expression           : 30 39 40 44 58 77
factor               : 76
figure               : 54
gotoE                : 41
gotoFalse            : 40 58
gotoW                : 58
module               : 8
moduleA              : 18
move                 : 56 57
pipeline             : 16
pipelineA            : 46
pipelineB            : 47 52
pipelineC            : 51
program              : 0
programA             : 1
programB             : 2 5
programC             : 4
repeat               : 13
repeatA              : 59 61
repeatB              : 60
screen               : 17
statute              : 7 36
type                 : 21
var_cte              : 48 78
vars                 : 19 22
varsA                : 21
workspace            : 4
write                : 11
writeA               : 43

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . INIT programA

    INIT            shift and go to state 1

    program                        shift and go to state 2

state 1

    (1) program -> INIT . programA
    (2) programA -> . programB END
    (3) programA -> . END
    (4) programB -> . workspace programC
    (7) workspace -> . statute
    (8) workspace -> . module
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . cycle
    (13) statute -> . repeat
    (14) statute -> . command
    (15) statute -> . calling
    (16) statute -> . pipeline
    (17) statute -> . screen
    (18) module -> . MOD # ID moduleA
    (39) assign -> . ID = expression ;
    (40) condition -> . IF ( expression ) gotoFalse block conditionA continueGo
    (43) write -> . ECHO writeA ;
    (58) cycle -> . WHILE gotoW ( expression ) gotoFalse block continueGoW
    (59) repeat -> . REPLAY CTE_INTEGER [ repeatA ] ;
    (54) command -> . figure exp exp color ;
    (55) command -> . SAMPLE commandA
    (27) calling -> . # ID ( callingA
    (46) pipeline -> . PIPE ID pipelineA
    (95) screen -> . WHERE
    (96) screen -> . CLEAR
    (79) figure -> . OVAL
    (80) figure -> . TRIO
    (81) figure -> . QUAD
    (82) figure -> . ARC

    END             shift and go to state 16
    MOD             shift and go to state 33
    ID              shift and go to state 23
    IF              shift and go to state 12
    ECHO            shift and go to state 18
    WHILE           shift and go to state 6
    REPLAY          shift and go to state 7
    SAMPLE          shift and go to state 19
    #               shift and go to state 9
    PIPE            shift and go to state 8
    WHERE           shift and go to state 28
    CLEAR           shift and go to state 13
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    module                         shift and go to state 4
    write                          shift and go to state 10
    condition                      shift and go to state 11
    repeat                         shift and go to state 15
    screen                         shift and go to state 17
    programB                       shift and go to state 21
    cycle                          shift and go to state 24
    statute                        shift and go to state 25
    pipeline                       shift and go to state 26
    calling                        shift and go to state 27
    command                        shift and go to state 30
    workspace                      shift and go to state 31
    assign                         shift and go to state 32
    programA                       shift and go to state 20

state 2

    (0) S' -> program .



state 3

    (54) command -> figure . exp exp color ;
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 39
    factor                         shift and go to state 40

state 4

    (8) workspace -> module .

    MOD             reduce using rule 8 (workspace -> module .)
    ID              reduce using rule 8 (workspace -> module .)
    IF              reduce using rule 8 (workspace -> module .)
    ECHO            reduce using rule 8 (workspace -> module .)
    WHILE           reduce using rule 8 (workspace -> module .)
    REPLAY          reduce using rule 8 (workspace -> module .)
    SAMPLE          reduce using rule 8 (workspace -> module .)
    #               reduce using rule 8 (workspace -> module .)
    PIPE            reduce using rule 8 (workspace -> module .)
    WHERE           reduce using rule 8 (workspace -> module .)
    CLEAR           reduce using rule 8 (workspace -> module .)
    OVAL            reduce using rule 8 (workspace -> module .)
    TRIO            reduce using rule 8 (workspace -> module .)
    QUAD            reduce using rule 8 (workspace -> module .)
    ARC             reduce using rule 8 (workspace -> module .)
    END             reduce using rule 8 (workspace -> module .)


state 5

    (79) figure -> OVAL .

    (               reduce using rule 79 (figure -> OVAL .)
    ID              reduce using rule 79 (figure -> OVAL .)
    CTE_INTEGER     reduce using rule 79 (figure -> OVAL .)
    CTE_FLOAT       reduce using rule 79 (figure -> OVAL .)
    TRUE            reduce using rule 79 (figure -> OVAL .)
    FALSE           reduce using rule 79 (figure -> OVAL .)


state 6

    (58) cycle -> WHILE . gotoW ( expression ) gotoFalse block continueGoW
    (104) gotoW -> .

    (               reduce using rule 104 (gotoW -> .)

    gotoW                          shift and go to state 43

state 7

    (59) repeat -> REPLAY . CTE_INTEGER [ repeatA ] ;

    CTE_INTEGER     shift and go to state 44


state 8

    (46) pipeline -> PIPE . ID pipelineA

    ID              shift and go to state 45


state 9

    (27) calling -> # . ID ( callingA

    ID              shift and go to state 46


state 10

    (11) statute -> write .

    MOD             reduce using rule 11 (statute -> write .)
    ID              reduce using rule 11 (statute -> write .)
    IF              reduce using rule 11 (statute -> write .)
    ECHO            reduce using rule 11 (statute -> write .)
    WHILE           reduce using rule 11 (statute -> write .)
    REPLAY          reduce using rule 11 (statute -> write .)
    SAMPLE          reduce using rule 11 (statute -> write .)
    #               reduce using rule 11 (statute -> write .)
    PIPE            reduce using rule 11 (statute -> write .)
    WHERE           reduce using rule 11 (statute -> write .)
    CLEAR           reduce using rule 11 (statute -> write .)
    OVAL            reduce using rule 11 (statute -> write .)
    TRIO            reduce using rule 11 (statute -> write .)
    QUAD            reduce using rule 11 (statute -> write .)
    ARC             reduce using rule 11 (statute -> write .)
    END             reduce using rule 11 (statute -> write .)
    }               reduce using rule 11 (statute -> write .)


state 11

    (10) statute -> condition .

    MOD             reduce using rule 10 (statute -> condition .)
    ID              reduce using rule 10 (statute -> condition .)
    IF              reduce using rule 10 (statute -> condition .)
    ECHO            reduce using rule 10 (statute -> condition .)
    WHILE           reduce using rule 10 (statute -> condition .)
    REPLAY          reduce using rule 10 (statute -> condition .)
    SAMPLE          reduce using rule 10 (statute -> condition .)
    #               reduce using rule 10 (statute -> condition .)
    PIPE            reduce using rule 10 (statute -> condition .)
    WHERE           reduce using rule 10 (statute -> condition .)
    CLEAR           reduce using rule 10 (statute -> condition .)
    OVAL            reduce using rule 10 (statute -> condition .)
    TRIO            reduce using rule 10 (statute -> condition .)
    QUAD            reduce using rule 10 (statute -> condition .)
    ARC             reduce using rule 10 (statute -> condition .)
    END             reduce using rule 10 (statute -> condition .)
    }               reduce using rule 10 (statute -> condition .)


state 12

    (40) condition -> IF . ( expression ) gotoFalse block conditionA continueGo

    (               shift and go to state 47


state 13

    (96) screen -> CLEAR .

    ID              reduce using rule 96 (screen -> CLEAR .)
    IF              reduce using rule 96 (screen -> CLEAR .)
    ECHO            reduce using rule 96 (screen -> CLEAR .)
    WHILE           reduce using rule 96 (screen -> CLEAR .)
    REPLAY          reduce using rule 96 (screen -> CLEAR .)
    SAMPLE          reduce using rule 96 (screen -> CLEAR .)
    #               reduce using rule 96 (screen -> CLEAR .)
    PIPE            reduce using rule 96 (screen -> CLEAR .)
    WHERE           reduce using rule 96 (screen -> CLEAR .)
    CLEAR           reduce using rule 96 (screen -> CLEAR .)
    OVAL            reduce using rule 96 (screen -> CLEAR .)
    TRIO            reduce using rule 96 (screen -> CLEAR .)
    QUAD            reduce using rule 96 (screen -> CLEAR .)
    ARC             reduce using rule 96 (screen -> CLEAR .)
    }               reduce using rule 96 (screen -> CLEAR .)
    MOD             reduce using rule 96 (screen -> CLEAR .)
    END             reduce using rule 96 (screen -> CLEAR .)


state 14

    (80) figure -> TRIO .

    (               reduce using rule 80 (figure -> TRIO .)
    ID              reduce using rule 80 (figure -> TRIO .)
    CTE_INTEGER     reduce using rule 80 (figure -> TRIO .)
    CTE_FLOAT       reduce using rule 80 (figure -> TRIO .)
    TRUE            reduce using rule 80 (figure -> TRIO .)
    FALSE           reduce using rule 80 (figure -> TRIO .)


state 15

    (13) statute -> repeat .

    MOD             reduce using rule 13 (statute -> repeat .)
    ID              reduce using rule 13 (statute -> repeat .)
    IF              reduce using rule 13 (statute -> repeat .)
    ECHO            reduce using rule 13 (statute -> repeat .)
    WHILE           reduce using rule 13 (statute -> repeat .)
    REPLAY          reduce using rule 13 (statute -> repeat .)
    SAMPLE          reduce using rule 13 (statute -> repeat .)
    #               reduce using rule 13 (statute -> repeat .)
    PIPE            reduce using rule 13 (statute -> repeat .)
    WHERE           reduce using rule 13 (statute -> repeat .)
    CLEAR           reduce using rule 13 (statute -> repeat .)
    OVAL            reduce using rule 13 (statute -> repeat .)
    TRIO            reduce using rule 13 (statute -> repeat .)
    QUAD            reduce using rule 13 (statute -> repeat .)
    ARC             reduce using rule 13 (statute -> repeat .)
    END             reduce using rule 13 (statute -> repeat .)
    }               reduce using rule 13 (statute -> repeat .)


state 16

    (3) programA -> END .

    $end            reduce using rule 3 (programA -> END .)


state 17

    (17) statute -> screen .

    MOD             reduce using rule 17 (statute -> screen .)
    ID              reduce using rule 17 (statute -> screen .)
    IF              reduce using rule 17 (statute -> screen .)
    ECHO            reduce using rule 17 (statute -> screen .)
    WHILE           reduce using rule 17 (statute -> screen .)
    REPLAY          reduce using rule 17 (statute -> screen .)
    SAMPLE          reduce using rule 17 (statute -> screen .)
    #               reduce using rule 17 (statute -> screen .)
    PIPE            reduce using rule 17 (statute -> screen .)
    WHERE           reduce using rule 17 (statute -> screen .)
    CLEAR           reduce using rule 17 (statute -> screen .)
    OVAL            reduce using rule 17 (statute -> screen .)
    TRIO            reduce using rule 17 (statute -> screen .)
    QUAD            reduce using rule 17 (statute -> screen .)
    ARC             reduce using rule 17 (statute -> screen .)
    END             reduce using rule 17 (statute -> screen .)
    }               reduce using rule 17 (statute -> screen .)


state 18

    (43) write -> ECHO . writeA ;
    (44) writeA -> . expression
    (45) writeA -> . CTE_STRING
    (63) expression -> . exp = = exp
    (64) expression -> . exp < > exp
    (65) expression -> . exp < = exp
    (66) expression -> . exp > = exp
    (67) expression -> . exp > exp
    (68) expression -> . exp < exp
    (69) expression -> . exp AND exp
    (70) expression -> . exp OR exp
    (71) expression -> . exp empty
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    CTE_STRING      shift and go to state 49
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 50
    factor                         shift and go to state 40
    writeA                         shift and go to state 48
    expression                     shift and go to state 51

state 19

    (55) command -> SAMPLE . commandA
    (56) commandA -> . ON move exp CTE_INTEGER color ;
    (57) commandA -> . OFF move exp ;

    ON              shift and go to state 54
    OFF             shift and go to state 53

    commandA                       shift and go to state 52

state 20

    (1) program -> INIT programA .

    $end            reduce using rule 1 (program -> INIT programA .)


state 21

    (2) programA -> programB . END

    END             shift and go to state 55


state 22

    (81) figure -> QUAD .

    (               reduce using rule 81 (figure -> QUAD .)
    ID              reduce using rule 81 (figure -> QUAD .)
    CTE_INTEGER     reduce using rule 81 (figure -> QUAD .)
    CTE_FLOAT       reduce using rule 81 (figure -> QUAD .)
    TRUE            reduce using rule 81 (figure -> QUAD .)
    FALSE           reduce using rule 81 (figure -> QUAD .)


state 23

    (39) assign -> ID . = expression ;

    =               shift and go to state 56


state 24

    (12) statute -> cycle .

    MOD             reduce using rule 12 (statute -> cycle .)
    ID              reduce using rule 12 (statute -> cycle .)
    IF              reduce using rule 12 (statute -> cycle .)
    ECHO            reduce using rule 12 (statute -> cycle .)
    WHILE           reduce using rule 12 (statute -> cycle .)
    REPLAY          reduce using rule 12 (statute -> cycle .)
    SAMPLE          reduce using rule 12 (statute -> cycle .)
    #               reduce using rule 12 (statute -> cycle .)
    PIPE            reduce using rule 12 (statute -> cycle .)
    WHERE           reduce using rule 12 (statute -> cycle .)
    CLEAR           reduce using rule 12 (statute -> cycle .)
    OVAL            reduce using rule 12 (statute -> cycle .)
    TRIO            reduce using rule 12 (statute -> cycle .)
    QUAD            reduce using rule 12 (statute -> cycle .)
    ARC             reduce using rule 12 (statute -> cycle .)
    END             reduce using rule 12 (statute -> cycle .)
    }               reduce using rule 12 (statute -> cycle .)


state 25

    (7) workspace -> statute .

    MOD             reduce using rule 7 (workspace -> statute .)
    ID              reduce using rule 7 (workspace -> statute .)
    IF              reduce using rule 7 (workspace -> statute .)
    ECHO            reduce using rule 7 (workspace -> statute .)
    WHILE           reduce using rule 7 (workspace -> statute .)
    REPLAY          reduce using rule 7 (workspace -> statute .)
    SAMPLE          reduce using rule 7 (workspace -> statute .)
    #               reduce using rule 7 (workspace -> statute .)
    PIPE            reduce using rule 7 (workspace -> statute .)
    WHERE           reduce using rule 7 (workspace -> statute .)
    CLEAR           reduce using rule 7 (workspace -> statute .)
    OVAL            reduce using rule 7 (workspace -> statute .)
    TRIO            reduce using rule 7 (workspace -> statute .)
    QUAD            reduce using rule 7 (workspace -> statute .)
    ARC             reduce using rule 7 (workspace -> statute .)
    END             reduce using rule 7 (workspace -> statute .)


state 26

    (16) statute -> pipeline .

    MOD             reduce using rule 16 (statute -> pipeline .)
    ID              reduce using rule 16 (statute -> pipeline .)
    IF              reduce using rule 16 (statute -> pipeline .)
    ECHO            reduce using rule 16 (statute -> pipeline .)
    WHILE           reduce using rule 16 (statute -> pipeline .)
    REPLAY          reduce using rule 16 (statute -> pipeline .)
    SAMPLE          reduce using rule 16 (statute -> pipeline .)
    #               reduce using rule 16 (statute -> pipeline .)
    PIPE            reduce using rule 16 (statute -> pipeline .)
    WHERE           reduce using rule 16 (statute -> pipeline .)
    CLEAR           reduce using rule 16 (statute -> pipeline .)
    OVAL            reduce using rule 16 (statute -> pipeline .)
    TRIO            reduce using rule 16 (statute -> pipeline .)
    QUAD            reduce using rule 16 (statute -> pipeline .)
    ARC             reduce using rule 16 (statute -> pipeline .)
    END             reduce using rule 16 (statute -> pipeline .)
    }               reduce using rule 16 (statute -> pipeline .)


state 27

    (15) statute -> calling .

    MOD             reduce using rule 15 (statute -> calling .)
    ID              reduce using rule 15 (statute -> calling .)
    IF              reduce using rule 15 (statute -> calling .)
    ECHO            reduce using rule 15 (statute -> calling .)
    WHILE           reduce using rule 15 (statute -> calling .)
    REPLAY          reduce using rule 15 (statute -> calling .)
    SAMPLE          reduce using rule 15 (statute -> calling .)
    #               reduce using rule 15 (statute -> calling .)
    PIPE            reduce using rule 15 (statute -> calling .)
    WHERE           reduce using rule 15 (statute -> calling .)
    CLEAR           reduce using rule 15 (statute -> calling .)
    OVAL            reduce using rule 15 (statute -> calling .)
    TRIO            reduce using rule 15 (statute -> calling .)
    QUAD            reduce using rule 15 (statute -> calling .)
    ARC             reduce using rule 15 (statute -> calling .)
    END             reduce using rule 15 (statute -> calling .)
    }               reduce using rule 15 (statute -> calling .)


state 28

    (95) screen -> WHERE .

    ID              reduce using rule 95 (screen -> WHERE .)
    IF              reduce using rule 95 (screen -> WHERE .)
    ECHO            reduce using rule 95 (screen -> WHERE .)
    WHILE           reduce using rule 95 (screen -> WHERE .)
    REPLAY          reduce using rule 95 (screen -> WHERE .)
    SAMPLE          reduce using rule 95 (screen -> WHERE .)
    #               reduce using rule 95 (screen -> WHERE .)
    PIPE            reduce using rule 95 (screen -> WHERE .)
    WHERE           reduce using rule 95 (screen -> WHERE .)
    CLEAR           reduce using rule 95 (screen -> WHERE .)
    OVAL            reduce using rule 95 (screen -> WHERE .)
    TRIO            reduce using rule 95 (screen -> WHERE .)
    QUAD            reduce using rule 95 (screen -> WHERE .)
    ARC             reduce using rule 95 (screen -> WHERE .)
    }               reduce using rule 95 (screen -> WHERE .)
    MOD             reduce using rule 95 (screen -> WHERE .)
    END             reduce using rule 95 (screen -> WHERE .)


state 29

    (82) figure -> ARC .

    (               reduce using rule 82 (figure -> ARC .)
    ID              reduce using rule 82 (figure -> ARC .)
    CTE_INTEGER     reduce using rule 82 (figure -> ARC .)
    CTE_FLOAT       reduce using rule 82 (figure -> ARC .)
    TRUE            reduce using rule 82 (figure -> ARC .)
    FALSE           reduce using rule 82 (figure -> ARC .)


state 30

    (14) statute -> command .

    MOD             reduce using rule 14 (statute -> command .)
    ID              reduce using rule 14 (statute -> command .)
    IF              reduce using rule 14 (statute -> command .)
    ECHO            reduce using rule 14 (statute -> command .)
    WHILE           reduce using rule 14 (statute -> command .)
    REPLAY          reduce using rule 14 (statute -> command .)
    SAMPLE          reduce using rule 14 (statute -> command .)
    #               reduce using rule 14 (statute -> command .)
    PIPE            reduce using rule 14 (statute -> command .)
    WHERE           reduce using rule 14 (statute -> command .)
    CLEAR           reduce using rule 14 (statute -> command .)
    OVAL            reduce using rule 14 (statute -> command .)
    TRIO            reduce using rule 14 (statute -> command .)
    QUAD            reduce using rule 14 (statute -> command .)
    ARC             reduce using rule 14 (statute -> command .)
    END             reduce using rule 14 (statute -> command .)
    }               reduce using rule 14 (statute -> command .)


state 31

    (4) programB -> workspace . programC
    (5) programC -> . programB
    (6) programC -> . empty
    (4) programB -> . workspace programC
    (107) empty -> .
    (7) workspace -> . statute
    (8) workspace -> . module
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . cycle
    (13) statute -> . repeat
    (14) statute -> . command
    (15) statute -> . calling
    (16) statute -> . pipeline
    (17) statute -> . screen
    (18) module -> . MOD # ID moduleA
    (39) assign -> . ID = expression ;
    (40) condition -> . IF ( expression ) gotoFalse block conditionA continueGo
    (43) write -> . ECHO writeA ;
    (58) cycle -> . WHILE gotoW ( expression ) gotoFalse block continueGoW
    (59) repeat -> . REPLAY CTE_INTEGER [ repeatA ] ;
    (54) command -> . figure exp exp color ;
    (55) command -> . SAMPLE commandA
    (27) calling -> . # ID ( callingA
    (46) pipeline -> . PIPE ID pipelineA
    (95) screen -> . WHERE
    (96) screen -> . CLEAR
    (79) figure -> . OVAL
    (80) figure -> . TRIO
    (81) figure -> . QUAD
    (82) figure -> . ARC

    END             reduce using rule 107 (empty -> .)
    MOD             shift and go to state 33
    ID              shift and go to state 23
    IF              shift and go to state 12
    ECHO            shift and go to state 18
    WHILE           shift and go to state 6
    REPLAY          shift and go to state 7
    SAMPLE          shift and go to state 19
    #               shift and go to state 9
    PIPE            shift and go to state 8
    WHERE           shift and go to state 28
    CLEAR           shift and go to state 13
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    module                         shift and go to state 4
    write                          shift and go to state 10
    condition                      shift and go to state 11
    empty                          shift and go to state 57
    repeat                         shift and go to state 15
    screen                         shift and go to state 17
    programB                       shift and go to state 58
    programC                       shift and go to state 59
    cycle                          shift and go to state 24
    statute                        shift and go to state 25
    pipeline                       shift and go to state 26
    calling                        shift and go to state 27
    command                        shift and go to state 30
    workspace                      shift and go to state 31
    assign                         shift and go to state 32

state 32

    (9) statute -> assign .

    MOD             reduce using rule 9 (statute -> assign .)
    ID              reduce using rule 9 (statute -> assign .)
    IF              reduce using rule 9 (statute -> assign .)
    ECHO            reduce using rule 9 (statute -> assign .)
    WHILE           reduce using rule 9 (statute -> assign .)
    REPLAY          reduce using rule 9 (statute -> assign .)
    SAMPLE          reduce using rule 9 (statute -> assign .)
    #               reduce using rule 9 (statute -> assign .)
    PIPE            reduce using rule 9 (statute -> assign .)
    WHERE           reduce using rule 9 (statute -> assign .)
    CLEAR           reduce using rule 9 (statute -> assign .)
    OVAL            reduce using rule 9 (statute -> assign .)
    TRIO            reduce using rule 9 (statute -> assign .)
    QUAD            reduce using rule 9 (statute -> assign .)
    ARC             reduce using rule 9 (statute -> assign .)
    END             reduce using rule 9 (statute -> assign .)
    }               reduce using rule 9 (statute -> assign .)


state 33

    (18) module -> MOD . # ID moduleA

    #               shift and go to state 60


state 34

    (99) var_cte -> CTE_FLOAT .

    =               reduce using rule 99 (var_cte -> CTE_FLOAT .)
    <               reduce using rule 99 (var_cte -> CTE_FLOAT .)
    >               reduce using rule 99 (var_cte -> CTE_FLOAT .)
    AND             reduce using rule 99 (var_cte -> CTE_FLOAT .)
    OR              reduce using rule 99 (var_cte -> CTE_FLOAT .)
    +               reduce using rule 99 (var_cte -> CTE_FLOAT .)
    -               reduce using rule 99 (var_cte -> CTE_FLOAT .)
    *               reduce using rule 99 (var_cte -> CTE_FLOAT .)
    /               reduce using rule 99 (var_cte -> CTE_FLOAT .)
    ;               reduce using rule 99 (var_cte -> CTE_FLOAT .)
    )               reduce using rule 99 (var_cte -> CTE_FLOAT .)
    ,               reduce using rule 99 (var_cte -> CTE_FLOAT .)
    (               reduce using rule 99 (var_cte -> CTE_FLOAT .)
    ID              reduce using rule 99 (var_cte -> CTE_FLOAT .)
    CTE_INTEGER     reduce using rule 99 (var_cte -> CTE_FLOAT .)
    CTE_FLOAT       reduce using rule 99 (var_cte -> CTE_FLOAT .)
    TRUE            reduce using rule 99 (var_cte -> CTE_FLOAT .)
    FALSE           reduce using rule 99 (var_cte -> CTE_FLOAT .)
    RED             reduce using rule 99 (var_cte -> CTE_FLOAT .)
    YELLOW          reduce using rule 99 (var_cte -> CTE_FLOAT .)
    BLUE            reduce using rule 99 (var_cte -> CTE_FLOAT .)
    GREEN           reduce using rule 99 (var_cte -> CTE_FLOAT .)
    BLACK           reduce using rule 99 (var_cte -> CTE_FLOAT .)
    ORANGE          reduce using rule 99 (var_cte -> CTE_FLOAT .)
    PURPLE          reduce using rule 99 (var_cte -> CTE_FLOAT .)
    CYAN            reduce using rule 99 (var_cte -> CTE_FLOAT .)
    ]               reduce using rule 99 (var_cte -> CTE_FLOAT .)


state 35

    (77) factor -> ( . expression )
    (63) expression -> . exp = = exp
    (64) expression -> . exp < > exp
    (65) expression -> . exp < = exp
    (66) expression -> . exp > = exp
    (67) expression -> . exp > exp
    (68) expression -> . exp < exp
    (69) expression -> . exp AND exp
    (70) expression -> . exp OR exp
    (71) expression -> . exp empty
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    expression                     shift and go to state 61
    exp                            shift and go to state 50
    factor                         shift and go to state 40

state 36

    (78) factor -> var_cte .

    =               reduce using rule 78 (factor -> var_cte .)
    <               reduce using rule 78 (factor -> var_cte .)
    >               reduce using rule 78 (factor -> var_cte .)
    AND             reduce using rule 78 (factor -> var_cte .)
    OR              reduce using rule 78 (factor -> var_cte .)
    +               reduce using rule 78 (factor -> var_cte .)
    -               reduce using rule 78 (factor -> var_cte .)
    *               reduce using rule 78 (factor -> var_cte .)
    /               reduce using rule 78 (factor -> var_cte .)
    ;               reduce using rule 78 (factor -> var_cte .)
    )               reduce using rule 78 (factor -> var_cte .)
    (               reduce using rule 78 (factor -> var_cte .)
    ID              reduce using rule 78 (factor -> var_cte .)
    CTE_INTEGER     reduce using rule 78 (factor -> var_cte .)
    CTE_FLOAT       reduce using rule 78 (factor -> var_cte .)
    TRUE            reduce using rule 78 (factor -> var_cte .)
    FALSE           reduce using rule 78 (factor -> var_cte .)
    RED             reduce using rule 78 (factor -> var_cte .)
    YELLOW          reduce using rule 78 (factor -> var_cte .)
    BLUE            reduce using rule 78 (factor -> var_cte .)
    GREEN           reduce using rule 78 (factor -> var_cte .)
    BLACK           reduce using rule 78 (factor -> var_cte .)
    ORANGE          reduce using rule 78 (factor -> var_cte .)
    PURPLE          reduce using rule 78 (factor -> var_cte .)
    CYAN            reduce using rule 78 (factor -> var_cte .)
    ,               reduce using rule 78 (factor -> var_cte .)
    ]               reduce using rule 78 (factor -> var_cte .)


state 37

    (98) var_cte -> CTE_INTEGER .

    =               reduce using rule 98 (var_cte -> CTE_INTEGER .)
    <               reduce using rule 98 (var_cte -> CTE_INTEGER .)
    >               reduce using rule 98 (var_cte -> CTE_INTEGER .)
    AND             reduce using rule 98 (var_cte -> CTE_INTEGER .)
    OR              reduce using rule 98 (var_cte -> CTE_INTEGER .)
    +               reduce using rule 98 (var_cte -> CTE_INTEGER .)
    -               reduce using rule 98 (var_cte -> CTE_INTEGER .)
    *               reduce using rule 98 (var_cte -> CTE_INTEGER .)
    /               reduce using rule 98 (var_cte -> CTE_INTEGER .)
    ;               reduce using rule 98 (var_cte -> CTE_INTEGER .)
    )               reduce using rule 98 (var_cte -> CTE_INTEGER .)
    ,               reduce using rule 98 (var_cte -> CTE_INTEGER .)
    (               reduce using rule 98 (var_cte -> CTE_INTEGER .)
    ID              reduce using rule 98 (var_cte -> CTE_INTEGER .)
    CTE_INTEGER     reduce using rule 98 (var_cte -> CTE_INTEGER .)
    CTE_FLOAT       reduce using rule 98 (var_cte -> CTE_INTEGER .)
    TRUE            reduce using rule 98 (var_cte -> CTE_INTEGER .)
    FALSE           reduce using rule 98 (var_cte -> CTE_INTEGER .)
    RED             reduce using rule 98 (var_cte -> CTE_INTEGER .)
    YELLOW          reduce using rule 98 (var_cte -> CTE_INTEGER .)
    BLUE            reduce using rule 98 (var_cte -> CTE_INTEGER .)
    GREEN           reduce using rule 98 (var_cte -> CTE_INTEGER .)
    BLACK           reduce using rule 98 (var_cte -> CTE_INTEGER .)
    ORANGE          reduce using rule 98 (var_cte -> CTE_INTEGER .)
    PURPLE          reduce using rule 98 (var_cte -> CTE_INTEGER .)
    CYAN            reduce using rule 98 (var_cte -> CTE_INTEGER .)
    ]               reduce using rule 98 (var_cte -> CTE_INTEGER .)


state 38

    (100) var_cte -> TRUE .

    =               reduce using rule 100 (var_cte -> TRUE .)
    <               reduce using rule 100 (var_cte -> TRUE .)
    >               reduce using rule 100 (var_cte -> TRUE .)
    AND             reduce using rule 100 (var_cte -> TRUE .)
    OR              reduce using rule 100 (var_cte -> TRUE .)
    +               reduce using rule 100 (var_cte -> TRUE .)
    -               reduce using rule 100 (var_cte -> TRUE .)
    *               reduce using rule 100 (var_cte -> TRUE .)
    /               reduce using rule 100 (var_cte -> TRUE .)
    ;               reduce using rule 100 (var_cte -> TRUE .)
    )               reduce using rule 100 (var_cte -> TRUE .)
    ,               reduce using rule 100 (var_cte -> TRUE .)
    (               reduce using rule 100 (var_cte -> TRUE .)
    ID              reduce using rule 100 (var_cte -> TRUE .)
    CTE_INTEGER     reduce using rule 100 (var_cte -> TRUE .)
    CTE_FLOAT       reduce using rule 100 (var_cte -> TRUE .)
    TRUE            reduce using rule 100 (var_cte -> TRUE .)
    FALSE           reduce using rule 100 (var_cte -> TRUE .)
    RED             reduce using rule 100 (var_cte -> TRUE .)
    YELLOW          reduce using rule 100 (var_cte -> TRUE .)
    BLUE            reduce using rule 100 (var_cte -> TRUE .)
    GREEN           reduce using rule 100 (var_cte -> TRUE .)
    BLACK           reduce using rule 100 (var_cte -> TRUE .)
    ORANGE          reduce using rule 100 (var_cte -> TRUE .)
    PURPLE          reduce using rule 100 (var_cte -> TRUE .)
    CYAN            reduce using rule 100 (var_cte -> TRUE .)
    ]               reduce using rule 100 (var_cte -> TRUE .)


state 39

    (54) command -> figure exp . exp color ;
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 66
    factor                         shift and go to state 40

state 40

    (76) exp -> factor . empty
    (107) empty -> .

    +               reduce using rule 107 (empty -> .)
    -               reduce using rule 107 (empty -> .)
    *               reduce using rule 107 (empty -> .)
    /               reduce using rule 107 (empty -> .)
    (               reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    CTE_INTEGER     reduce using rule 107 (empty -> .)
    CTE_FLOAT       reduce using rule 107 (empty -> .)
    TRUE            reduce using rule 107 (empty -> .)
    FALSE           reduce using rule 107 (empty -> .)
    =               reduce using rule 107 (empty -> .)
    <               reduce using rule 107 (empty -> .)
    >               reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    ;               reduce using rule 107 (empty -> .)
    )               reduce using rule 107 (empty -> .)
    RED             reduce using rule 107 (empty -> .)
    YELLOW          reduce using rule 107 (empty -> .)
    BLUE            reduce using rule 107 (empty -> .)
    GREEN           reduce using rule 107 (empty -> .)
    BLACK           reduce using rule 107 (empty -> .)
    ORANGE          reduce using rule 107 (empty -> .)
    PURPLE          reduce using rule 107 (empty -> .)
    CYAN            reduce using rule 107 (empty -> .)
    ,               reduce using rule 107 (empty -> .)
    ]               reduce using rule 107 (empty -> .)

    empty                          shift and go to state 67

state 41

    (101) var_cte -> FALSE .

    =               reduce using rule 101 (var_cte -> FALSE .)
    <               reduce using rule 101 (var_cte -> FALSE .)
    >               reduce using rule 101 (var_cte -> FALSE .)
    AND             reduce using rule 101 (var_cte -> FALSE .)
    OR              reduce using rule 101 (var_cte -> FALSE .)
    +               reduce using rule 101 (var_cte -> FALSE .)
    -               reduce using rule 101 (var_cte -> FALSE .)
    *               reduce using rule 101 (var_cte -> FALSE .)
    /               reduce using rule 101 (var_cte -> FALSE .)
    ;               reduce using rule 101 (var_cte -> FALSE .)
    )               reduce using rule 101 (var_cte -> FALSE .)
    ,               reduce using rule 101 (var_cte -> FALSE .)
    (               reduce using rule 101 (var_cte -> FALSE .)
    ID              reduce using rule 101 (var_cte -> FALSE .)
    CTE_INTEGER     reduce using rule 101 (var_cte -> FALSE .)
    CTE_FLOAT       reduce using rule 101 (var_cte -> FALSE .)
    TRUE            reduce using rule 101 (var_cte -> FALSE .)
    FALSE           reduce using rule 101 (var_cte -> FALSE .)
    RED             reduce using rule 101 (var_cte -> FALSE .)
    YELLOW          reduce using rule 101 (var_cte -> FALSE .)
    BLUE            reduce using rule 101 (var_cte -> FALSE .)
    GREEN           reduce using rule 101 (var_cte -> FALSE .)
    BLACK           reduce using rule 101 (var_cte -> FALSE .)
    ORANGE          reduce using rule 101 (var_cte -> FALSE .)
    PURPLE          reduce using rule 101 (var_cte -> FALSE .)
    CYAN            reduce using rule 101 (var_cte -> FALSE .)
    ]               reduce using rule 101 (var_cte -> FALSE .)


state 42

    (97) var_cte -> ID .

    =               reduce using rule 97 (var_cte -> ID .)
    <               reduce using rule 97 (var_cte -> ID .)
    >               reduce using rule 97 (var_cte -> ID .)
    AND             reduce using rule 97 (var_cte -> ID .)
    OR              reduce using rule 97 (var_cte -> ID .)
    +               reduce using rule 97 (var_cte -> ID .)
    -               reduce using rule 97 (var_cte -> ID .)
    *               reduce using rule 97 (var_cte -> ID .)
    /               reduce using rule 97 (var_cte -> ID .)
    ;               reduce using rule 97 (var_cte -> ID .)
    )               reduce using rule 97 (var_cte -> ID .)
    ,               reduce using rule 97 (var_cte -> ID .)
    (               reduce using rule 97 (var_cte -> ID .)
    ID              reduce using rule 97 (var_cte -> ID .)
    CTE_INTEGER     reduce using rule 97 (var_cte -> ID .)
    CTE_FLOAT       reduce using rule 97 (var_cte -> ID .)
    TRUE            reduce using rule 97 (var_cte -> ID .)
    FALSE           reduce using rule 97 (var_cte -> ID .)
    RED             reduce using rule 97 (var_cte -> ID .)
    YELLOW          reduce using rule 97 (var_cte -> ID .)
    BLUE            reduce using rule 97 (var_cte -> ID .)
    GREEN           reduce using rule 97 (var_cte -> ID .)
    BLACK           reduce using rule 97 (var_cte -> ID .)
    ORANGE          reduce using rule 97 (var_cte -> ID .)
    PURPLE          reduce using rule 97 (var_cte -> ID .)
    CYAN            reduce using rule 97 (var_cte -> ID .)
    ]               reduce using rule 97 (var_cte -> ID .)


state 43

    (58) cycle -> WHILE gotoW . ( expression ) gotoFalse block continueGoW

    (               shift and go to state 68


state 44

    (59) repeat -> REPLAY CTE_INTEGER . [ repeatA ] ;

    [               shift and go to state 69


state 45

    (46) pipeline -> PIPE ID . pipelineA
    (47) pipelineA -> . [ pipelineB ] ;
    (48) pipelineA -> . IN ( var_cte ) ;
    (49) pipelineA -> . OUT ( ) ;
    (50) pipelineA -> . COUNT ;

    [               shift and go to state 73
    IN              shift and go to state 71
    OUT             shift and go to state 74
    COUNT           shift and go to state 70

    pipelineA                      shift and go to state 72

state 46

    (27) calling -> # ID . ( callingA

    (               shift and go to state 75


state 47

    (40) condition -> IF ( . expression ) gotoFalse block conditionA continueGo
    (63) expression -> . exp = = exp
    (64) expression -> . exp < > exp
    (65) expression -> . exp < = exp
    (66) expression -> . exp > = exp
    (67) expression -> . exp > exp
    (68) expression -> . exp < exp
    (69) expression -> . exp AND exp
    (70) expression -> . exp OR exp
    (71) expression -> . exp empty
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    exp                            shift and go to state 50
    factor                         shift and go to state 40
    var_cte                        shift and go to state 36
    expression                     shift and go to state 76

state 48

    (43) write -> ECHO writeA . ;

    ;               shift and go to state 77


state 49

    (45) writeA -> CTE_STRING .

    ;               reduce using rule 45 (writeA -> CTE_STRING .)


state 50

    (63) expression -> exp . = = exp
    (64) expression -> exp . < > exp
    (65) expression -> exp . < = exp
    (66) expression -> exp . > = exp
    (67) expression -> exp . > exp
    (68) expression -> exp . < exp
    (69) expression -> exp . AND exp
    (70) expression -> exp . OR exp
    (71) expression -> exp . empty
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp
    (107) empty -> .

    =               shift and go to state 80
    <               shift and go to state 79
    >               shift and go to state 83
    AND             shift and go to state 78
    OR              shift and go to state 81
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    ;               reduce using rule 107 (empty -> .)
    )               reduce using rule 107 (empty -> .)
    ,               reduce using rule 107 (empty -> .)

    empty                          shift and go to state 82

state 51

    (44) writeA -> expression .

    ;               reduce using rule 44 (writeA -> expression .)


state 52

    (55) command -> SAMPLE commandA .

    MOD             reduce using rule 55 (command -> SAMPLE commandA .)
    ID              reduce using rule 55 (command -> SAMPLE commandA .)
    IF              reduce using rule 55 (command -> SAMPLE commandA .)
    ECHO            reduce using rule 55 (command -> SAMPLE commandA .)
    WHILE           reduce using rule 55 (command -> SAMPLE commandA .)
    REPLAY          reduce using rule 55 (command -> SAMPLE commandA .)
    SAMPLE          reduce using rule 55 (command -> SAMPLE commandA .)
    #               reduce using rule 55 (command -> SAMPLE commandA .)
    PIPE            reduce using rule 55 (command -> SAMPLE commandA .)
    WHERE           reduce using rule 55 (command -> SAMPLE commandA .)
    CLEAR           reduce using rule 55 (command -> SAMPLE commandA .)
    OVAL            reduce using rule 55 (command -> SAMPLE commandA .)
    TRIO            reduce using rule 55 (command -> SAMPLE commandA .)
    QUAD            reduce using rule 55 (command -> SAMPLE commandA .)
    ARC             reduce using rule 55 (command -> SAMPLE commandA .)
    END             reduce using rule 55 (command -> SAMPLE commandA .)
    ]               reduce using rule 55 (command -> SAMPLE commandA .)
    }               reduce using rule 55 (command -> SAMPLE commandA .)


state 53

    (57) commandA -> OFF . move exp ;
    (83) move -> . UP
    (84) move -> . DOWN
    (85) move -> . LEFT
    (86) move -> . RIGHT

    UP              shift and go to state 86
    DOWN            shift and go to state 87
    LEFT            shift and go to state 88
    RIGHT           shift and go to state 84

    move                           shift and go to state 85

state 54

    (56) commandA -> ON . move exp CTE_INTEGER color ;
    (83) move -> . UP
    (84) move -> . DOWN
    (85) move -> . LEFT
    (86) move -> . RIGHT

    UP              shift and go to state 86
    DOWN            shift and go to state 87
    LEFT            shift and go to state 88
    RIGHT           shift and go to state 84

    move                           shift and go to state 89

state 55

    (2) programA -> programB END .

    $end            reduce using rule 2 (programA -> programB END .)


state 56

    (39) assign -> ID = . expression ;
    (63) expression -> . exp = = exp
    (64) expression -> . exp < > exp
    (65) expression -> . exp < = exp
    (66) expression -> . exp > = exp
    (67) expression -> . exp > exp
    (68) expression -> . exp < exp
    (69) expression -> . exp AND exp
    (70) expression -> . exp OR exp
    (71) expression -> . exp empty
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    expression                     shift and go to state 90
    exp                            shift and go to state 50
    factor                         shift and go to state 40

state 57

    (6) programC -> empty .

    END             reduce using rule 6 (programC -> empty .)


state 58

    (5) programC -> programB .

    END             reduce using rule 5 (programC -> programB .)


state 59

    (4) programB -> workspace programC .

    END             reduce using rule 4 (programB -> workspace programC .)


state 60

    (18) module -> MOD # . ID moduleA

    ID              shift and go to state 91


state 61

    (77) factor -> ( expression . )

    )               shift and go to state 92


state 62

    (72) exp -> exp + . exp
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 93
    factor                         shift and go to state 40

state 63

    (74) exp -> exp * . exp
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 94
    factor                         shift and go to state 40

state 64

    (73) exp -> exp - . exp
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 95
    factor                         shift and go to state 40

state 65

    (75) exp -> exp / . exp
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 96
    factor                         shift and go to state 40

state 66

    (54) command -> figure exp exp . color ;
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp
    (87) color -> . RED
    (88) color -> . YELLOW
    (89) color -> . BLUE
    (90) color -> . GREEN
    (91) color -> . BLACK
    (92) color -> . ORANGE
    (93) color -> . PURPLE
    (94) color -> . CYAN

    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    RED             shift and go to state 105
    YELLOW          shift and go to state 101
    BLUE            shift and go to state 97
    GREEN           shift and go to state 100
    BLACK           shift and go to state 104
    ORANGE          shift and go to state 103
    PURPLE          shift and go to state 99
    CYAN            shift and go to state 102

    color                          shift and go to state 98

state 67

    (76) exp -> factor empty .

    +               reduce using rule 76 (exp -> factor empty .)
    -               reduce using rule 76 (exp -> factor empty .)
    *               reduce using rule 76 (exp -> factor empty .)
    /               reduce using rule 76 (exp -> factor empty .)
    ;               reduce using rule 76 (exp -> factor empty .)
    )               reduce using rule 76 (exp -> factor empty .)
    ,               reduce using rule 76 (exp -> factor empty .)
    (               reduce using rule 76 (exp -> factor empty .)
    ID              reduce using rule 76 (exp -> factor empty .)
    CTE_INTEGER     reduce using rule 76 (exp -> factor empty .)
    CTE_FLOAT       reduce using rule 76 (exp -> factor empty .)
    TRUE            reduce using rule 76 (exp -> factor empty .)
    FALSE           reduce using rule 76 (exp -> factor empty .)
    ]               reduce using rule 76 (exp -> factor empty .)
    =               reduce using rule 76 (exp -> factor empty .)
    <               reduce using rule 76 (exp -> factor empty .)
    >               reduce using rule 76 (exp -> factor empty .)
    AND             reduce using rule 76 (exp -> factor empty .)
    OR              reduce using rule 76 (exp -> factor empty .)
    RED             reduce using rule 76 (exp -> factor empty .)
    YELLOW          reduce using rule 76 (exp -> factor empty .)
    BLUE            reduce using rule 76 (exp -> factor empty .)
    GREEN           reduce using rule 76 (exp -> factor empty .)
    BLACK           reduce using rule 76 (exp -> factor empty .)
    ORANGE          reduce using rule 76 (exp -> factor empty .)
    PURPLE          reduce using rule 76 (exp -> factor empty .)
    CYAN            reduce using rule 76 (exp -> factor empty .)


state 68

    (58) cycle -> WHILE gotoW ( . expression ) gotoFalse block continueGoW
    (63) expression -> . exp = = exp
    (64) expression -> . exp < > exp
    (65) expression -> . exp < = exp
    (66) expression -> . exp > = exp
    (67) expression -> . exp > exp
    (68) expression -> . exp < exp
    (69) expression -> . exp AND exp
    (70) expression -> . exp OR exp
    (71) expression -> . exp empty
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 50
    factor                         shift and go to state 40
    expression                     shift and go to state 106

state 69

    (59) repeat -> REPLAY CTE_INTEGER [ . repeatA ] ;
    (60) repeatA -> . command repeatB
    (54) command -> . figure exp exp color ;
    (55) command -> . SAMPLE commandA
    (79) figure -> . OVAL
    (80) figure -> . TRIO
    (81) figure -> . QUAD
    (82) figure -> . ARC

    SAMPLE          shift and go to state 19
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    repeatA                        shift and go to state 107
    command                        shift and go to state 108

state 70

    (50) pipelineA -> COUNT . ;

    ;               shift and go to state 109


state 71

    (48) pipelineA -> IN . ( var_cte ) ;

    (               shift and go to state 110


state 72

    (46) pipeline -> PIPE ID pipelineA .

    MOD             reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    ID              reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    IF              reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    ECHO            reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    WHILE           reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    REPLAY          reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    SAMPLE          reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    #               reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    PIPE            reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    WHERE           reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    CLEAR           reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    OVAL            reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    TRIO            reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    QUAD            reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    ARC             reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    END             reduce using rule 46 (pipeline -> PIPE ID pipelineA .)
    }               reduce using rule 46 (pipeline -> PIPE ID pipelineA .)


state 73

    (47) pipelineA -> [ . pipelineB ] ;
    (51) pipelineB -> . exp pipelineC
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    pipelineB                      shift and go to state 111
    exp                            shift and go to state 112
    factor                         shift and go to state 40

state 74

    (49) pipelineA -> OUT . ( ) ;

    (               shift and go to state 113


state 75

    (27) calling -> # ID ( . callingA
    (28) callingA -> . callingB ) ;
    (29) callingA -> . ) ;
    (30) callingB -> . expression callingC
    (63) expression -> . exp = = exp
    (64) expression -> . exp < > exp
    (65) expression -> . exp < = exp
    (66) expression -> . exp > = exp
    (67) expression -> . exp > exp
    (68) expression -> . exp < exp
    (69) expression -> . exp AND exp
    (70) expression -> . exp OR exp
    (71) expression -> . exp empty
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    )               shift and go to state 114
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    callingA                       shift and go to state 115
    callingB                       shift and go to state 116
    exp                            shift and go to state 50
    factor                         shift and go to state 40
    expression                     shift and go to state 117

state 76

    (40) condition -> IF ( expression . ) gotoFalse block conditionA continueGo

    )               shift and go to state 118


state 77

    (43) write -> ECHO writeA ; .

    MOD             reduce using rule 43 (write -> ECHO writeA ; .)
    ID              reduce using rule 43 (write -> ECHO writeA ; .)
    IF              reduce using rule 43 (write -> ECHO writeA ; .)
    ECHO            reduce using rule 43 (write -> ECHO writeA ; .)
    WHILE           reduce using rule 43 (write -> ECHO writeA ; .)
    REPLAY          reduce using rule 43 (write -> ECHO writeA ; .)
    SAMPLE          reduce using rule 43 (write -> ECHO writeA ; .)
    #               reduce using rule 43 (write -> ECHO writeA ; .)
    PIPE            reduce using rule 43 (write -> ECHO writeA ; .)
    WHERE           reduce using rule 43 (write -> ECHO writeA ; .)
    CLEAR           reduce using rule 43 (write -> ECHO writeA ; .)
    OVAL            reduce using rule 43 (write -> ECHO writeA ; .)
    TRIO            reduce using rule 43 (write -> ECHO writeA ; .)
    QUAD            reduce using rule 43 (write -> ECHO writeA ; .)
    ARC             reduce using rule 43 (write -> ECHO writeA ; .)
    END             reduce using rule 43 (write -> ECHO writeA ; .)
    }               reduce using rule 43 (write -> ECHO writeA ; .)


state 78

    (69) expression -> exp AND . exp
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 119
    factor                         shift and go to state 40

state 79

    (64) expression -> exp < . > exp
    (65) expression -> exp < . = exp
    (68) expression -> exp < . exp
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    >               shift and go to state 122
    =               shift and go to state 121
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 120
    factor                         shift and go to state 40

state 80

    (63) expression -> exp = . = exp

    =               shift and go to state 123


state 81

    (70) expression -> exp OR . exp
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 124
    factor                         shift and go to state 40

state 82

    (71) expression -> exp empty .

    )               reduce using rule 71 (expression -> exp empty .)
    ;               reduce using rule 71 (expression -> exp empty .)
    ,               reduce using rule 71 (expression -> exp empty .)


state 83

    (66) expression -> exp > . = exp
    (67) expression -> exp > . exp
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    =               shift and go to state 126
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 125
    factor                         shift and go to state 40

state 84

    (86) move -> RIGHT .

    (               reduce using rule 86 (move -> RIGHT .)
    ID              reduce using rule 86 (move -> RIGHT .)
    CTE_INTEGER     reduce using rule 86 (move -> RIGHT .)
    CTE_FLOAT       reduce using rule 86 (move -> RIGHT .)
    TRUE            reduce using rule 86 (move -> RIGHT .)
    FALSE           reduce using rule 86 (move -> RIGHT .)


state 85

    (57) commandA -> OFF move . exp ;
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 127
    factor                         shift and go to state 40

state 86

    (83) move -> UP .

    (               reduce using rule 83 (move -> UP .)
    ID              reduce using rule 83 (move -> UP .)
    CTE_INTEGER     reduce using rule 83 (move -> UP .)
    CTE_FLOAT       reduce using rule 83 (move -> UP .)
    TRUE            reduce using rule 83 (move -> UP .)
    FALSE           reduce using rule 83 (move -> UP .)


state 87

    (84) move -> DOWN .

    (               reduce using rule 84 (move -> DOWN .)
    ID              reduce using rule 84 (move -> DOWN .)
    CTE_INTEGER     reduce using rule 84 (move -> DOWN .)
    CTE_FLOAT       reduce using rule 84 (move -> DOWN .)
    TRUE            reduce using rule 84 (move -> DOWN .)
    FALSE           reduce using rule 84 (move -> DOWN .)


state 88

    (85) move -> LEFT .

    (               reduce using rule 85 (move -> LEFT .)
    ID              reduce using rule 85 (move -> LEFT .)
    CTE_INTEGER     reduce using rule 85 (move -> LEFT .)
    CTE_FLOAT       reduce using rule 85 (move -> LEFT .)
    TRUE            reduce using rule 85 (move -> LEFT .)
    FALSE           reduce using rule 85 (move -> LEFT .)


state 89

    (56) commandA -> ON move . exp CTE_INTEGER color ;
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 128
    factor                         shift and go to state 40

state 90

    (39) assign -> ID = expression . ;

    ;               shift and go to state 129


state 91

    (18) module -> MOD # ID . moduleA
    (19) moduleA -> . ( vars ) block
    (20) moduleA -> . block
    (33) block -> . { blockA

    (               shift and go to state 130
    {               shift and go to state 132

    block                          shift and go to state 131
    moduleA                        shift and go to state 133

state 92

    (77) factor -> ( expression ) .

    =               reduce using rule 77 (factor -> ( expression ) .)
    <               reduce using rule 77 (factor -> ( expression ) .)
    >               reduce using rule 77 (factor -> ( expression ) .)
    AND             reduce using rule 77 (factor -> ( expression ) .)
    OR              reduce using rule 77 (factor -> ( expression ) .)
    +               reduce using rule 77 (factor -> ( expression ) .)
    -               reduce using rule 77 (factor -> ( expression ) .)
    *               reduce using rule 77 (factor -> ( expression ) .)
    /               reduce using rule 77 (factor -> ( expression ) .)
    ;               reduce using rule 77 (factor -> ( expression ) .)
    )               reduce using rule 77 (factor -> ( expression ) .)
    (               reduce using rule 77 (factor -> ( expression ) .)
    ID              reduce using rule 77 (factor -> ( expression ) .)
    CTE_INTEGER     reduce using rule 77 (factor -> ( expression ) .)
    CTE_FLOAT       reduce using rule 77 (factor -> ( expression ) .)
    TRUE            reduce using rule 77 (factor -> ( expression ) .)
    FALSE           reduce using rule 77 (factor -> ( expression ) .)
    RED             reduce using rule 77 (factor -> ( expression ) .)
    YELLOW          reduce using rule 77 (factor -> ( expression ) .)
    BLUE            reduce using rule 77 (factor -> ( expression ) .)
    GREEN           reduce using rule 77 (factor -> ( expression ) .)
    BLACK           reduce using rule 77 (factor -> ( expression ) .)
    ORANGE          reduce using rule 77 (factor -> ( expression ) .)
    PURPLE          reduce using rule 77 (factor -> ( expression ) .)
    CYAN            reduce using rule 77 (factor -> ( expression ) .)
    ,               reduce using rule 77 (factor -> ( expression ) .)
    ]               reduce using rule 77 (factor -> ( expression ) .)


state 93

    (72) exp -> exp + exp .
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp

    +               reduce using rule 72 (exp -> exp + exp .)
    -               reduce using rule 72 (exp -> exp + exp .)
    ;               reduce using rule 72 (exp -> exp + exp .)
    )               reduce using rule 72 (exp -> exp + exp .)
    ,               reduce using rule 72 (exp -> exp + exp .)
    (               reduce using rule 72 (exp -> exp + exp .)
    ID              reduce using rule 72 (exp -> exp + exp .)
    CTE_INTEGER     reduce using rule 72 (exp -> exp + exp .)
    CTE_FLOAT       reduce using rule 72 (exp -> exp + exp .)
    TRUE            reduce using rule 72 (exp -> exp + exp .)
    FALSE           reduce using rule 72 (exp -> exp + exp .)
    ]               reduce using rule 72 (exp -> exp + exp .)
    =               reduce using rule 72 (exp -> exp + exp .)
    <               reduce using rule 72 (exp -> exp + exp .)
    >               reduce using rule 72 (exp -> exp + exp .)
    AND             reduce using rule 72 (exp -> exp + exp .)
    OR              reduce using rule 72 (exp -> exp + exp .)
    RED             reduce using rule 72 (exp -> exp + exp .)
    YELLOW          reduce using rule 72 (exp -> exp + exp .)
    BLUE            reduce using rule 72 (exp -> exp + exp .)
    GREEN           reduce using rule 72 (exp -> exp + exp .)
    BLACK           reduce using rule 72 (exp -> exp + exp .)
    ORANGE          reduce using rule 72 (exp -> exp + exp .)
    PURPLE          reduce using rule 72 (exp -> exp + exp .)
    CYAN            reduce using rule 72 (exp -> exp + exp .)
    *               shift and go to state 63
    /               shift and go to state 65

  ! *               [ reduce using rule 72 (exp -> exp + exp .) ]
  ! /               [ reduce using rule 72 (exp -> exp + exp .) ]
  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 64 ]


state 94

    (74) exp -> exp * exp .
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp

    +               reduce using rule 74 (exp -> exp * exp .)
    -               reduce using rule 74 (exp -> exp * exp .)
    *               reduce using rule 74 (exp -> exp * exp .)
    /               reduce using rule 74 (exp -> exp * exp .)
    ;               reduce using rule 74 (exp -> exp * exp .)
    )               reduce using rule 74 (exp -> exp * exp .)
    ,               reduce using rule 74 (exp -> exp * exp .)
    (               reduce using rule 74 (exp -> exp * exp .)
    ID              reduce using rule 74 (exp -> exp * exp .)
    CTE_INTEGER     reduce using rule 74 (exp -> exp * exp .)
    CTE_FLOAT       reduce using rule 74 (exp -> exp * exp .)
    TRUE            reduce using rule 74 (exp -> exp * exp .)
    FALSE           reduce using rule 74 (exp -> exp * exp .)
    ]               reduce using rule 74 (exp -> exp * exp .)
    =               reduce using rule 74 (exp -> exp * exp .)
    <               reduce using rule 74 (exp -> exp * exp .)
    >               reduce using rule 74 (exp -> exp * exp .)
    AND             reduce using rule 74 (exp -> exp * exp .)
    OR              reduce using rule 74 (exp -> exp * exp .)
    RED             reduce using rule 74 (exp -> exp * exp .)
    YELLOW          reduce using rule 74 (exp -> exp * exp .)
    BLUE            reduce using rule 74 (exp -> exp * exp .)
    GREEN           reduce using rule 74 (exp -> exp * exp .)
    BLACK           reduce using rule 74 (exp -> exp * exp .)
    ORANGE          reduce using rule 74 (exp -> exp * exp .)
    PURPLE          reduce using rule 74 (exp -> exp * exp .)
    CYAN            reduce using rule 74 (exp -> exp * exp .)

  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 65 ]


state 95

    (73) exp -> exp - exp .
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp

    +               reduce using rule 73 (exp -> exp - exp .)
    -               reduce using rule 73 (exp -> exp - exp .)
    ;               reduce using rule 73 (exp -> exp - exp .)
    )               reduce using rule 73 (exp -> exp - exp .)
    ,               reduce using rule 73 (exp -> exp - exp .)
    (               reduce using rule 73 (exp -> exp - exp .)
    ID              reduce using rule 73 (exp -> exp - exp .)
    CTE_INTEGER     reduce using rule 73 (exp -> exp - exp .)
    CTE_FLOAT       reduce using rule 73 (exp -> exp - exp .)
    TRUE            reduce using rule 73 (exp -> exp - exp .)
    FALSE           reduce using rule 73 (exp -> exp - exp .)
    ]               reduce using rule 73 (exp -> exp - exp .)
    =               reduce using rule 73 (exp -> exp - exp .)
    <               reduce using rule 73 (exp -> exp - exp .)
    >               reduce using rule 73 (exp -> exp - exp .)
    AND             reduce using rule 73 (exp -> exp - exp .)
    OR              reduce using rule 73 (exp -> exp - exp .)
    RED             reduce using rule 73 (exp -> exp - exp .)
    YELLOW          reduce using rule 73 (exp -> exp - exp .)
    BLUE            reduce using rule 73 (exp -> exp - exp .)
    GREEN           reduce using rule 73 (exp -> exp - exp .)
    BLACK           reduce using rule 73 (exp -> exp - exp .)
    ORANGE          reduce using rule 73 (exp -> exp - exp .)
    PURPLE          reduce using rule 73 (exp -> exp - exp .)
    CYAN            reduce using rule 73 (exp -> exp - exp .)
    *               shift and go to state 63
    /               shift and go to state 65

  ! *               [ reduce using rule 73 (exp -> exp - exp .) ]
  ! /               [ reduce using rule 73 (exp -> exp - exp .) ]
  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 64 ]


state 96

    (75) exp -> exp / exp .
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp

    +               reduce using rule 75 (exp -> exp / exp .)
    -               reduce using rule 75 (exp -> exp / exp .)
    *               reduce using rule 75 (exp -> exp / exp .)
    /               reduce using rule 75 (exp -> exp / exp .)
    ;               reduce using rule 75 (exp -> exp / exp .)
    )               reduce using rule 75 (exp -> exp / exp .)
    ,               reduce using rule 75 (exp -> exp / exp .)
    (               reduce using rule 75 (exp -> exp / exp .)
    ID              reduce using rule 75 (exp -> exp / exp .)
    CTE_INTEGER     reduce using rule 75 (exp -> exp / exp .)
    CTE_FLOAT       reduce using rule 75 (exp -> exp / exp .)
    TRUE            reduce using rule 75 (exp -> exp / exp .)
    FALSE           reduce using rule 75 (exp -> exp / exp .)
    ]               reduce using rule 75 (exp -> exp / exp .)
    =               reduce using rule 75 (exp -> exp / exp .)
    <               reduce using rule 75 (exp -> exp / exp .)
    >               reduce using rule 75 (exp -> exp / exp .)
    AND             reduce using rule 75 (exp -> exp / exp .)
    OR              reduce using rule 75 (exp -> exp / exp .)
    RED             reduce using rule 75 (exp -> exp / exp .)
    YELLOW          reduce using rule 75 (exp -> exp / exp .)
    BLUE            reduce using rule 75 (exp -> exp / exp .)
    GREEN           reduce using rule 75 (exp -> exp / exp .)
    BLACK           reduce using rule 75 (exp -> exp / exp .)
    ORANGE          reduce using rule 75 (exp -> exp / exp .)
    PURPLE          reduce using rule 75 (exp -> exp / exp .)
    CYAN            reduce using rule 75 (exp -> exp / exp .)

  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 65 ]


state 97

    (89) color -> BLUE .

    ;               reduce using rule 89 (color -> BLUE .)


state 98

    (54) command -> figure exp exp color . ;

    ;               shift and go to state 134


state 99

    (93) color -> PURPLE .

    ;               reduce using rule 93 (color -> PURPLE .)


state 100

    (90) color -> GREEN .

    ;               reduce using rule 90 (color -> GREEN .)


state 101

    (88) color -> YELLOW .

    ;               reduce using rule 88 (color -> YELLOW .)


state 102

    (94) color -> CYAN .

    ;               reduce using rule 94 (color -> CYAN .)


state 103

    (92) color -> ORANGE .

    ;               reduce using rule 92 (color -> ORANGE .)


state 104

    (91) color -> BLACK .

    ;               reduce using rule 91 (color -> BLACK .)


state 105

    (87) color -> RED .

    ;               reduce using rule 87 (color -> RED .)


state 106

    (58) cycle -> WHILE gotoW ( expression . ) gotoFalse block continueGoW

    )               shift and go to state 135


state 107

    (59) repeat -> REPLAY CTE_INTEGER [ repeatA . ] ;

    ]               shift and go to state 136


state 108

    (60) repeatA -> command . repeatB
    (61) repeatB -> . repeatA
    (62) repeatB -> . empty
    (60) repeatA -> . command repeatB
    (107) empty -> .
    (54) command -> . figure exp exp color ;
    (55) command -> . SAMPLE commandA
    (79) figure -> . OVAL
    (80) figure -> . TRIO
    (81) figure -> . QUAD
    (82) figure -> . ARC

    ]               reduce using rule 107 (empty -> .)
    SAMPLE          shift and go to state 19
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    repeatA                        shift and go to state 137
    repeatB                        shift and go to state 138
    command                        shift and go to state 108
    empty                          shift and go to state 139

state 109

    (50) pipelineA -> COUNT ; .

    MOD             reduce using rule 50 (pipelineA -> COUNT ; .)
    ID              reduce using rule 50 (pipelineA -> COUNT ; .)
    IF              reduce using rule 50 (pipelineA -> COUNT ; .)
    ECHO            reduce using rule 50 (pipelineA -> COUNT ; .)
    WHILE           reduce using rule 50 (pipelineA -> COUNT ; .)
    REPLAY          reduce using rule 50 (pipelineA -> COUNT ; .)
    SAMPLE          reduce using rule 50 (pipelineA -> COUNT ; .)
    #               reduce using rule 50 (pipelineA -> COUNT ; .)
    PIPE            reduce using rule 50 (pipelineA -> COUNT ; .)
    WHERE           reduce using rule 50 (pipelineA -> COUNT ; .)
    CLEAR           reduce using rule 50 (pipelineA -> COUNT ; .)
    OVAL            reduce using rule 50 (pipelineA -> COUNT ; .)
    TRIO            reduce using rule 50 (pipelineA -> COUNT ; .)
    QUAD            reduce using rule 50 (pipelineA -> COUNT ; .)
    ARC             reduce using rule 50 (pipelineA -> COUNT ; .)
    END             reduce using rule 50 (pipelineA -> COUNT ; .)
    }               reduce using rule 50 (pipelineA -> COUNT ; .)


state 110

    (48) pipelineA -> IN ( . var_cte ) ;
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 140

state 111

    (47) pipelineA -> [ pipelineB . ] ;

    ]               shift and go to state 141


state 112

    (51) pipelineB -> exp . pipelineC
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp
    (52) pipelineC -> . , pipelineB
    (53) pipelineC -> . empty
    (107) empty -> .

    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    ,               shift and go to state 142
    ]               reduce using rule 107 (empty -> .)

    empty                          shift and go to state 144
    pipelineC                      shift and go to state 143

state 113

    (49) pipelineA -> OUT ( . ) ;

    )               shift and go to state 145


state 114

    (29) callingA -> ) . ;

    ;               shift and go to state 146


state 115

    (27) calling -> # ID ( callingA .

    MOD             reduce using rule 27 (calling -> # ID ( callingA .)
    ID              reduce using rule 27 (calling -> # ID ( callingA .)
    IF              reduce using rule 27 (calling -> # ID ( callingA .)
    ECHO            reduce using rule 27 (calling -> # ID ( callingA .)
    WHILE           reduce using rule 27 (calling -> # ID ( callingA .)
    REPLAY          reduce using rule 27 (calling -> # ID ( callingA .)
    SAMPLE          reduce using rule 27 (calling -> # ID ( callingA .)
    #               reduce using rule 27 (calling -> # ID ( callingA .)
    PIPE            reduce using rule 27 (calling -> # ID ( callingA .)
    WHERE           reduce using rule 27 (calling -> # ID ( callingA .)
    CLEAR           reduce using rule 27 (calling -> # ID ( callingA .)
    OVAL            reduce using rule 27 (calling -> # ID ( callingA .)
    TRIO            reduce using rule 27 (calling -> # ID ( callingA .)
    QUAD            reduce using rule 27 (calling -> # ID ( callingA .)
    ARC             reduce using rule 27 (calling -> # ID ( callingA .)
    END             reduce using rule 27 (calling -> # ID ( callingA .)
    }               reduce using rule 27 (calling -> # ID ( callingA .)


state 116

    (28) callingA -> callingB . ) ;

    )               shift and go to state 147


state 117

    (30) callingB -> expression . callingC
    (31) callingC -> . , callingB
    (32) callingC -> . empty
    (107) empty -> .

    ,               shift and go to state 149
    )               reduce using rule 107 (empty -> .)

    callingC                       shift and go to state 148
    empty                          shift and go to state 150

state 118

    (40) condition -> IF ( expression ) . gotoFalse block conditionA continueGo
    (102) gotoFalse -> .

    {               reduce using rule 102 (gotoFalse -> .)

    gotoFalse                      shift and go to state 151

state 119

    (69) expression -> exp AND exp .
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp

    )               reduce using rule 69 (expression -> exp AND exp .)
    ;               reduce using rule 69 (expression -> exp AND exp .)
    ,               reduce using rule 69 (expression -> exp AND exp .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65


state 120

    (68) expression -> exp < exp .
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp

    )               reduce using rule 68 (expression -> exp < exp .)
    ;               reduce using rule 68 (expression -> exp < exp .)
    ,               reduce using rule 68 (expression -> exp < exp .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65


state 121

    (65) expression -> exp < = . exp
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 152
    factor                         shift and go to state 40

state 122

    (64) expression -> exp < > . exp
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 153
    factor                         shift and go to state 40

state 123

    (63) expression -> exp = = . exp
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 154
    factor                         shift and go to state 40

state 124

    (70) expression -> exp OR exp .
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp

    )               reduce using rule 70 (expression -> exp OR exp .)
    ;               reduce using rule 70 (expression -> exp OR exp .)
    ,               reduce using rule 70 (expression -> exp OR exp .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65


state 125

    (67) expression -> exp > exp .
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp

    )               reduce using rule 67 (expression -> exp > exp .)
    ;               reduce using rule 67 (expression -> exp > exp .)
    ,               reduce using rule 67 (expression -> exp > exp .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65


state 126

    (66) expression -> exp > = . exp
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 155
    factor                         shift and go to state 40

state 127

    (57) commandA -> OFF move exp . ;
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp

    ;               shift and go to state 156
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65


state 128

    (56) commandA -> ON move exp . CTE_INTEGER color ;
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp

    CTE_INTEGER     shift and go to state 157
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65


state 129

    (39) assign -> ID = expression ; .

    MOD             reduce using rule 39 (assign -> ID = expression ; .)
    ID              reduce using rule 39 (assign -> ID = expression ; .)
    IF              reduce using rule 39 (assign -> ID = expression ; .)
    ECHO            reduce using rule 39 (assign -> ID = expression ; .)
    WHILE           reduce using rule 39 (assign -> ID = expression ; .)
    REPLAY          reduce using rule 39 (assign -> ID = expression ; .)
    SAMPLE          reduce using rule 39 (assign -> ID = expression ; .)
    #               reduce using rule 39 (assign -> ID = expression ; .)
    PIPE            reduce using rule 39 (assign -> ID = expression ; .)
    WHERE           reduce using rule 39 (assign -> ID = expression ; .)
    CLEAR           reduce using rule 39 (assign -> ID = expression ; .)
    OVAL            reduce using rule 39 (assign -> ID = expression ; .)
    TRIO            reduce using rule 39 (assign -> ID = expression ; .)
    QUAD            reduce using rule 39 (assign -> ID = expression ; .)
    ARC             reduce using rule 39 (assign -> ID = expression ; .)
    END             reduce using rule 39 (assign -> ID = expression ; .)
    }               reduce using rule 39 (assign -> ID = expression ; .)


state 130

    (19) moduleA -> ( . vars ) block
    (21) vars -> . type ID varsA
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . BOOL

    INT             shift and go to state 160
    FLOAT           shift and go to state 159
    BOOL            shift and go to state 161

    type                           shift and go to state 162
    vars                           shift and go to state 158

state 131

    (20) moduleA -> block .

    MOD             reduce using rule 20 (moduleA -> block .)
    ID              reduce using rule 20 (moduleA -> block .)
    IF              reduce using rule 20 (moduleA -> block .)
    ECHO            reduce using rule 20 (moduleA -> block .)
    WHILE           reduce using rule 20 (moduleA -> block .)
    REPLAY          reduce using rule 20 (moduleA -> block .)
    SAMPLE          reduce using rule 20 (moduleA -> block .)
    #               reduce using rule 20 (moduleA -> block .)
    PIPE            reduce using rule 20 (moduleA -> block .)
    WHERE           reduce using rule 20 (moduleA -> block .)
    CLEAR           reduce using rule 20 (moduleA -> block .)
    OVAL            reduce using rule 20 (moduleA -> block .)
    TRIO            reduce using rule 20 (moduleA -> block .)
    QUAD            reduce using rule 20 (moduleA -> block .)
    ARC             reduce using rule 20 (moduleA -> block .)
    END             reduce using rule 20 (moduleA -> block .)


state 132

    (33) block -> { . blockA
    (34) blockA -> . blockB }
    (35) blockA -> . }
    (36) blockB -> . statute blockC
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . cycle
    (13) statute -> . repeat
    (14) statute -> . command
    (15) statute -> . calling
    (16) statute -> . pipeline
    (17) statute -> . screen
    (39) assign -> . ID = expression ;
    (40) condition -> . IF ( expression ) gotoFalse block conditionA continueGo
    (43) write -> . ECHO writeA ;
    (58) cycle -> . WHILE gotoW ( expression ) gotoFalse block continueGoW
    (59) repeat -> . REPLAY CTE_INTEGER [ repeatA ] ;
    (54) command -> . figure exp exp color ;
    (55) command -> . SAMPLE commandA
    (27) calling -> . # ID ( callingA
    (46) pipeline -> . PIPE ID pipelineA
    (95) screen -> . WHERE
    (96) screen -> . CLEAR
    (79) figure -> . OVAL
    (80) figure -> . TRIO
    (81) figure -> . QUAD
    (82) figure -> . ARC

    }               shift and go to state 164
    ID              shift and go to state 23
    IF              shift and go to state 12
    ECHO            shift and go to state 18
    WHILE           shift and go to state 6
    REPLAY          shift and go to state 7
    SAMPLE          shift and go to state 19
    #               shift and go to state 9
    PIPE            shift and go to state 8
    WHERE           shift and go to state 28
    CLEAR           shift and go to state 13
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    write                          shift and go to state 10
    command                        shift and go to state 30
    repeat                         shift and go to state 15
    screen                         shift and go to state 17
    condition                      shift and go to state 11
    cycle                          shift and go to state 24
    statute                        shift and go to state 163
    pipeline                       shift and go to state 26
    calling                        shift and go to state 27
    blockB                         shift and go to state 165
    blockA                         shift and go to state 166
    assign                         shift and go to state 32

state 133

    (18) module -> MOD # ID moduleA .

    MOD             reduce using rule 18 (module -> MOD # ID moduleA .)
    ID              reduce using rule 18 (module -> MOD # ID moduleA .)
    IF              reduce using rule 18 (module -> MOD # ID moduleA .)
    ECHO            reduce using rule 18 (module -> MOD # ID moduleA .)
    WHILE           reduce using rule 18 (module -> MOD # ID moduleA .)
    REPLAY          reduce using rule 18 (module -> MOD # ID moduleA .)
    SAMPLE          reduce using rule 18 (module -> MOD # ID moduleA .)
    #               reduce using rule 18 (module -> MOD # ID moduleA .)
    PIPE            reduce using rule 18 (module -> MOD # ID moduleA .)
    WHERE           reduce using rule 18 (module -> MOD # ID moduleA .)
    CLEAR           reduce using rule 18 (module -> MOD # ID moduleA .)
    OVAL            reduce using rule 18 (module -> MOD # ID moduleA .)
    TRIO            reduce using rule 18 (module -> MOD # ID moduleA .)
    QUAD            reduce using rule 18 (module -> MOD # ID moduleA .)
    ARC             reduce using rule 18 (module -> MOD # ID moduleA .)
    END             reduce using rule 18 (module -> MOD # ID moduleA .)


state 134

    (54) command -> figure exp exp color ; .

    MOD             reduce using rule 54 (command -> figure exp exp color ; .)
    ID              reduce using rule 54 (command -> figure exp exp color ; .)
    IF              reduce using rule 54 (command -> figure exp exp color ; .)
    ECHO            reduce using rule 54 (command -> figure exp exp color ; .)
    WHILE           reduce using rule 54 (command -> figure exp exp color ; .)
    REPLAY          reduce using rule 54 (command -> figure exp exp color ; .)
    SAMPLE          reduce using rule 54 (command -> figure exp exp color ; .)
    #               reduce using rule 54 (command -> figure exp exp color ; .)
    PIPE            reduce using rule 54 (command -> figure exp exp color ; .)
    WHERE           reduce using rule 54 (command -> figure exp exp color ; .)
    CLEAR           reduce using rule 54 (command -> figure exp exp color ; .)
    OVAL            reduce using rule 54 (command -> figure exp exp color ; .)
    TRIO            reduce using rule 54 (command -> figure exp exp color ; .)
    QUAD            reduce using rule 54 (command -> figure exp exp color ; .)
    ARC             reduce using rule 54 (command -> figure exp exp color ; .)
    END             reduce using rule 54 (command -> figure exp exp color ; .)
    ]               reduce using rule 54 (command -> figure exp exp color ; .)
    }               reduce using rule 54 (command -> figure exp exp color ; .)


state 135

    (58) cycle -> WHILE gotoW ( expression ) . gotoFalse block continueGoW
    (102) gotoFalse -> .

    {               reduce using rule 102 (gotoFalse -> .)

    gotoFalse                      shift and go to state 167

state 136

    (59) repeat -> REPLAY CTE_INTEGER [ repeatA ] . ;

    ;               shift and go to state 168


state 137

    (61) repeatB -> repeatA .

    ]               reduce using rule 61 (repeatB -> repeatA .)


state 138

    (60) repeatA -> command repeatB .

    ]               reduce using rule 60 (repeatA -> command repeatB .)


state 139

    (62) repeatB -> empty .

    ]               reduce using rule 62 (repeatB -> empty .)


state 140

    (48) pipelineA -> IN ( var_cte . ) ;

    )               shift and go to state 169


state 141

    (47) pipelineA -> [ pipelineB ] . ;

    ;               shift and go to state 170


state 142

    (52) pipelineC -> , . pipelineB
    (51) pipelineB -> . exp pipelineC
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    pipelineB                      shift and go to state 171
    exp                            shift and go to state 112
    factor                         shift and go to state 40

state 143

    (51) pipelineB -> exp pipelineC .

    ]               reduce using rule 51 (pipelineB -> exp pipelineC .)


state 144

    (53) pipelineC -> empty .

    ]               reduce using rule 53 (pipelineC -> empty .)


state 145

    (49) pipelineA -> OUT ( ) . ;

    ;               shift and go to state 172


state 146

    (29) callingA -> ) ; .

    MOD             reduce using rule 29 (callingA -> ) ; .)
    ID              reduce using rule 29 (callingA -> ) ; .)
    IF              reduce using rule 29 (callingA -> ) ; .)
    ECHO            reduce using rule 29 (callingA -> ) ; .)
    WHILE           reduce using rule 29 (callingA -> ) ; .)
    REPLAY          reduce using rule 29 (callingA -> ) ; .)
    SAMPLE          reduce using rule 29 (callingA -> ) ; .)
    #               reduce using rule 29 (callingA -> ) ; .)
    PIPE            reduce using rule 29 (callingA -> ) ; .)
    WHERE           reduce using rule 29 (callingA -> ) ; .)
    CLEAR           reduce using rule 29 (callingA -> ) ; .)
    OVAL            reduce using rule 29 (callingA -> ) ; .)
    TRIO            reduce using rule 29 (callingA -> ) ; .)
    QUAD            reduce using rule 29 (callingA -> ) ; .)
    ARC             reduce using rule 29 (callingA -> ) ; .)
    END             reduce using rule 29 (callingA -> ) ; .)
    }               reduce using rule 29 (callingA -> ) ; .)


state 147

    (28) callingA -> callingB ) . ;

    ;               shift and go to state 173


state 148

    (30) callingB -> expression callingC .

    )               reduce using rule 30 (callingB -> expression callingC .)


state 149

    (31) callingC -> , . callingB
    (30) callingB -> . expression callingC
    (63) expression -> . exp = = exp
    (64) expression -> . exp < > exp
    (65) expression -> . exp < = exp
    (66) expression -> . exp > = exp
    (67) expression -> . exp > exp
    (68) expression -> . exp < exp
    (69) expression -> . exp AND exp
    (70) expression -> . exp OR exp
    (71) expression -> . exp empty
    (72) exp -> . exp + exp
    (73) exp -> . exp - exp
    (74) exp -> . exp * exp
    (75) exp -> . exp / exp
    (76) exp -> . factor empty
    (77) factor -> . ( expression )
    (78) factor -> . var_cte
    (97) var_cte -> . ID
    (98) var_cte -> . CTE_INTEGER
    (99) var_cte -> . CTE_FLOAT
    (100) var_cte -> . TRUE
    (101) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    callingB                       shift and go to state 174
    exp                            shift and go to state 50
    factor                         shift and go to state 40
    expression                     shift and go to state 117

state 150

    (32) callingC -> empty .

    )               reduce using rule 32 (callingC -> empty .)


state 151

    (40) condition -> IF ( expression ) gotoFalse . block conditionA continueGo
    (33) block -> . { blockA

    {               shift and go to state 132

    block                          shift and go to state 175

state 152

    (65) expression -> exp < = exp .
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp

    )               reduce using rule 65 (expression -> exp < = exp .)
    ;               reduce using rule 65 (expression -> exp < = exp .)
    ,               reduce using rule 65 (expression -> exp < = exp .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65


state 153

    (64) expression -> exp < > exp .
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp

    )               reduce using rule 64 (expression -> exp < > exp .)
    ;               reduce using rule 64 (expression -> exp < > exp .)
    ,               reduce using rule 64 (expression -> exp < > exp .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65


state 154

    (63) expression -> exp = = exp .
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp

    )               reduce using rule 63 (expression -> exp = = exp .)
    ;               reduce using rule 63 (expression -> exp = = exp .)
    ,               reduce using rule 63 (expression -> exp = = exp .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65


state 155

    (66) expression -> exp > = exp .
    (72) exp -> exp . + exp
    (73) exp -> exp . - exp
    (74) exp -> exp . * exp
    (75) exp -> exp . / exp

    )               reduce using rule 66 (expression -> exp > = exp .)
    ;               reduce using rule 66 (expression -> exp > = exp .)
    ,               reduce using rule 66 (expression -> exp > = exp .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65


state 156

    (57) commandA -> OFF move exp ; .

    MOD             reduce using rule 57 (commandA -> OFF move exp ; .)
    ID              reduce using rule 57 (commandA -> OFF move exp ; .)
    IF              reduce using rule 57 (commandA -> OFF move exp ; .)
    ECHO            reduce using rule 57 (commandA -> OFF move exp ; .)
    WHILE           reduce using rule 57 (commandA -> OFF move exp ; .)
    REPLAY          reduce using rule 57 (commandA -> OFF move exp ; .)
    SAMPLE          reduce using rule 57 (commandA -> OFF move exp ; .)
    #               reduce using rule 57 (commandA -> OFF move exp ; .)
    PIPE            reduce using rule 57 (commandA -> OFF move exp ; .)
    WHERE           reduce using rule 57 (commandA -> OFF move exp ; .)
    CLEAR           reduce using rule 57 (commandA -> OFF move exp ; .)
    OVAL            reduce using rule 57 (commandA -> OFF move exp ; .)
    TRIO            reduce using rule 57 (commandA -> OFF move exp ; .)
    QUAD            reduce using rule 57 (commandA -> OFF move exp ; .)
    ARC             reduce using rule 57 (commandA -> OFF move exp ; .)
    END             reduce using rule 57 (commandA -> OFF move exp ; .)
    ]               reduce using rule 57 (commandA -> OFF move exp ; .)
    }               reduce using rule 57 (commandA -> OFF move exp ; .)


state 157

    (56) commandA -> ON move exp CTE_INTEGER . color ;
    (87) color -> . RED
    (88) color -> . YELLOW
    (89) color -> . BLUE
    (90) color -> . GREEN
    (91) color -> . BLACK
    (92) color -> . ORANGE
    (93) color -> . PURPLE
    (94) color -> . CYAN

    RED             shift and go to state 105
    YELLOW          shift and go to state 101
    BLUE            shift and go to state 97
    GREEN           shift and go to state 100
    BLACK           shift and go to state 104
    ORANGE          shift and go to state 103
    PURPLE          shift and go to state 99
    CYAN            shift and go to state 102

    color                          shift and go to state 176

state 158

    (19) moduleA -> ( vars . ) block

    )               shift and go to state 177


state 159

    (25) type -> FLOAT .

    ID              reduce using rule 25 (type -> FLOAT .)


state 160

    (24) type -> INT .

    ID              reduce using rule 24 (type -> INT .)


state 161

    (26) type -> BOOL .

    ID              reduce using rule 26 (type -> BOOL .)


state 162

    (21) vars -> type . ID varsA

    ID              shift and go to state 178


state 163

    (36) blockB -> statute . blockC
    (37) blockC -> . blockB
    (38) blockC -> . empty
    (36) blockB -> . statute blockC
    (107) empty -> .
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . cycle
    (13) statute -> . repeat
    (14) statute -> . command
    (15) statute -> . calling
    (16) statute -> . pipeline
    (17) statute -> . screen
    (39) assign -> . ID = expression ;
    (40) condition -> . IF ( expression ) gotoFalse block conditionA continueGo
    (43) write -> . ECHO writeA ;
    (58) cycle -> . WHILE gotoW ( expression ) gotoFalse block continueGoW
    (59) repeat -> . REPLAY CTE_INTEGER [ repeatA ] ;
    (54) command -> . figure exp exp color ;
    (55) command -> . SAMPLE commandA
    (27) calling -> . # ID ( callingA
    (46) pipeline -> . PIPE ID pipelineA
    (95) screen -> . WHERE
    (96) screen -> . CLEAR
    (79) figure -> . OVAL
    (80) figure -> . TRIO
    (81) figure -> . QUAD
    (82) figure -> . ARC

    }               reduce using rule 107 (empty -> .)
    ID              shift and go to state 23
    IF              shift and go to state 12
    ECHO            shift and go to state 18
    WHILE           shift and go to state 6
    REPLAY          shift and go to state 7
    SAMPLE          shift and go to state 19
    #               shift and go to state 9
    PIPE            shift and go to state 8
    WHERE           shift and go to state 28
    CLEAR           shift and go to state 13
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    write                          shift and go to state 10
    command                        shift and go to state 30
    empty                          shift and go to state 179
    repeat                         shift and go to state 15
    screen                         shift and go to state 17
    condition                      shift and go to state 11
    cycle                          shift and go to state 24
    statute                        shift and go to state 163
    pipeline                       shift and go to state 26
    calling                        shift and go to state 27
    blockC                         shift and go to state 180
    blockB                         shift and go to state 181
    assign                         shift and go to state 32

state 164

    (35) blockA -> } .

    MOD             reduce using rule 35 (blockA -> } .)
    ID              reduce using rule 35 (blockA -> } .)
    IF              reduce using rule 35 (blockA -> } .)
    ECHO            reduce using rule 35 (blockA -> } .)
    WHILE           reduce using rule 35 (blockA -> } .)
    REPLAY          reduce using rule 35 (blockA -> } .)
    SAMPLE          reduce using rule 35 (blockA -> } .)
    #               reduce using rule 35 (blockA -> } .)
    PIPE            reduce using rule 35 (blockA -> } .)
    WHERE           reduce using rule 35 (blockA -> } .)
    CLEAR           reduce using rule 35 (blockA -> } .)
    OVAL            reduce using rule 35 (blockA -> } .)
    TRIO            reduce using rule 35 (blockA -> } .)
    QUAD            reduce using rule 35 (blockA -> } .)
    ARC             reduce using rule 35 (blockA -> } .)
    END             reduce using rule 35 (blockA -> } .)
    ELSE            reduce using rule 35 (blockA -> } .)
    }               reduce using rule 35 (blockA -> } .)


state 165

    (34) blockA -> blockB . }

    }               shift and go to state 182


state 166

    (33) block -> { blockA .

    MOD             reduce using rule 33 (block -> { blockA .)
    ID              reduce using rule 33 (block -> { blockA .)
    IF              reduce using rule 33 (block -> { blockA .)
    ECHO            reduce using rule 33 (block -> { blockA .)
    WHILE           reduce using rule 33 (block -> { blockA .)
    REPLAY          reduce using rule 33 (block -> { blockA .)
    SAMPLE          reduce using rule 33 (block -> { blockA .)
    #               reduce using rule 33 (block -> { blockA .)
    PIPE            reduce using rule 33 (block -> { blockA .)
    WHERE           reduce using rule 33 (block -> { blockA .)
    CLEAR           reduce using rule 33 (block -> { blockA .)
    OVAL            reduce using rule 33 (block -> { blockA .)
    TRIO            reduce using rule 33 (block -> { blockA .)
    QUAD            reduce using rule 33 (block -> { blockA .)
    ARC             reduce using rule 33 (block -> { blockA .)
    END             reduce using rule 33 (block -> { blockA .)
    }               reduce using rule 33 (block -> { blockA .)
    ELSE            reduce using rule 33 (block -> { blockA .)


state 167

    (58) cycle -> WHILE gotoW ( expression ) gotoFalse . block continueGoW
    (33) block -> . { blockA

    {               shift and go to state 132

    block                          shift and go to state 183

state 168

    (59) repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .

    ID              reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    IF              reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    ECHO            reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    WHILE           reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    REPLAY          reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    SAMPLE          reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    #               reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    PIPE            reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    WHERE           reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    CLEAR           reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    OVAL            reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    TRIO            reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    QUAD            reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    ARC             reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    }               reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    MOD             reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    END             reduce using rule 59 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)


state 169

    (48) pipelineA -> IN ( var_cte ) . ;

    ;               shift and go to state 184


state 170

    (47) pipelineA -> [ pipelineB ] ; .

    MOD             reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    ID              reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    IF              reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    ECHO            reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    WHILE           reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    REPLAY          reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    SAMPLE          reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    #               reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    PIPE            reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    WHERE           reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    CLEAR           reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    OVAL            reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    TRIO            reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    QUAD            reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    ARC             reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    END             reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)
    }               reduce using rule 47 (pipelineA -> [ pipelineB ] ; .)


state 171

    (52) pipelineC -> , pipelineB .

    ]               reduce using rule 52 (pipelineC -> , pipelineB .)


state 172

    (49) pipelineA -> OUT ( ) ; .

    MOD             reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    ID              reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    IF              reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    ECHO            reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    WHILE           reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    REPLAY          reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    SAMPLE          reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    #               reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    PIPE            reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    WHERE           reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    CLEAR           reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    OVAL            reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    TRIO            reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    QUAD            reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    ARC             reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    END             reduce using rule 49 (pipelineA -> OUT ( ) ; .)
    }               reduce using rule 49 (pipelineA -> OUT ( ) ; .)


state 173

    (28) callingA -> callingB ) ; .

    MOD             reduce using rule 28 (callingA -> callingB ) ; .)
    ID              reduce using rule 28 (callingA -> callingB ) ; .)
    IF              reduce using rule 28 (callingA -> callingB ) ; .)
    ECHO            reduce using rule 28 (callingA -> callingB ) ; .)
    WHILE           reduce using rule 28 (callingA -> callingB ) ; .)
    REPLAY          reduce using rule 28 (callingA -> callingB ) ; .)
    SAMPLE          reduce using rule 28 (callingA -> callingB ) ; .)
    #               reduce using rule 28 (callingA -> callingB ) ; .)
    PIPE            reduce using rule 28 (callingA -> callingB ) ; .)
    WHERE           reduce using rule 28 (callingA -> callingB ) ; .)
    CLEAR           reduce using rule 28 (callingA -> callingB ) ; .)
    OVAL            reduce using rule 28 (callingA -> callingB ) ; .)
    TRIO            reduce using rule 28 (callingA -> callingB ) ; .)
    QUAD            reduce using rule 28 (callingA -> callingB ) ; .)
    ARC             reduce using rule 28 (callingA -> callingB ) ; .)
    END             reduce using rule 28 (callingA -> callingB ) ; .)
    }               reduce using rule 28 (callingA -> callingB ) ; .)


state 174

    (31) callingC -> , callingB .

    )               reduce using rule 31 (callingC -> , callingB .)


state 175

    (40) condition -> IF ( expression ) gotoFalse block . conditionA continueGo
    (41) conditionA -> . ELSE gotoE block
    (42) conditionA -> . empty
    (107) empty -> .

    ELSE            shift and go to state 187
    MOD             reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    ECHO            reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    REPLAY          reduce using rule 107 (empty -> .)
    SAMPLE          reduce using rule 107 (empty -> .)
    #               reduce using rule 107 (empty -> .)
    PIPE            reduce using rule 107 (empty -> .)
    WHERE           reduce using rule 107 (empty -> .)
    CLEAR           reduce using rule 107 (empty -> .)
    OVAL            reduce using rule 107 (empty -> .)
    TRIO            reduce using rule 107 (empty -> .)
    QUAD            reduce using rule 107 (empty -> .)
    ARC             reduce using rule 107 (empty -> .)
    END             reduce using rule 107 (empty -> .)
    }               reduce using rule 107 (empty -> .)

    conditionA                     shift and go to state 185
    empty                          shift and go to state 186

state 176

    (56) commandA -> ON move exp CTE_INTEGER color . ;

    ;               shift and go to state 188


state 177

    (19) moduleA -> ( vars ) . block
    (33) block -> . { blockA

    {               shift and go to state 132

    block                          shift and go to state 189

state 178

    (21) vars -> type ID . varsA
    (22) varsA -> . , vars
    (23) varsA -> . empty
    (107) empty -> .

    ,               shift and go to state 191
    )               reduce using rule 107 (empty -> .)

    varsA                          shift and go to state 190
    empty                          shift and go to state 192

state 179

    (38) blockC -> empty .

    }               reduce using rule 38 (blockC -> empty .)


state 180

    (36) blockB -> statute blockC .

    }               reduce using rule 36 (blockB -> statute blockC .)


state 181

    (37) blockC -> blockB .

    }               reduce using rule 37 (blockC -> blockB .)


state 182

    (34) blockA -> blockB } .

    MOD             reduce using rule 34 (blockA -> blockB } .)
    ID              reduce using rule 34 (blockA -> blockB } .)
    IF              reduce using rule 34 (blockA -> blockB } .)
    ECHO            reduce using rule 34 (blockA -> blockB } .)
    WHILE           reduce using rule 34 (blockA -> blockB } .)
    REPLAY          reduce using rule 34 (blockA -> blockB } .)
    SAMPLE          reduce using rule 34 (blockA -> blockB } .)
    #               reduce using rule 34 (blockA -> blockB } .)
    PIPE            reduce using rule 34 (blockA -> blockB } .)
    WHERE           reduce using rule 34 (blockA -> blockB } .)
    CLEAR           reduce using rule 34 (blockA -> blockB } .)
    OVAL            reduce using rule 34 (blockA -> blockB } .)
    TRIO            reduce using rule 34 (blockA -> blockB } .)
    QUAD            reduce using rule 34 (blockA -> blockB } .)
    ARC             reduce using rule 34 (blockA -> blockB } .)
    END             reduce using rule 34 (blockA -> blockB } .)
    ELSE            reduce using rule 34 (blockA -> blockB } .)
    }               reduce using rule 34 (blockA -> blockB } .)


state 183

    (58) cycle -> WHILE gotoW ( expression ) gotoFalse block . continueGoW
    (106) continueGoW -> .

    MOD             reduce using rule 106 (continueGoW -> .)
    ID              reduce using rule 106 (continueGoW -> .)
    IF              reduce using rule 106 (continueGoW -> .)
    ECHO            reduce using rule 106 (continueGoW -> .)
    WHILE           reduce using rule 106 (continueGoW -> .)
    REPLAY          reduce using rule 106 (continueGoW -> .)
    SAMPLE          reduce using rule 106 (continueGoW -> .)
    #               reduce using rule 106 (continueGoW -> .)
    PIPE            reduce using rule 106 (continueGoW -> .)
    WHERE           reduce using rule 106 (continueGoW -> .)
    CLEAR           reduce using rule 106 (continueGoW -> .)
    OVAL            reduce using rule 106 (continueGoW -> .)
    TRIO            reduce using rule 106 (continueGoW -> .)
    QUAD            reduce using rule 106 (continueGoW -> .)
    ARC             reduce using rule 106 (continueGoW -> .)
    END             reduce using rule 106 (continueGoW -> .)
    }               reduce using rule 106 (continueGoW -> .)

    continueGoW                    shift and go to state 193

state 184

    (48) pipelineA -> IN ( var_cte ) ; .

    MOD             reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    ID              reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    IF              reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    ECHO            reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    WHILE           reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    REPLAY          reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    SAMPLE          reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    #               reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    PIPE            reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    WHERE           reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    CLEAR           reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    OVAL            reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    TRIO            reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    QUAD            reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    ARC             reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    END             reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)
    }               reduce using rule 48 (pipelineA -> IN ( var_cte ) ; .)


state 185

    (40) condition -> IF ( expression ) gotoFalse block conditionA . continueGo
    (105) continueGo -> .

    MOD             reduce using rule 105 (continueGo -> .)
    ID              reduce using rule 105 (continueGo -> .)
    IF              reduce using rule 105 (continueGo -> .)
    ECHO            reduce using rule 105 (continueGo -> .)
    WHILE           reduce using rule 105 (continueGo -> .)
    REPLAY          reduce using rule 105 (continueGo -> .)
    SAMPLE          reduce using rule 105 (continueGo -> .)
    #               reduce using rule 105 (continueGo -> .)
    PIPE            reduce using rule 105 (continueGo -> .)
    WHERE           reduce using rule 105 (continueGo -> .)
    CLEAR           reduce using rule 105 (continueGo -> .)
    OVAL            reduce using rule 105 (continueGo -> .)
    TRIO            reduce using rule 105 (continueGo -> .)
    QUAD            reduce using rule 105 (continueGo -> .)
    ARC             reduce using rule 105 (continueGo -> .)
    END             reduce using rule 105 (continueGo -> .)
    }               reduce using rule 105 (continueGo -> .)

    continueGo                     shift and go to state 194

state 186

    (42) conditionA -> empty .

    MOD             reduce using rule 42 (conditionA -> empty .)
    ID              reduce using rule 42 (conditionA -> empty .)
    IF              reduce using rule 42 (conditionA -> empty .)
    ECHO            reduce using rule 42 (conditionA -> empty .)
    WHILE           reduce using rule 42 (conditionA -> empty .)
    REPLAY          reduce using rule 42 (conditionA -> empty .)
    SAMPLE          reduce using rule 42 (conditionA -> empty .)
    #               reduce using rule 42 (conditionA -> empty .)
    PIPE            reduce using rule 42 (conditionA -> empty .)
    WHERE           reduce using rule 42 (conditionA -> empty .)
    CLEAR           reduce using rule 42 (conditionA -> empty .)
    OVAL            reduce using rule 42 (conditionA -> empty .)
    TRIO            reduce using rule 42 (conditionA -> empty .)
    QUAD            reduce using rule 42 (conditionA -> empty .)
    ARC             reduce using rule 42 (conditionA -> empty .)
    END             reduce using rule 42 (conditionA -> empty .)
    }               reduce using rule 42 (conditionA -> empty .)


state 187

    (41) conditionA -> ELSE . gotoE block
    (103) gotoE -> .

    {               reduce using rule 103 (gotoE -> .)

    gotoE                          shift and go to state 195

state 188

    (56) commandA -> ON move exp CTE_INTEGER color ; .

    MOD             reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    ID              reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    IF              reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    ECHO            reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    WHILE           reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    REPLAY          reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    SAMPLE          reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    #               reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    PIPE            reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    WHERE           reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    CLEAR           reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    OVAL            reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    TRIO            reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    QUAD            reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    ARC             reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    END             reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    ]               reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)
    }               reduce using rule 56 (commandA -> ON move exp CTE_INTEGER color ; .)


state 189

    (19) moduleA -> ( vars ) block .

    MOD             reduce using rule 19 (moduleA -> ( vars ) block .)
    ID              reduce using rule 19 (moduleA -> ( vars ) block .)
    IF              reduce using rule 19 (moduleA -> ( vars ) block .)
    ECHO            reduce using rule 19 (moduleA -> ( vars ) block .)
    WHILE           reduce using rule 19 (moduleA -> ( vars ) block .)
    REPLAY          reduce using rule 19 (moduleA -> ( vars ) block .)
    SAMPLE          reduce using rule 19 (moduleA -> ( vars ) block .)
    #               reduce using rule 19 (moduleA -> ( vars ) block .)
    PIPE            reduce using rule 19 (moduleA -> ( vars ) block .)
    WHERE           reduce using rule 19 (moduleA -> ( vars ) block .)
    CLEAR           reduce using rule 19 (moduleA -> ( vars ) block .)
    OVAL            reduce using rule 19 (moduleA -> ( vars ) block .)
    TRIO            reduce using rule 19 (moduleA -> ( vars ) block .)
    QUAD            reduce using rule 19 (moduleA -> ( vars ) block .)
    ARC             reduce using rule 19 (moduleA -> ( vars ) block .)
    END             reduce using rule 19 (moduleA -> ( vars ) block .)


state 190

    (21) vars -> type ID varsA .

    )               reduce using rule 21 (vars -> type ID varsA .)


state 191

    (22) varsA -> , . vars
    (21) vars -> . type ID varsA
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . BOOL

    INT             shift and go to state 160
    FLOAT           shift and go to state 159
    BOOL            shift and go to state 161

    type                           shift and go to state 162
    vars                           shift and go to state 196

state 192

    (23) varsA -> empty .

    )               reduce using rule 23 (varsA -> empty .)


state 193

    (58) cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .

    ID              reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    IF              reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    ECHO            reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    WHILE           reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    REPLAY          reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    SAMPLE          reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    #               reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    PIPE            reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    WHERE           reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    CLEAR           reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    OVAL            reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    TRIO            reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    QUAD            reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    ARC             reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    }               reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    MOD             reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    END             reduce using rule 58 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)


state 194

    (40) condition -> IF ( expression ) gotoFalse block conditionA continueGo .

    MOD             reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    ID              reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    IF              reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    ECHO            reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    WHILE           reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    REPLAY          reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    SAMPLE          reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    #               reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    PIPE            reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    WHERE           reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    CLEAR           reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    OVAL            reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    TRIO            reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    QUAD            reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    ARC             reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    END             reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    }               reduce using rule 40 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)


state 195

    (41) conditionA -> ELSE gotoE . block
    (33) block -> . { blockA

    {               shift and go to state 132

    block                          shift and go to state 197

state 196

    (22) varsA -> , vars .

    )               reduce using rule 22 (varsA -> , vars .)


state 197

    (41) conditionA -> ELSE gotoE block .

    MOD             reduce using rule 41 (conditionA -> ELSE gotoE block .)
    ID              reduce using rule 41 (conditionA -> ELSE gotoE block .)
    IF              reduce using rule 41 (conditionA -> ELSE gotoE block .)
    ECHO            reduce using rule 41 (conditionA -> ELSE gotoE block .)
    WHILE           reduce using rule 41 (conditionA -> ELSE gotoE block .)
    REPLAY          reduce using rule 41 (conditionA -> ELSE gotoE block .)
    SAMPLE          reduce using rule 41 (conditionA -> ELSE gotoE block .)
    #               reduce using rule 41 (conditionA -> ELSE gotoE block .)
    PIPE            reduce using rule 41 (conditionA -> ELSE gotoE block .)
    WHERE           reduce using rule 41 (conditionA -> ELSE gotoE block .)
    CLEAR           reduce using rule 41 (conditionA -> ELSE gotoE block .)
    OVAL            reduce using rule 41 (conditionA -> ELSE gotoE block .)
    TRIO            reduce using rule 41 (conditionA -> ELSE gotoE block .)
    QUAD            reduce using rule 41 (conditionA -> ELSE gotoE block .)
    ARC             reduce using rule 41 (conditionA -> ELSE gotoE block .)
    END             reduce using rule 41 (conditionA -> ELSE gotoE block .)
    }               reduce using rule 41 (conditionA -> ELSE gotoE block .)

