Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> INIT programA
Rule 2     programA -> programB END
Rule 3     programA -> END
Rule 4     programB -> workspace programC
Rule 5     programC -> programB
Rule 6     programC -> empty
Rule 7     workspace -> statute
Rule 8     workspace -> module
Rule 9     statute -> assign
Rule 10    statute -> condition
Rule 11    statute -> write
Rule 12    statute -> cycle
Rule 13    statute -> repeat
Rule 14    statute -> command
Rule 15    statute -> calling
Rule 16    statute -> pipeline
Rule 17    statute -> screen
Rule 18    module -> MOD # moduleID insertQuadMod moduleA endMod
Rule 19    moduleA -> ( vars ) block
Rule 20    moduleA -> block
Rule 21    moduleID -> ID
Rule 22    vars -> type ID varsA
Rule 23    varsA -> , vars
Rule 24    varsA -> empty
Rule 25    type -> INT
Rule 26    type -> FLOAT
Rule 27    type -> BOOL
Rule 28    calling -> # callID ( insertEra callingA
Rule 29    callID -> ID
Rule 30    insertEra -> <empty>
Rule 31    callingA -> callingB ) ;
Rule 32    callingA -> ) ;
Rule 33    callingB -> expression checkParam callingC
Rule 34    checkParam -> <empty>
Rule 35    callingC -> , sumXparam callingB
Rule 36    callingC -> empty
Rule 37    sumXparam -> <empty>
Rule 38    block -> { blockA
Rule 39    blockA -> blockB }
Rule 40    blockA -> }
Rule 41    blockB -> statute blockC
Rule 42    blockC -> blockB
Rule 43    blockC -> empty
Rule 44    assign -> ID = expression ;
Rule 45    condition -> IF ( expression ) gotoFalse block conditionA continueGo
Rule 46    conditionA -> ELSE gotoE block
Rule 47    conditionA -> empty
Rule 48    write -> ECHO writeA ;
Rule 49    writeA -> expression
Rule 50    writeA -> CTE_STRING
Rule 51    pipeline -> PIPE ID pipelineA
Rule 52    pipelineA -> [ pipelineB ] ;
Rule 53    pipelineA -> IN ( var_cte ) ;
Rule 54    pipelineA -> OUT ( ) ;
Rule 55    pipelineA -> COUNT ;
Rule 56    pipelineB -> exp pipelineC
Rule 57    pipelineC -> , pipelineB
Rule 58    pipelineC -> empty
Rule 59    command -> figure exp exp color ;
Rule 60    command -> SAMPLE commandA
Rule 61    commandA -> ON move exp CTE_INTEGER color ;
Rule 62    commandA -> OFF move exp ;
Rule 63    cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW
Rule 64    repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ;
Rule 65    repeatA -> command repeatB
Rule 66    repeatB -> repeatA
Rule 67    repeatB -> empty
Rule 68    expression -> exp = = exp
Rule 69    expression -> exp < > exp
Rule 70    expression -> exp < = exp
Rule 71    expression -> exp > = exp
Rule 72    expression -> exp > exp
Rule 73    expression -> exp < exp
Rule 74    expression -> exp AND exp
Rule 75    expression -> exp OR exp
Rule 76    expression -> exp empty
Rule 77    exp -> exp + exp
Rule 78    exp -> exp - exp
Rule 79    exp -> exp * exp
Rule 80    exp -> exp / exp
Rule 81    exp -> factor empty
Rule 82    factor -> ( expression )
Rule 83    factor -> var_cte
Rule 84    figure -> OVAL
Rule 85    figure -> TRIO
Rule 86    figure -> QUAD
Rule 87    figure -> ARC
Rule 88    move -> UP
Rule 89    move -> DOWN
Rule 90    move -> LEFT
Rule 91    move -> RIGHT
Rule 92    color -> RED
Rule 93    color -> YELLOW
Rule 94    color -> BLUE
Rule 95    color -> GREEN
Rule 96    color -> BLACK
Rule 97    color -> WHITE
Rule 98    color -> ORANGE
Rule 99    color -> PURPLE
Rule 100   color -> CYAN
Rule 101   screen -> WHERE
Rule 102   screen -> CLEAR
Rule 103   var_cte -> ID
Rule 104   var_cte -> CTE_INTEGER
Rule 105   var_cte -> CTE_FLOAT
Rule 106   var_cte -> TRUE
Rule 107   var_cte -> FALSE
Rule 108   gotoFalse -> <empty>
Rule 109   gotoE -> <empty>
Rule 110   gotoW -> <empty>
Rule 111   gotoR -> <empty>
Rule 112   continueGo -> <empty>
Rule 113   continueGoW -> <empty>
Rule 114   insertQuadMod -> <empty>
Rule 115   endMod -> <empty>
Rule 116   empty -> <empty>

Terminals, with rules where they appear

#                    : 18 28
(                    : 19 28 45 53 54 63 82
)                    : 19 31 32 45 53 54 63 82
*                    : 79
+                    : 77
,                    : 23 35 57
-                    : 78
/                    : 80
;                    : 31 32 44 48 52 53 54 55 59 61 62 64
<                    : 69 70 73
=                    : 44 68 68 70 71
>                    : 69 71 72
AND                  : 74
ARC                  : 87
BLACK                : 96
BLUE                 : 94
BOOL                 : 27
CLEAR                : 102
COUNT                : 55
CTE_FLOAT            : 105
CTE_INTEGER          : 61 64 104
CTE_STRING           : 50
CYAN                 : 100
DOWN                 : 89
ECHO                 : 48
ELSE                 : 46
END                  : 2 3
FALSE                : 107
FLOAT                : 26
GREEN                : 95
ID                   : 21 22 29 44 51 103
IF                   : 45
IN                   : 53
INIT                 : 1
INT                  : 25
LEFT                 : 90
MOD                  : 18
OFF                  : 62
ON                   : 61
OR                   : 75
ORANGE               : 98
OUT                  : 54
OVAL                 : 84
PIPE                 : 51
PURPLE               : 99
QUAD                 : 86
RED                  : 92
REPLAY               : 64
RIGHT                : 91
SAMPLE               : 60
TRIO                 : 85
TRUE                 : 106
UP                   : 88
WHERE                : 101
WHILE                : 63
WHITE                : 97
YELLOW               : 93
[                    : 52 64
]                    : 52 64
error                : 
{                    : 38
}                    : 39 40

Nonterminals, with rules where they appear

assign               : 9
block                : 19 20 45 46 63
blockA               : 38
blockB               : 39 42
blockC               : 41
callID               : 28
calling              : 15
callingA             : 28
callingB             : 31 35
callingC             : 33
checkParam           : 33
color                : 59 61
command              : 14 65
commandA             : 60
condition            : 10
conditionA           : 45
continueGo           : 45
continueGoW          : 63
cycle                : 12
empty                : 6 24 36 43 47 58 67 76 81
endMod               : 18
exp                  : 56 59 59 61 62 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 77 77 78 78 79 79 80 80
expression           : 33 44 45 49 63 82
factor               : 81
figure               : 59
gotoE                : 46
gotoFalse            : 45 63
gotoR                : 64
gotoW                : 63
insertEra            : 28
insertQuadMod        : 18
module               : 8
moduleA              : 18
moduleID             : 18
move                 : 61 62
pipeline             : 16
pipelineA            : 51
pipelineB            : 52 57
pipelineC            : 56
program              : 0
programA             : 1
programB             : 2 5
programC             : 4
repeat               : 13
repeatA              : 64 66
repeatB              : 65
screen               : 17
statute              : 7 41
sumXparam            : 35
type                 : 22
var_cte              : 53 83
vars                 : 19 23
varsA                : 22
workspace            : 4
write                : 11
writeA               : 48

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . INIT programA

    INIT            shift and go to state 1

    program                        shift and go to state 2

state 1

    (1) program -> INIT . programA
    (2) programA -> . programB END
    (3) programA -> . END
    (4) programB -> . workspace programC
    (7) workspace -> . statute
    (8) workspace -> . module
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . cycle
    (13) statute -> . repeat
    (14) statute -> . command
    (15) statute -> . calling
    (16) statute -> . pipeline
    (17) statute -> . screen
    (18) module -> . MOD # moduleID insertQuadMod moduleA endMod
    (44) assign -> . ID = expression ;
    (45) condition -> . IF ( expression ) gotoFalse block conditionA continueGo
    (48) write -> . ECHO writeA ;
    (63) cycle -> . WHILE gotoW ( expression ) gotoFalse block continueGoW
    (64) repeat -> . REPLAY CTE_INTEGER gotoR [ repeatA ] ;
    (59) command -> . figure exp exp color ;
    (60) command -> . SAMPLE commandA
    (28) calling -> . # callID ( insertEra callingA
    (51) pipeline -> . PIPE ID pipelineA
    (101) screen -> . WHERE
    (102) screen -> . CLEAR
    (84) figure -> . OVAL
    (85) figure -> . TRIO
    (86) figure -> . QUAD
    (87) figure -> . ARC

    END             shift and go to state 16
    MOD             shift and go to state 32
    ID              shift and go to state 23
    IF              shift and go to state 12
    ECHO            shift and go to state 18
    WHILE           shift and go to state 6
    REPLAY          shift and go to state 7
    SAMPLE          shift and go to state 19
    #               shift and go to state 9
    PIPE            shift and go to state 8
    WHERE           shift and go to state 28
    CLEAR           shift and go to state 13
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    module                         shift and go to state 4
    write                          shift and go to state 10
    condition                      shift and go to state 11
    repeat                         shift and go to state 15
    screen                         shift and go to state 17
    programA                       shift and go to state 20
    programB                       shift and go to state 21
    cycle                          shift and go to state 24
    statute                        shift and go to state 25
    pipeline                       shift and go to state 26
    calling                        shift and go to state 27
    command                        shift and go to state 30
    workspace                      shift and go to state 31
    assign                         shift and go to state 33

state 2

    (0) S' -> program .



state 3

    (59) command -> figure . exp exp color ;
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 39
    factor                         shift and go to state 40

state 4

    (8) workspace -> module .

    MOD             reduce using rule 8 (workspace -> module .)
    ID              reduce using rule 8 (workspace -> module .)
    IF              reduce using rule 8 (workspace -> module .)
    ECHO            reduce using rule 8 (workspace -> module .)
    WHILE           reduce using rule 8 (workspace -> module .)
    REPLAY          reduce using rule 8 (workspace -> module .)
    SAMPLE          reduce using rule 8 (workspace -> module .)
    #               reduce using rule 8 (workspace -> module .)
    PIPE            reduce using rule 8 (workspace -> module .)
    WHERE           reduce using rule 8 (workspace -> module .)
    CLEAR           reduce using rule 8 (workspace -> module .)
    OVAL            reduce using rule 8 (workspace -> module .)
    TRIO            reduce using rule 8 (workspace -> module .)
    QUAD            reduce using rule 8 (workspace -> module .)
    ARC             reduce using rule 8 (workspace -> module .)
    END             reduce using rule 8 (workspace -> module .)


state 5

    (84) figure -> OVAL .

    (               reduce using rule 84 (figure -> OVAL .)
    ID              reduce using rule 84 (figure -> OVAL .)
    CTE_INTEGER     reduce using rule 84 (figure -> OVAL .)
    CTE_FLOAT       reduce using rule 84 (figure -> OVAL .)
    TRUE            reduce using rule 84 (figure -> OVAL .)
    FALSE           reduce using rule 84 (figure -> OVAL .)


state 6

    (63) cycle -> WHILE . gotoW ( expression ) gotoFalse block continueGoW
    (110) gotoW -> .

    (               reduce using rule 110 (gotoW -> .)

    gotoW                          shift and go to state 43

state 7

    (64) repeat -> REPLAY . CTE_INTEGER gotoR [ repeatA ] ;

    CTE_INTEGER     shift and go to state 44


state 8

    (51) pipeline -> PIPE . ID pipelineA

    ID              shift and go to state 45


state 9

    (28) calling -> # . callID ( insertEra callingA
    (29) callID -> . ID

    ID              shift and go to state 47

    callID                         shift and go to state 46

state 10

    (11) statute -> write .

    MOD             reduce using rule 11 (statute -> write .)
    ID              reduce using rule 11 (statute -> write .)
    IF              reduce using rule 11 (statute -> write .)
    ECHO            reduce using rule 11 (statute -> write .)
    WHILE           reduce using rule 11 (statute -> write .)
    REPLAY          reduce using rule 11 (statute -> write .)
    SAMPLE          reduce using rule 11 (statute -> write .)
    #               reduce using rule 11 (statute -> write .)
    PIPE            reduce using rule 11 (statute -> write .)
    WHERE           reduce using rule 11 (statute -> write .)
    CLEAR           reduce using rule 11 (statute -> write .)
    OVAL            reduce using rule 11 (statute -> write .)
    TRIO            reduce using rule 11 (statute -> write .)
    QUAD            reduce using rule 11 (statute -> write .)
    ARC             reduce using rule 11 (statute -> write .)
    END             reduce using rule 11 (statute -> write .)
    }               reduce using rule 11 (statute -> write .)


state 11

    (10) statute -> condition .

    MOD             reduce using rule 10 (statute -> condition .)
    ID              reduce using rule 10 (statute -> condition .)
    IF              reduce using rule 10 (statute -> condition .)
    ECHO            reduce using rule 10 (statute -> condition .)
    WHILE           reduce using rule 10 (statute -> condition .)
    REPLAY          reduce using rule 10 (statute -> condition .)
    SAMPLE          reduce using rule 10 (statute -> condition .)
    #               reduce using rule 10 (statute -> condition .)
    PIPE            reduce using rule 10 (statute -> condition .)
    WHERE           reduce using rule 10 (statute -> condition .)
    CLEAR           reduce using rule 10 (statute -> condition .)
    OVAL            reduce using rule 10 (statute -> condition .)
    TRIO            reduce using rule 10 (statute -> condition .)
    QUAD            reduce using rule 10 (statute -> condition .)
    ARC             reduce using rule 10 (statute -> condition .)
    END             reduce using rule 10 (statute -> condition .)
    }               reduce using rule 10 (statute -> condition .)


state 12

    (45) condition -> IF . ( expression ) gotoFalse block conditionA continueGo

    (               shift and go to state 48


state 13

    (102) screen -> CLEAR .

    ID              reduce using rule 102 (screen -> CLEAR .)
    IF              reduce using rule 102 (screen -> CLEAR .)
    ECHO            reduce using rule 102 (screen -> CLEAR .)
    WHILE           reduce using rule 102 (screen -> CLEAR .)
    REPLAY          reduce using rule 102 (screen -> CLEAR .)
    SAMPLE          reduce using rule 102 (screen -> CLEAR .)
    #               reduce using rule 102 (screen -> CLEAR .)
    PIPE            reduce using rule 102 (screen -> CLEAR .)
    WHERE           reduce using rule 102 (screen -> CLEAR .)
    CLEAR           reduce using rule 102 (screen -> CLEAR .)
    OVAL            reduce using rule 102 (screen -> CLEAR .)
    TRIO            reduce using rule 102 (screen -> CLEAR .)
    QUAD            reduce using rule 102 (screen -> CLEAR .)
    ARC             reduce using rule 102 (screen -> CLEAR .)
    }               reduce using rule 102 (screen -> CLEAR .)
    MOD             reduce using rule 102 (screen -> CLEAR .)
    END             reduce using rule 102 (screen -> CLEAR .)


state 14

    (85) figure -> TRIO .

    (               reduce using rule 85 (figure -> TRIO .)
    ID              reduce using rule 85 (figure -> TRIO .)
    CTE_INTEGER     reduce using rule 85 (figure -> TRIO .)
    CTE_FLOAT       reduce using rule 85 (figure -> TRIO .)
    TRUE            reduce using rule 85 (figure -> TRIO .)
    FALSE           reduce using rule 85 (figure -> TRIO .)


state 15

    (13) statute -> repeat .

    MOD             reduce using rule 13 (statute -> repeat .)
    ID              reduce using rule 13 (statute -> repeat .)
    IF              reduce using rule 13 (statute -> repeat .)
    ECHO            reduce using rule 13 (statute -> repeat .)
    WHILE           reduce using rule 13 (statute -> repeat .)
    REPLAY          reduce using rule 13 (statute -> repeat .)
    SAMPLE          reduce using rule 13 (statute -> repeat .)
    #               reduce using rule 13 (statute -> repeat .)
    PIPE            reduce using rule 13 (statute -> repeat .)
    WHERE           reduce using rule 13 (statute -> repeat .)
    CLEAR           reduce using rule 13 (statute -> repeat .)
    OVAL            reduce using rule 13 (statute -> repeat .)
    TRIO            reduce using rule 13 (statute -> repeat .)
    QUAD            reduce using rule 13 (statute -> repeat .)
    ARC             reduce using rule 13 (statute -> repeat .)
    END             reduce using rule 13 (statute -> repeat .)
    }               reduce using rule 13 (statute -> repeat .)


state 16

    (3) programA -> END .

    $end            reduce using rule 3 (programA -> END .)


state 17

    (17) statute -> screen .

    MOD             reduce using rule 17 (statute -> screen .)
    ID              reduce using rule 17 (statute -> screen .)
    IF              reduce using rule 17 (statute -> screen .)
    ECHO            reduce using rule 17 (statute -> screen .)
    WHILE           reduce using rule 17 (statute -> screen .)
    REPLAY          reduce using rule 17 (statute -> screen .)
    SAMPLE          reduce using rule 17 (statute -> screen .)
    #               reduce using rule 17 (statute -> screen .)
    PIPE            reduce using rule 17 (statute -> screen .)
    WHERE           reduce using rule 17 (statute -> screen .)
    CLEAR           reduce using rule 17 (statute -> screen .)
    OVAL            reduce using rule 17 (statute -> screen .)
    TRIO            reduce using rule 17 (statute -> screen .)
    QUAD            reduce using rule 17 (statute -> screen .)
    ARC             reduce using rule 17 (statute -> screen .)
    END             reduce using rule 17 (statute -> screen .)
    }               reduce using rule 17 (statute -> screen .)


state 18

    (48) write -> ECHO . writeA ;
    (49) writeA -> . expression
    (50) writeA -> . CTE_STRING
    (68) expression -> . exp = = exp
    (69) expression -> . exp < > exp
    (70) expression -> . exp < = exp
    (71) expression -> . exp > = exp
    (72) expression -> . exp > exp
    (73) expression -> . exp < exp
    (74) expression -> . exp AND exp
    (75) expression -> . exp OR exp
    (76) expression -> . exp empty
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    CTE_STRING      shift and go to state 50
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 51
    factor                         shift and go to state 40
    writeA                         shift and go to state 49
    expression                     shift and go to state 52

state 19

    (60) command -> SAMPLE . commandA
    (61) commandA -> . ON move exp CTE_INTEGER color ;
    (62) commandA -> . OFF move exp ;

    ON              shift and go to state 55
    OFF             shift and go to state 54

    commandA                       shift and go to state 53

state 20

    (1) program -> INIT programA .

    $end            reduce using rule 1 (program -> INIT programA .)


state 21

    (2) programA -> programB . END

    END             shift and go to state 56


state 22

    (86) figure -> QUAD .

    (               reduce using rule 86 (figure -> QUAD .)
    ID              reduce using rule 86 (figure -> QUAD .)
    CTE_INTEGER     reduce using rule 86 (figure -> QUAD .)
    CTE_FLOAT       reduce using rule 86 (figure -> QUAD .)
    TRUE            reduce using rule 86 (figure -> QUAD .)
    FALSE           reduce using rule 86 (figure -> QUAD .)


state 23

    (44) assign -> ID . = expression ;

    =               shift and go to state 57


state 24

    (12) statute -> cycle .

    MOD             reduce using rule 12 (statute -> cycle .)
    ID              reduce using rule 12 (statute -> cycle .)
    IF              reduce using rule 12 (statute -> cycle .)
    ECHO            reduce using rule 12 (statute -> cycle .)
    WHILE           reduce using rule 12 (statute -> cycle .)
    REPLAY          reduce using rule 12 (statute -> cycle .)
    SAMPLE          reduce using rule 12 (statute -> cycle .)
    #               reduce using rule 12 (statute -> cycle .)
    PIPE            reduce using rule 12 (statute -> cycle .)
    WHERE           reduce using rule 12 (statute -> cycle .)
    CLEAR           reduce using rule 12 (statute -> cycle .)
    OVAL            reduce using rule 12 (statute -> cycle .)
    TRIO            reduce using rule 12 (statute -> cycle .)
    QUAD            reduce using rule 12 (statute -> cycle .)
    ARC             reduce using rule 12 (statute -> cycle .)
    END             reduce using rule 12 (statute -> cycle .)
    }               reduce using rule 12 (statute -> cycle .)


state 25

    (7) workspace -> statute .

    MOD             reduce using rule 7 (workspace -> statute .)
    ID              reduce using rule 7 (workspace -> statute .)
    IF              reduce using rule 7 (workspace -> statute .)
    ECHO            reduce using rule 7 (workspace -> statute .)
    WHILE           reduce using rule 7 (workspace -> statute .)
    REPLAY          reduce using rule 7 (workspace -> statute .)
    SAMPLE          reduce using rule 7 (workspace -> statute .)
    #               reduce using rule 7 (workspace -> statute .)
    PIPE            reduce using rule 7 (workspace -> statute .)
    WHERE           reduce using rule 7 (workspace -> statute .)
    CLEAR           reduce using rule 7 (workspace -> statute .)
    OVAL            reduce using rule 7 (workspace -> statute .)
    TRIO            reduce using rule 7 (workspace -> statute .)
    QUAD            reduce using rule 7 (workspace -> statute .)
    ARC             reduce using rule 7 (workspace -> statute .)
    END             reduce using rule 7 (workspace -> statute .)


state 26

    (16) statute -> pipeline .

    MOD             reduce using rule 16 (statute -> pipeline .)
    ID              reduce using rule 16 (statute -> pipeline .)
    IF              reduce using rule 16 (statute -> pipeline .)
    ECHO            reduce using rule 16 (statute -> pipeline .)
    WHILE           reduce using rule 16 (statute -> pipeline .)
    REPLAY          reduce using rule 16 (statute -> pipeline .)
    SAMPLE          reduce using rule 16 (statute -> pipeline .)
    #               reduce using rule 16 (statute -> pipeline .)
    PIPE            reduce using rule 16 (statute -> pipeline .)
    WHERE           reduce using rule 16 (statute -> pipeline .)
    CLEAR           reduce using rule 16 (statute -> pipeline .)
    OVAL            reduce using rule 16 (statute -> pipeline .)
    TRIO            reduce using rule 16 (statute -> pipeline .)
    QUAD            reduce using rule 16 (statute -> pipeline .)
    ARC             reduce using rule 16 (statute -> pipeline .)
    END             reduce using rule 16 (statute -> pipeline .)
    }               reduce using rule 16 (statute -> pipeline .)


state 27

    (15) statute -> calling .

    MOD             reduce using rule 15 (statute -> calling .)
    ID              reduce using rule 15 (statute -> calling .)
    IF              reduce using rule 15 (statute -> calling .)
    ECHO            reduce using rule 15 (statute -> calling .)
    WHILE           reduce using rule 15 (statute -> calling .)
    REPLAY          reduce using rule 15 (statute -> calling .)
    SAMPLE          reduce using rule 15 (statute -> calling .)
    #               reduce using rule 15 (statute -> calling .)
    PIPE            reduce using rule 15 (statute -> calling .)
    WHERE           reduce using rule 15 (statute -> calling .)
    CLEAR           reduce using rule 15 (statute -> calling .)
    OVAL            reduce using rule 15 (statute -> calling .)
    TRIO            reduce using rule 15 (statute -> calling .)
    QUAD            reduce using rule 15 (statute -> calling .)
    ARC             reduce using rule 15 (statute -> calling .)
    END             reduce using rule 15 (statute -> calling .)
    }               reduce using rule 15 (statute -> calling .)


state 28

    (101) screen -> WHERE .

    ID              reduce using rule 101 (screen -> WHERE .)
    IF              reduce using rule 101 (screen -> WHERE .)
    ECHO            reduce using rule 101 (screen -> WHERE .)
    WHILE           reduce using rule 101 (screen -> WHERE .)
    REPLAY          reduce using rule 101 (screen -> WHERE .)
    SAMPLE          reduce using rule 101 (screen -> WHERE .)
    #               reduce using rule 101 (screen -> WHERE .)
    PIPE            reduce using rule 101 (screen -> WHERE .)
    WHERE           reduce using rule 101 (screen -> WHERE .)
    CLEAR           reduce using rule 101 (screen -> WHERE .)
    OVAL            reduce using rule 101 (screen -> WHERE .)
    TRIO            reduce using rule 101 (screen -> WHERE .)
    QUAD            reduce using rule 101 (screen -> WHERE .)
    ARC             reduce using rule 101 (screen -> WHERE .)
    }               reduce using rule 101 (screen -> WHERE .)
    MOD             reduce using rule 101 (screen -> WHERE .)
    END             reduce using rule 101 (screen -> WHERE .)


state 29

    (87) figure -> ARC .

    (               reduce using rule 87 (figure -> ARC .)
    ID              reduce using rule 87 (figure -> ARC .)
    CTE_INTEGER     reduce using rule 87 (figure -> ARC .)
    CTE_FLOAT       reduce using rule 87 (figure -> ARC .)
    TRUE            reduce using rule 87 (figure -> ARC .)
    FALSE           reduce using rule 87 (figure -> ARC .)


state 30

    (14) statute -> command .

    MOD             reduce using rule 14 (statute -> command .)
    ID              reduce using rule 14 (statute -> command .)
    IF              reduce using rule 14 (statute -> command .)
    ECHO            reduce using rule 14 (statute -> command .)
    WHILE           reduce using rule 14 (statute -> command .)
    REPLAY          reduce using rule 14 (statute -> command .)
    SAMPLE          reduce using rule 14 (statute -> command .)
    #               reduce using rule 14 (statute -> command .)
    PIPE            reduce using rule 14 (statute -> command .)
    WHERE           reduce using rule 14 (statute -> command .)
    CLEAR           reduce using rule 14 (statute -> command .)
    OVAL            reduce using rule 14 (statute -> command .)
    TRIO            reduce using rule 14 (statute -> command .)
    QUAD            reduce using rule 14 (statute -> command .)
    ARC             reduce using rule 14 (statute -> command .)
    END             reduce using rule 14 (statute -> command .)
    }               reduce using rule 14 (statute -> command .)


state 31

    (4) programB -> workspace . programC
    (5) programC -> . programB
    (6) programC -> . empty
    (4) programB -> . workspace programC
    (116) empty -> .
    (7) workspace -> . statute
    (8) workspace -> . module
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . cycle
    (13) statute -> . repeat
    (14) statute -> . command
    (15) statute -> . calling
    (16) statute -> . pipeline
    (17) statute -> . screen
    (18) module -> . MOD # moduleID insertQuadMod moduleA endMod
    (44) assign -> . ID = expression ;
    (45) condition -> . IF ( expression ) gotoFalse block conditionA continueGo
    (48) write -> . ECHO writeA ;
    (63) cycle -> . WHILE gotoW ( expression ) gotoFalse block continueGoW
    (64) repeat -> . REPLAY CTE_INTEGER gotoR [ repeatA ] ;
    (59) command -> . figure exp exp color ;
    (60) command -> . SAMPLE commandA
    (28) calling -> . # callID ( insertEra callingA
    (51) pipeline -> . PIPE ID pipelineA
    (101) screen -> . WHERE
    (102) screen -> . CLEAR
    (84) figure -> . OVAL
    (85) figure -> . TRIO
    (86) figure -> . QUAD
    (87) figure -> . ARC

    END             reduce using rule 116 (empty -> .)
    MOD             shift and go to state 32
    ID              shift and go to state 23
    IF              shift and go to state 12
    ECHO            shift and go to state 18
    WHILE           shift and go to state 6
    REPLAY          shift and go to state 7
    SAMPLE          shift and go to state 19
    #               shift and go to state 9
    PIPE            shift and go to state 8
    WHERE           shift and go to state 28
    CLEAR           shift and go to state 13
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    module                         shift and go to state 4
    write                          shift and go to state 10
    condition                      shift and go to state 11
    empty                          shift and go to state 58
    repeat                         shift and go to state 15
    screen                         shift and go to state 17
    programB                       shift and go to state 59
    programC                       shift and go to state 60
    cycle                          shift and go to state 24
    statute                        shift and go to state 25
    pipeline                       shift and go to state 26
    calling                        shift and go to state 27
    command                        shift and go to state 30
    workspace                      shift and go to state 31
    assign                         shift and go to state 33

state 32

    (18) module -> MOD . # moduleID insertQuadMod moduleA endMod

    #               shift and go to state 61


state 33

    (9) statute -> assign .

    MOD             reduce using rule 9 (statute -> assign .)
    ID              reduce using rule 9 (statute -> assign .)
    IF              reduce using rule 9 (statute -> assign .)
    ECHO            reduce using rule 9 (statute -> assign .)
    WHILE           reduce using rule 9 (statute -> assign .)
    REPLAY          reduce using rule 9 (statute -> assign .)
    SAMPLE          reduce using rule 9 (statute -> assign .)
    #               reduce using rule 9 (statute -> assign .)
    PIPE            reduce using rule 9 (statute -> assign .)
    WHERE           reduce using rule 9 (statute -> assign .)
    CLEAR           reduce using rule 9 (statute -> assign .)
    OVAL            reduce using rule 9 (statute -> assign .)
    TRIO            reduce using rule 9 (statute -> assign .)
    QUAD            reduce using rule 9 (statute -> assign .)
    ARC             reduce using rule 9 (statute -> assign .)
    END             reduce using rule 9 (statute -> assign .)
    }               reduce using rule 9 (statute -> assign .)


state 34

    (105) var_cte -> CTE_FLOAT .

    =               reduce using rule 105 (var_cte -> CTE_FLOAT .)
    <               reduce using rule 105 (var_cte -> CTE_FLOAT .)
    >               reduce using rule 105 (var_cte -> CTE_FLOAT .)
    AND             reduce using rule 105 (var_cte -> CTE_FLOAT .)
    OR              reduce using rule 105 (var_cte -> CTE_FLOAT .)
    +               reduce using rule 105 (var_cte -> CTE_FLOAT .)
    -               reduce using rule 105 (var_cte -> CTE_FLOAT .)
    *               reduce using rule 105 (var_cte -> CTE_FLOAT .)
    /               reduce using rule 105 (var_cte -> CTE_FLOAT .)
    ;               reduce using rule 105 (var_cte -> CTE_FLOAT .)
    ,               reduce using rule 105 (var_cte -> CTE_FLOAT .)
    )               reduce using rule 105 (var_cte -> CTE_FLOAT .)
    (               reduce using rule 105 (var_cte -> CTE_FLOAT .)
    ID              reduce using rule 105 (var_cte -> CTE_FLOAT .)
    CTE_INTEGER     reduce using rule 105 (var_cte -> CTE_FLOAT .)
    CTE_FLOAT       reduce using rule 105 (var_cte -> CTE_FLOAT .)
    TRUE            reduce using rule 105 (var_cte -> CTE_FLOAT .)
    FALSE           reduce using rule 105 (var_cte -> CTE_FLOAT .)
    RED             reduce using rule 105 (var_cte -> CTE_FLOAT .)
    YELLOW          reduce using rule 105 (var_cte -> CTE_FLOAT .)
    BLUE            reduce using rule 105 (var_cte -> CTE_FLOAT .)
    GREEN           reduce using rule 105 (var_cte -> CTE_FLOAT .)
    BLACK           reduce using rule 105 (var_cte -> CTE_FLOAT .)
    WHITE           reduce using rule 105 (var_cte -> CTE_FLOAT .)
    ORANGE          reduce using rule 105 (var_cte -> CTE_FLOAT .)
    PURPLE          reduce using rule 105 (var_cte -> CTE_FLOAT .)
    CYAN            reduce using rule 105 (var_cte -> CTE_FLOAT .)
    ]               reduce using rule 105 (var_cte -> CTE_FLOAT .)


state 35

    (82) factor -> ( . expression )
    (68) expression -> . exp = = exp
    (69) expression -> . exp < > exp
    (70) expression -> . exp < = exp
    (71) expression -> . exp > = exp
    (72) expression -> . exp > exp
    (73) expression -> . exp < exp
    (74) expression -> . exp AND exp
    (75) expression -> . exp OR exp
    (76) expression -> . exp empty
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    expression                     shift and go to state 62
    exp                            shift and go to state 51
    factor                         shift and go to state 40

state 36

    (83) factor -> var_cte .

    =               reduce using rule 83 (factor -> var_cte .)
    <               reduce using rule 83 (factor -> var_cte .)
    >               reduce using rule 83 (factor -> var_cte .)
    AND             reduce using rule 83 (factor -> var_cte .)
    OR              reduce using rule 83 (factor -> var_cte .)
    +               reduce using rule 83 (factor -> var_cte .)
    -               reduce using rule 83 (factor -> var_cte .)
    *               reduce using rule 83 (factor -> var_cte .)
    /               reduce using rule 83 (factor -> var_cte .)
    ;               reduce using rule 83 (factor -> var_cte .)
    ,               reduce using rule 83 (factor -> var_cte .)
    ]               reduce using rule 83 (factor -> var_cte .)
    )               reduce using rule 83 (factor -> var_cte .)
    (               reduce using rule 83 (factor -> var_cte .)
    ID              reduce using rule 83 (factor -> var_cte .)
    CTE_INTEGER     reduce using rule 83 (factor -> var_cte .)
    CTE_FLOAT       reduce using rule 83 (factor -> var_cte .)
    TRUE            reduce using rule 83 (factor -> var_cte .)
    FALSE           reduce using rule 83 (factor -> var_cte .)
    RED             reduce using rule 83 (factor -> var_cte .)
    YELLOW          reduce using rule 83 (factor -> var_cte .)
    BLUE            reduce using rule 83 (factor -> var_cte .)
    GREEN           reduce using rule 83 (factor -> var_cte .)
    BLACK           reduce using rule 83 (factor -> var_cte .)
    WHITE           reduce using rule 83 (factor -> var_cte .)
    ORANGE          reduce using rule 83 (factor -> var_cte .)
    PURPLE          reduce using rule 83 (factor -> var_cte .)
    CYAN            reduce using rule 83 (factor -> var_cte .)


state 37

    (104) var_cte -> CTE_INTEGER .

    =               reduce using rule 104 (var_cte -> CTE_INTEGER .)
    <               reduce using rule 104 (var_cte -> CTE_INTEGER .)
    >               reduce using rule 104 (var_cte -> CTE_INTEGER .)
    AND             reduce using rule 104 (var_cte -> CTE_INTEGER .)
    OR              reduce using rule 104 (var_cte -> CTE_INTEGER .)
    +               reduce using rule 104 (var_cte -> CTE_INTEGER .)
    -               reduce using rule 104 (var_cte -> CTE_INTEGER .)
    *               reduce using rule 104 (var_cte -> CTE_INTEGER .)
    /               reduce using rule 104 (var_cte -> CTE_INTEGER .)
    ;               reduce using rule 104 (var_cte -> CTE_INTEGER .)
    ,               reduce using rule 104 (var_cte -> CTE_INTEGER .)
    )               reduce using rule 104 (var_cte -> CTE_INTEGER .)
    (               reduce using rule 104 (var_cte -> CTE_INTEGER .)
    ID              reduce using rule 104 (var_cte -> CTE_INTEGER .)
    CTE_INTEGER     reduce using rule 104 (var_cte -> CTE_INTEGER .)
    CTE_FLOAT       reduce using rule 104 (var_cte -> CTE_INTEGER .)
    TRUE            reduce using rule 104 (var_cte -> CTE_INTEGER .)
    FALSE           reduce using rule 104 (var_cte -> CTE_INTEGER .)
    RED             reduce using rule 104 (var_cte -> CTE_INTEGER .)
    YELLOW          reduce using rule 104 (var_cte -> CTE_INTEGER .)
    BLUE            reduce using rule 104 (var_cte -> CTE_INTEGER .)
    GREEN           reduce using rule 104 (var_cte -> CTE_INTEGER .)
    BLACK           reduce using rule 104 (var_cte -> CTE_INTEGER .)
    WHITE           reduce using rule 104 (var_cte -> CTE_INTEGER .)
    ORANGE          reduce using rule 104 (var_cte -> CTE_INTEGER .)
    PURPLE          reduce using rule 104 (var_cte -> CTE_INTEGER .)
    CYAN            reduce using rule 104 (var_cte -> CTE_INTEGER .)
    ]               reduce using rule 104 (var_cte -> CTE_INTEGER .)


state 38

    (106) var_cte -> TRUE .

    =               reduce using rule 106 (var_cte -> TRUE .)
    <               reduce using rule 106 (var_cte -> TRUE .)
    >               reduce using rule 106 (var_cte -> TRUE .)
    AND             reduce using rule 106 (var_cte -> TRUE .)
    OR              reduce using rule 106 (var_cte -> TRUE .)
    +               reduce using rule 106 (var_cte -> TRUE .)
    -               reduce using rule 106 (var_cte -> TRUE .)
    *               reduce using rule 106 (var_cte -> TRUE .)
    /               reduce using rule 106 (var_cte -> TRUE .)
    ;               reduce using rule 106 (var_cte -> TRUE .)
    ,               reduce using rule 106 (var_cte -> TRUE .)
    )               reduce using rule 106 (var_cte -> TRUE .)
    (               reduce using rule 106 (var_cte -> TRUE .)
    ID              reduce using rule 106 (var_cte -> TRUE .)
    CTE_INTEGER     reduce using rule 106 (var_cte -> TRUE .)
    CTE_FLOAT       reduce using rule 106 (var_cte -> TRUE .)
    TRUE            reduce using rule 106 (var_cte -> TRUE .)
    FALSE           reduce using rule 106 (var_cte -> TRUE .)
    RED             reduce using rule 106 (var_cte -> TRUE .)
    YELLOW          reduce using rule 106 (var_cte -> TRUE .)
    BLUE            reduce using rule 106 (var_cte -> TRUE .)
    GREEN           reduce using rule 106 (var_cte -> TRUE .)
    BLACK           reduce using rule 106 (var_cte -> TRUE .)
    WHITE           reduce using rule 106 (var_cte -> TRUE .)
    ORANGE          reduce using rule 106 (var_cte -> TRUE .)
    PURPLE          reduce using rule 106 (var_cte -> TRUE .)
    CYAN            reduce using rule 106 (var_cte -> TRUE .)
    ]               reduce using rule 106 (var_cte -> TRUE .)


state 39

    (59) command -> figure exp . exp color ;
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 67
    factor                         shift and go to state 40

state 40

    (81) exp -> factor . empty
    (116) empty -> .

    +               reduce using rule 116 (empty -> .)
    -               reduce using rule 116 (empty -> .)
    *               reduce using rule 116 (empty -> .)
    /               reduce using rule 116 (empty -> .)
    (               reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    CTE_INTEGER     reduce using rule 116 (empty -> .)
    CTE_FLOAT       reduce using rule 116 (empty -> .)
    TRUE            reduce using rule 116 (empty -> .)
    FALSE           reduce using rule 116 (empty -> .)
    =               reduce using rule 116 (empty -> .)
    <               reduce using rule 116 (empty -> .)
    >               reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    ;               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    RED             reduce using rule 116 (empty -> .)
    YELLOW          reduce using rule 116 (empty -> .)
    BLUE            reduce using rule 116 (empty -> .)
    GREEN           reduce using rule 116 (empty -> .)
    BLACK           reduce using rule 116 (empty -> .)
    WHITE           reduce using rule 116 (empty -> .)
    ORANGE          reduce using rule 116 (empty -> .)
    PURPLE          reduce using rule 116 (empty -> .)
    CYAN            reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)
    ]               reduce using rule 116 (empty -> .)

    empty                          shift and go to state 68

state 41

    (107) var_cte -> FALSE .

    =               reduce using rule 107 (var_cte -> FALSE .)
    <               reduce using rule 107 (var_cte -> FALSE .)
    >               reduce using rule 107 (var_cte -> FALSE .)
    AND             reduce using rule 107 (var_cte -> FALSE .)
    OR              reduce using rule 107 (var_cte -> FALSE .)
    +               reduce using rule 107 (var_cte -> FALSE .)
    -               reduce using rule 107 (var_cte -> FALSE .)
    *               reduce using rule 107 (var_cte -> FALSE .)
    /               reduce using rule 107 (var_cte -> FALSE .)
    ;               reduce using rule 107 (var_cte -> FALSE .)
    ,               reduce using rule 107 (var_cte -> FALSE .)
    )               reduce using rule 107 (var_cte -> FALSE .)
    (               reduce using rule 107 (var_cte -> FALSE .)
    ID              reduce using rule 107 (var_cte -> FALSE .)
    CTE_INTEGER     reduce using rule 107 (var_cte -> FALSE .)
    CTE_FLOAT       reduce using rule 107 (var_cte -> FALSE .)
    TRUE            reduce using rule 107 (var_cte -> FALSE .)
    FALSE           reduce using rule 107 (var_cte -> FALSE .)
    RED             reduce using rule 107 (var_cte -> FALSE .)
    YELLOW          reduce using rule 107 (var_cte -> FALSE .)
    BLUE            reduce using rule 107 (var_cte -> FALSE .)
    GREEN           reduce using rule 107 (var_cte -> FALSE .)
    BLACK           reduce using rule 107 (var_cte -> FALSE .)
    WHITE           reduce using rule 107 (var_cte -> FALSE .)
    ORANGE          reduce using rule 107 (var_cte -> FALSE .)
    PURPLE          reduce using rule 107 (var_cte -> FALSE .)
    CYAN            reduce using rule 107 (var_cte -> FALSE .)
    ]               reduce using rule 107 (var_cte -> FALSE .)


state 42

    (103) var_cte -> ID .

    =               reduce using rule 103 (var_cte -> ID .)
    <               reduce using rule 103 (var_cte -> ID .)
    >               reduce using rule 103 (var_cte -> ID .)
    AND             reduce using rule 103 (var_cte -> ID .)
    OR              reduce using rule 103 (var_cte -> ID .)
    +               reduce using rule 103 (var_cte -> ID .)
    -               reduce using rule 103 (var_cte -> ID .)
    *               reduce using rule 103 (var_cte -> ID .)
    /               reduce using rule 103 (var_cte -> ID .)
    ;               reduce using rule 103 (var_cte -> ID .)
    ,               reduce using rule 103 (var_cte -> ID .)
    )               reduce using rule 103 (var_cte -> ID .)
    (               reduce using rule 103 (var_cte -> ID .)
    ID              reduce using rule 103 (var_cte -> ID .)
    CTE_INTEGER     reduce using rule 103 (var_cte -> ID .)
    CTE_FLOAT       reduce using rule 103 (var_cte -> ID .)
    TRUE            reduce using rule 103 (var_cte -> ID .)
    FALSE           reduce using rule 103 (var_cte -> ID .)
    RED             reduce using rule 103 (var_cte -> ID .)
    YELLOW          reduce using rule 103 (var_cte -> ID .)
    BLUE            reduce using rule 103 (var_cte -> ID .)
    GREEN           reduce using rule 103 (var_cte -> ID .)
    BLACK           reduce using rule 103 (var_cte -> ID .)
    WHITE           reduce using rule 103 (var_cte -> ID .)
    ORANGE          reduce using rule 103 (var_cte -> ID .)
    PURPLE          reduce using rule 103 (var_cte -> ID .)
    CYAN            reduce using rule 103 (var_cte -> ID .)
    ]               reduce using rule 103 (var_cte -> ID .)


state 43

    (63) cycle -> WHILE gotoW . ( expression ) gotoFalse block continueGoW

    (               shift and go to state 69


state 44

    (64) repeat -> REPLAY CTE_INTEGER . gotoR [ repeatA ] ;
    (111) gotoR -> .

    [               reduce using rule 111 (gotoR -> .)

    gotoR                          shift and go to state 70

state 45

    (51) pipeline -> PIPE ID . pipelineA
    (52) pipelineA -> . [ pipelineB ] ;
    (53) pipelineA -> . IN ( var_cte ) ;
    (54) pipelineA -> . OUT ( ) ;
    (55) pipelineA -> . COUNT ;

    [               shift and go to state 74
    IN              shift and go to state 72
    OUT             shift and go to state 75
    COUNT           shift and go to state 71

    pipelineA                      shift and go to state 73

state 46

    (28) calling -> # callID . ( insertEra callingA

    (               shift and go to state 76


state 47

    (29) callID -> ID .

    (               reduce using rule 29 (callID -> ID .)


state 48

    (45) condition -> IF ( . expression ) gotoFalse block conditionA continueGo
    (68) expression -> . exp = = exp
    (69) expression -> . exp < > exp
    (70) expression -> . exp < = exp
    (71) expression -> . exp > = exp
    (72) expression -> . exp > exp
    (73) expression -> . exp < exp
    (74) expression -> . exp AND exp
    (75) expression -> . exp OR exp
    (76) expression -> . exp empty
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    exp                            shift and go to state 51
    factor                         shift and go to state 40
    var_cte                        shift and go to state 36
    expression                     shift and go to state 77

state 49

    (48) write -> ECHO writeA . ;

    ;               shift and go to state 78


state 50

    (50) writeA -> CTE_STRING .

    ;               reduce using rule 50 (writeA -> CTE_STRING .)


state 51

    (68) expression -> exp . = = exp
    (69) expression -> exp . < > exp
    (70) expression -> exp . < = exp
    (71) expression -> exp . > = exp
    (72) expression -> exp . > exp
    (73) expression -> exp . < exp
    (74) expression -> exp . AND exp
    (75) expression -> exp . OR exp
    (76) expression -> exp . empty
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp
    (116) empty -> .

    =               shift and go to state 81
    <               shift and go to state 80
    >               shift and go to state 84
    AND             shift and go to state 79
    OR              shift and go to state 82
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66
    ;               reduce using rule 116 (empty -> .)
    )               reduce using rule 116 (empty -> .)
    ,               reduce using rule 116 (empty -> .)

    empty                          shift and go to state 83

state 52

    (49) writeA -> expression .

    ;               reduce using rule 49 (writeA -> expression .)


state 53

    (60) command -> SAMPLE commandA .

    ID              reduce using rule 60 (command -> SAMPLE commandA .)
    IF              reduce using rule 60 (command -> SAMPLE commandA .)
    ECHO            reduce using rule 60 (command -> SAMPLE commandA .)
    WHILE           reduce using rule 60 (command -> SAMPLE commandA .)
    REPLAY          reduce using rule 60 (command -> SAMPLE commandA .)
    SAMPLE          reduce using rule 60 (command -> SAMPLE commandA .)
    #               reduce using rule 60 (command -> SAMPLE commandA .)
    PIPE            reduce using rule 60 (command -> SAMPLE commandA .)
    WHERE           reduce using rule 60 (command -> SAMPLE commandA .)
    CLEAR           reduce using rule 60 (command -> SAMPLE commandA .)
    OVAL            reduce using rule 60 (command -> SAMPLE commandA .)
    TRIO            reduce using rule 60 (command -> SAMPLE commandA .)
    QUAD            reduce using rule 60 (command -> SAMPLE commandA .)
    ARC             reduce using rule 60 (command -> SAMPLE commandA .)
    }               reduce using rule 60 (command -> SAMPLE commandA .)
    ]               reduce using rule 60 (command -> SAMPLE commandA .)
    MOD             reduce using rule 60 (command -> SAMPLE commandA .)
    END             reduce using rule 60 (command -> SAMPLE commandA .)


state 54

    (62) commandA -> OFF . move exp ;
    (88) move -> . UP
    (89) move -> . DOWN
    (90) move -> . LEFT
    (91) move -> . RIGHT

    UP              shift and go to state 87
    DOWN            shift and go to state 88
    LEFT            shift and go to state 89
    RIGHT           shift and go to state 85

    move                           shift and go to state 86

state 55

    (61) commandA -> ON . move exp CTE_INTEGER color ;
    (88) move -> . UP
    (89) move -> . DOWN
    (90) move -> . LEFT
    (91) move -> . RIGHT

    UP              shift and go to state 87
    DOWN            shift and go to state 88
    LEFT            shift and go to state 89
    RIGHT           shift and go to state 85

    move                           shift and go to state 90

state 56

    (2) programA -> programB END .

    $end            reduce using rule 2 (programA -> programB END .)


state 57

    (44) assign -> ID = . expression ;
    (68) expression -> . exp = = exp
    (69) expression -> . exp < > exp
    (70) expression -> . exp < = exp
    (71) expression -> . exp > = exp
    (72) expression -> . exp > exp
    (73) expression -> . exp < exp
    (74) expression -> . exp AND exp
    (75) expression -> . exp OR exp
    (76) expression -> . exp empty
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    expression                     shift and go to state 91
    exp                            shift and go to state 51
    factor                         shift and go to state 40

state 58

    (6) programC -> empty .

    END             reduce using rule 6 (programC -> empty .)


state 59

    (5) programC -> programB .

    END             reduce using rule 5 (programC -> programB .)


state 60

    (4) programB -> workspace programC .

    END             reduce using rule 4 (programB -> workspace programC .)


state 61

    (18) module -> MOD # . moduleID insertQuadMod moduleA endMod
    (21) moduleID -> . ID

    ID              shift and go to state 92

    moduleID                       shift and go to state 93

state 62

    (82) factor -> ( expression . )

    )               shift and go to state 94


state 63

    (77) exp -> exp + . exp
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 95
    factor                         shift and go to state 40

state 64

    (79) exp -> exp * . exp
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 96
    factor                         shift and go to state 40

state 65

    (78) exp -> exp - . exp
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 97
    factor                         shift and go to state 40

state 66

    (80) exp -> exp / . exp
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 98
    factor                         shift and go to state 40

state 67

    (59) command -> figure exp exp . color ;
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp
    (92) color -> . RED
    (93) color -> . YELLOW
    (94) color -> . BLUE
    (95) color -> . GREEN
    (96) color -> . BLACK
    (97) color -> . WHITE
    (98) color -> . ORANGE
    (99) color -> . PURPLE
    (100) color -> . CYAN

    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66
    RED             shift and go to state 108
    YELLOW          shift and go to state 103
    BLUE            shift and go to state 99
    GREEN           shift and go to state 102
    BLACK           shift and go to state 106
    WHITE           shift and go to state 107
    ORANGE          shift and go to state 105
    PURPLE          shift and go to state 101
    CYAN            shift and go to state 104

    color                          shift and go to state 100

state 68

    (81) exp -> factor empty .

    +               reduce using rule 81 (exp -> factor empty .)
    -               reduce using rule 81 (exp -> factor empty .)
    *               reduce using rule 81 (exp -> factor empty .)
    /               reduce using rule 81 (exp -> factor empty .)
    (               reduce using rule 81 (exp -> factor empty .)
    ID              reduce using rule 81 (exp -> factor empty .)
    CTE_INTEGER     reduce using rule 81 (exp -> factor empty .)
    CTE_FLOAT       reduce using rule 81 (exp -> factor empty .)
    TRUE            reduce using rule 81 (exp -> factor empty .)
    FALSE           reduce using rule 81 (exp -> factor empty .)
    =               reduce using rule 81 (exp -> factor empty .)
    <               reduce using rule 81 (exp -> factor empty .)
    >               reduce using rule 81 (exp -> factor empty .)
    AND             reduce using rule 81 (exp -> factor empty .)
    OR              reduce using rule 81 (exp -> factor empty .)
    ,               reduce using rule 81 (exp -> factor empty .)
    )               reduce using rule 81 (exp -> factor empty .)
    ;               reduce using rule 81 (exp -> factor empty .)
    RED             reduce using rule 81 (exp -> factor empty .)
    YELLOW          reduce using rule 81 (exp -> factor empty .)
    BLUE            reduce using rule 81 (exp -> factor empty .)
    GREEN           reduce using rule 81 (exp -> factor empty .)
    BLACK           reduce using rule 81 (exp -> factor empty .)
    WHITE           reduce using rule 81 (exp -> factor empty .)
    ORANGE          reduce using rule 81 (exp -> factor empty .)
    PURPLE          reduce using rule 81 (exp -> factor empty .)
    CYAN            reduce using rule 81 (exp -> factor empty .)
    ]               reduce using rule 81 (exp -> factor empty .)


state 69

    (63) cycle -> WHILE gotoW ( . expression ) gotoFalse block continueGoW
    (68) expression -> . exp = = exp
    (69) expression -> . exp < > exp
    (70) expression -> . exp < = exp
    (71) expression -> . exp > = exp
    (72) expression -> . exp > exp
    (73) expression -> . exp < exp
    (74) expression -> . exp AND exp
    (75) expression -> . exp OR exp
    (76) expression -> . exp empty
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 51
    factor                         shift and go to state 40
    expression                     shift and go to state 109

state 70

    (64) repeat -> REPLAY CTE_INTEGER gotoR . [ repeatA ] ;

    [               shift and go to state 110


state 71

    (55) pipelineA -> COUNT . ;

    ;               shift and go to state 111


state 72

    (53) pipelineA -> IN . ( var_cte ) ;

    (               shift and go to state 112


state 73

    (51) pipeline -> PIPE ID pipelineA .

    ID              reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    IF              reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    ECHO            reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    WHILE           reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    REPLAY          reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    SAMPLE          reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    #               reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    PIPE            reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    WHERE           reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    CLEAR           reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    OVAL            reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    TRIO            reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    QUAD            reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    ARC             reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    }               reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    MOD             reduce using rule 51 (pipeline -> PIPE ID pipelineA .)
    END             reduce using rule 51 (pipeline -> PIPE ID pipelineA .)


state 74

    (52) pipelineA -> [ . pipelineB ] ;
    (56) pipelineB -> . exp pipelineC
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    pipelineB                      shift and go to state 113
    exp                            shift and go to state 114
    factor                         shift and go to state 40

state 75

    (54) pipelineA -> OUT . ( ) ;

    (               shift and go to state 115


state 76

    (28) calling -> # callID ( . insertEra callingA
    (30) insertEra -> .

    )               reduce using rule 30 (insertEra -> .)
    (               reduce using rule 30 (insertEra -> .)
    ID              reduce using rule 30 (insertEra -> .)
    CTE_INTEGER     reduce using rule 30 (insertEra -> .)
    CTE_FLOAT       reduce using rule 30 (insertEra -> .)
    TRUE            reduce using rule 30 (insertEra -> .)
    FALSE           reduce using rule 30 (insertEra -> .)

    insertEra                      shift and go to state 116

state 77

    (45) condition -> IF ( expression . ) gotoFalse block conditionA continueGo

    )               shift and go to state 117


state 78

    (48) write -> ECHO writeA ; .

    MOD             reduce using rule 48 (write -> ECHO writeA ; .)
    ID              reduce using rule 48 (write -> ECHO writeA ; .)
    IF              reduce using rule 48 (write -> ECHO writeA ; .)
    ECHO            reduce using rule 48 (write -> ECHO writeA ; .)
    WHILE           reduce using rule 48 (write -> ECHO writeA ; .)
    REPLAY          reduce using rule 48 (write -> ECHO writeA ; .)
    SAMPLE          reduce using rule 48 (write -> ECHO writeA ; .)
    #               reduce using rule 48 (write -> ECHO writeA ; .)
    PIPE            reduce using rule 48 (write -> ECHO writeA ; .)
    WHERE           reduce using rule 48 (write -> ECHO writeA ; .)
    CLEAR           reduce using rule 48 (write -> ECHO writeA ; .)
    OVAL            reduce using rule 48 (write -> ECHO writeA ; .)
    TRIO            reduce using rule 48 (write -> ECHO writeA ; .)
    QUAD            reduce using rule 48 (write -> ECHO writeA ; .)
    ARC             reduce using rule 48 (write -> ECHO writeA ; .)
    END             reduce using rule 48 (write -> ECHO writeA ; .)
    }               reduce using rule 48 (write -> ECHO writeA ; .)


state 79

    (74) expression -> exp AND . exp
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 118
    factor                         shift and go to state 40

state 80

    (69) expression -> exp < . > exp
    (70) expression -> exp < . = exp
    (73) expression -> exp < . exp
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    >               shift and go to state 121
    =               shift and go to state 120
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 119
    factor                         shift and go to state 40

state 81

    (68) expression -> exp = . = exp

    =               shift and go to state 122


state 82

    (75) expression -> exp OR . exp
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 123
    factor                         shift and go to state 40

state 83

    (76) expression -> exp empty .

    ;               reduce using rule 76 (expression -> exp empty .)
    ,               reduce using rule 76 (expression -> exp empty .)
    )               reduce using rule 76 (expression -> exp empty .)


state 84

    (71) expression -> exp > . = exp
    (72) expression -> exp > . exp
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    =               shift and go to state 125
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 124
    factor                         shift and go to state 40

state 85

    (91) move -> RIGHT .

    (               reduce using rule 91 (move -> RIGHT .)
    ID              reduce using rule 91 (move -> RIGHT .)
    CTE_INTEGER     reduce using rule 91 (move -> RIGHT .)
    CTE_FLOAT       reduce using rule 91 (move -> RIGHT .)
    TRUE            reduce using rule 91 (move -> RIGHT .)
    FALSE           reduce using rule 91 (move -> RIGHT .)


state 86

    (62) commandA -> OFF move . exp ;
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 126
    factor                         shift and go to state 40

state 87

    (88) move -> UP .

    (               reduce using rule 88 (move -> UP .)
    ID              reduce using rule 88 (move -> UP .)
    CTE_INTEGER     reduce using rule 88 (move -> UP .)
    CTE_FLOAT       reduce using rule 88 (move -> UP .)
    TRUE            reduce using rule 88 (move -> UP .)
    FALSE           reduce using rule 88 (move -> UP .)


state 88

    (89) move -> DOWN .

    (               reduce using rule 89 (move -> DOWN .)
    ID              reduce using rule 89 (move -> DOWN .)
    CTE_INTEGER     reduce using rule 89 (move -> DOWN .)
    CTE_FLOAT       reduce using rule 89 (move -> DOWN .)
    TRUE            reduce using rule 89 (move -> DOWN .)
    FALSE           reduce using rule 89 (move -> DOWN .)


state 89

    (90) move -> LEFT .

    (               reduce using rule 90 (move -> LEFT .)
    ID              reduce using rule 90 (move -> LEFT .)
    CTE_INTEGER     reduce using rule 90 (move -> LEFT .)
    CTE_FLOAT       reduce using rule 90 (move -> LEFT .)
    TRUE            reduce using rule 90 (move -> LEFT .)
    FALSE           reduce using rule 90 (move -> LEFT .)


state 90

    (61) commandA -> ON move . exp CTE_INTEGER color ;
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 127
    factor                         shift and go to state 40

state 91

    (44) assign -> ID = expression . ;

    ;               shift and go to state 128


state 92

    (21) moduleID -> ID .

    (               reduce using rule 21 (moduleID -> ID .)
    {               reduce using rule 21 (moduleID -> ID .)


state 93

    (18) module -> MOD # moduleID . insertQuadMod moduleA endMod
    (114) insertQuadMod -> .

    (               reduce using rule 114 (insertQuadMod -> .)
    {               reduce using rule 114 (insertQuadMod -> .)

    insertQuadMod                  shift and go to state 129

state 94

    (82) factor -> ( expression ) .

    =               reduce using rule 82 (factor -> ( expression ) .)
    <               reduce using rule 82 (factor -> ( expression ) .)
    >               reduce using rule 82 (factor -> ( expression ) .)
    AND             reduce using rule 82 (factor -> ( expression ) .)
    OR              reduce using rule 82 (factor -> ( expression ) .)
    +               reduce using rule 82 (factor -> ( expression ) .)
    -               reduce using rule 82 (factor -> ( expression ) .)
    *               reduce using rule 82 (factor -> ( expression ) .)
    /               reduce using rule 82 (factor -> ( expression ) .)
    ;               reduce using rule 82 (factor -> ( expression ) .)
    ,               reduce using rule 82 (factor -> ( expression ) .)
    ]               reduce using rule 82 (factor -> ( expression ) .)
    )               reduce using rule 82 (factor -> ( expression ) .)
    (               reduce using rule 82 (factor -> ( expression ) .)
    ID              reduce using rule 82 (factor -> ( expression ) .)
    CTE_INTEGER     reduce using rule 82 (factor -> ( expression ) .)
    CTE_FLOAT       reduce using rule 82 (factor -> ( expression ) .)
    TRUE            reduce using rule 82 (factor -> ( expression ) .)
    FALSE           reduce using rule 82 (factor -> ( expression ) .)
    RED             reduce using rule 82 (factor -> ( expression ) .)
    YELLOW          reduce using rule 82 (factor -> ( expression ) .)
    BLUE            reduce using rule 82 (factor -> ( expression ) .)
    GREEN           reduce using rule 82 (factor -> ( expression ) .)
    BLACK           reduce using rule 82 (factor -> ( expression ) .)
    WHITE           reduce using rule 82 (factor -> ( expression ) .)
    ORANGE          reduce using rule 82 (factor -> ( expression ) .)
    PURPLE          reduce using rule 82 (factor -> ( expression ) .)
    CYAN            reduce using rule 82 (factor -> ( expression ) .)


state 95

    (77) exp -> exp + exp .
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp

    +               reduce using rule 77 (exp -> exp + exp .)
    -               reduce using rule 77 (exp -> exp + exp .)
    (               reduce using rule 77 (exp -> exp + exp .)
    ID              reduce using rule 77 (exp -> exp + exp .)
    CTE_INTEGER     reduce using rule 77 (exp -> exp + exp .)
    CTE_FLOAT       reduce using rule 77 (exp -> exp + exp .)
    TRUE            reduce using rule 77 (exp -> exp + exp .)
    FALSE           reduce using rule 77 (exp -> exp + exp .)
    =               reduce using rule 77 (exp -> exp + exp .)
    <               reduce using rule 77 (exp -> exp + exp .)
    >               reduce using rule 77 (exp -> exp + exp .)
    AND             reduce using rule 77 (exp -> exp + exp .)
    OR              reduce using rule 77 (exp -> exp + exp .)
    ,               reduce using rule 77 (exp -> exp + exp .)
    )               reduce using rule 77 (exp -> exp + exp .)
    ;               reduce using rule 77 (exp -> exp + exp .)
    RED             reduce using rule 77 (exp -> exp + exp .)
    YELLOW          reduce using rule 77 (exp -> exp + exp .)
    BLUE            reduce using rule 77 (exp -> exp + exp .)
    GREEN           reduce using rule 77 (exp -> exp + exp .)
    BLACK           reduce using rule 77 (exp -> exp + exp .)
    WHITE           reduce using rule 77 (exp -> exp + exp .)
    ORANGE          reduce using rule 77 (exp -> exp + exp .)
    PURPLE          reduce using rule 77 (exp -> exp + exp .)
    CYAN            reduce using rule 77 (exp -> exp + exp .)
    ]               reduce using rule 77 (exp -> exp + exp .)
    *               shift and go to state 64
    /               shift and go to state 66

  ! *               [ reduce using rule 77 (exp -> exp + exp .) ]
  ! /               [ reduce using rule 77 (exp -> exp + exp .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 65 ]


state 96

    (79) exp -> exp * exp .
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp

    +               reduce using rule 79 (exp -> exp * exp .)
    -               reduce using rule 79 (exp -> exp * exp .)
    *               reduce using rule 79 (exp -> exp * exp .)
    /               reduce using rule 79 (exp -> exp * exp .)
    (               reduce using rule 79 (exp -> exp * exp .)
    ID              reduce using rule 79 (exp -> exp * exp .)
    CTE_INTEGER     reduce using rule 79 (exp -> exp * exp .)
    CTE_FLOAT       reduce using rule 79 (exp -> exp * exp .)
    TRUE            reduce using rule 79 (exp -> exp * exp .)
    FALSE           reduce using rule 79 (exp -> exp * exp .)
    =               reduce using rule 79 (exp -> exp * exp .)
    <               reduce using rule 79 (exp -> exp * exp .)
    >               reduce using rule 79 (exp -> exp * exp .)
    AND             reduce using rule 79 (exp -> exp * exp .)
    OR              reduce using rule 79 (exp -> exp * exp .)
    ,               reduce using rule 79 (exp -> exp * exp .)
    )               reduce using rule 79 (exp -> exp * exp .)
    ;               reduce using rule 79 (exp -> exp * exp .)
    RED             reduce using rule 79 (exp -> exp * exp .)
    YELLOW          reduce using rule 79 (exp -> exp * exp .)
    BLUE            reduce using rule 79 (exp -> exp * exp .)
    GREEN           reduce using rule 79 (exp -> exp * exp .)
    BLACK           reduce using rule 79 (exp -> exp * exp .)
    WHITE           reduce using rule 79 (exp -> exp * exp .)
    ORANGE          reduce using rule 79 (exp -> exp * exp .)
    PURPLE          reduce using rule 79 (exp -> exp * exp .)
    CYAN            reduce using rule 79 (exp -> exp * exp .)
    ]               reduce using rule 79 (exp -> exp * exp .)

  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 64 ]
  ! /               [ shift and go to state 66 ]


state 97

    (78) exp -> exp - exp .
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp

    +               reduce using rule 78 (exp -> exp - exp .)
    -               reduce using rule 78 (exp -> exp - exp .)
    (               reduce using rule 78 (exp -> exp - exp .)
    ID              reduce using rule 78 (exp -> exp - exp .)
    CTE_INTEGER     reduce using rule 78 (exp -> exp - exp .)
    CTE_FLOAT       reduce using rule 78 (exp -> exp - exp .)
    TRUE            reduce using rule 78 (exp -> exp - exp .)
    FALSE           reduce using rule 78 (exp -> exp - exp .)
    =               reduce using rule 78 (exp -> exp - exp .)
    <               reduce using rule 78 (exp -> exp - exp .)
    >               reduce using rule 78 (exp -> exp - exp .)
    AND             reduce using rule 78 (exp -> exp - exp .)
    OR              reduce using rule 78 (exp -> exp - exp .)
    ,               reduce using rule 78 (exp -> exp - exp .)
    )               reduce using rule 78 (exp -> exp - exp .)
    ;               reduce using rule 78 (exp -> exp - exp .)
    RED             reduce using rule 78 (exp -> exp - exp .)
    YELLOW          reduce using rule 78 (exp -> exp - exp .)
    BLUE            reduce using rule 78 (exp -> exp - exp .)
    GREEN           reduce using rule 78 (exp -> exp - exp .)
    BLACK           reduce using rule 78 (exp -> exp - exp .)
    WHITE           reduce using rule 78 (exp -> exp - exp .)
    ORANGE          reduce using rule 78 (exp -> exp - exp .)
    PURPLE          reduce using rule 78 (exp -> exp - exp .)
    CYAN            reduce using rule 78 (exp -> exp - exp .)
    ]               reduce using rule 78 (exp -> exp - exp .)
    *               shift and go to state 64
    /               shift and go to state 66

  ! *               [ reduce using rule 78 (exp -> exp - exp .) ]
  ! /               [ reduce using rule 78 (exp -> exp - exp .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 65 ]


state 98

    (80) exp -> exp / exp .
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp

    +               reduce using rule 80 (exp -> exp / exp .)
    -               reduce using rule 80 (exp -> exp / exp .)
    *               reduce using rule 80 (exp -> exp / exp .)
    /               reduce using rule 80 (exp -> exp / exp .)
    (               reduce using rule 80 (exp -> exp / exp .)
    ID              reduce using rule 80 (exp -> exp / exp .)
    CTE_INTEGER     reduce using rule 80 (exp -> exp / exp .)
    CTE_FLOAT       reduce using rule 80 (exp -> exp / exp .)
    TRUE            reduce using rule 80 (exp -> exp / exp .)
    FALSE           reduce using rule 80 (exp -> exp / exp .)
    =               reduce using rule 80 (exp -> exp / exp .)
    <               reduce using rule 80 (exp -> exp / exp .)
    >               reduce using rule 80 (exp -> exp / exp .)
    AND             reduce using rule 80 (exp -> exp / exp .)
    OR              reduce using rule 80 (exp -> exp / exp .)
    ,               reduce using rule 80 (exp -> exp / exp .)
    )               reduce using rule 80 (exp -> exp / exp .)
    ;               reduce using rule 80 (exp -> exp / exp .)
    RED             reduce using rule 80 (exp -> exp / exp .)
    YELLOW          reduce using rule 80 (exp -> exp / exp .)
    BLUE            reduce using rule 80 (exp -> exp / exp .)
    GREEN           reduce using rule 80 (exp -> exp / exp .)
    BLACK           reduce using rule 80 (exp -> exp / exp .)
    WHITE           reduce using rule 80 (exp -> exp / exp .)
    ORANGE          reduce using rule 80 (exp -> exp / exp .)
    PURPLE          reduce using rule 80 (exp -> exp / exp .)
    CYAN            reduce using rule 80 (exp -> exp / exp .)
    ]               reduce using rule 80 (exp -> exp / exp .)

  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 64 ]
  ! /               [ shift and go to state 66 ]


state 99

    (94) color -> BLUE .

    ;               reduce using rule 94 (color -> BLUE .)


state 100

    (59) command -> figure exp exp color . ;

    ;               shift and go to state 130


state 101

    (99) color -> PURPLE .

    ;               reduce using rule 99 (color -> PURPLE .)


state 102

    (95) color -> GREEN .

    ;               reduce using rule 95 (color -> GREEN .)


state 103

    (93) color -> YELLOW .

    ;               reduce using rule 93 (color -> YELLOW .)


state 104

    (100) color -> CYAN .

    ;               reduce using rule 100 (color -> CYAN .)


state 105

    (98) color -> ORANGE .

    ;               reduce using rule 98 (color -> ORANGE .)


state 106

    (96) color -> BLACK .

    ;               reduce using rule 96 (color -> BLACK .)


state 107

    (97) color -> WHITE .

    ;               reduce using rule 97 (color -> WHITE .)


state 108

    (92) color -> RED .

    ;               reduce using rule 92 (color -> RED .)


state 109

    (63) cycle -> WHILE gotoW ( expression . ) gotoFalse block continueGoW

    )               shift and go to state 131


state 110

    (64) repeat -> REPLAY CTE_INTEGER gotoR [ . repeatA ] ;
    (65) repeatA -> . command repeatB
    (59) command -> . figure exp exp color ;
    (60) command -> . SAMPLE commandA
    (84) figure -> . OVAL
    (85) figure -> . TRIO
    (86) figure -> . QUAD
    (87) figure -> . ARC

    SAMPLE          shift and go to state 19
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    repeatA                        shift and go to state 132
    command                        shift and go to state 133

state 111

    (55) pipelineA -> COUNT ; .

    MOD             reduce using rule 55 (pipelineA -> COUNT ; .)
    ID              reduce using rule 55 (pipelineA -> COUNT ; .)
    IF              reduce using rule 55 (pipelineA -> COUNT ; .)
    ECHO            reduce using rule 55 (pipelineA -> COUNT ; .)
    WHILE           reduce using rule 55 (pipelineA -> COUNT ; .)
    REPLAY          reduce using rule 55 (pipelineA -> COUNT ; .)
    SAMPLE          reduce using rule 55 (pipelineA -> COUNT ; .)
    #               reduce using rule 55 (pipelineA -> COUNT ; .)
    PIPE            reduce using rule 55 (pipelineA -> COUNT ; .)
    WHERE           reduce using rule 55 (pipelineA -> COUNT ; .)
    CLEAR           reduce using rule 55 (pipelineA -> COUNT ; .)
    OVAL            reduce using rule 55 (pipelineA -> COUNT ; .)
    TRIO            reduce using rule 55 (pipelineA -> COUNT ; .)
    QUAD            reduce using rule 55 (pipelineA -> COUNT ; .)
    ARC             reduce using rule 55 (pipelineA -> COUNT ; .)
    END             reduce using rule 55 (pipelineA -> COUNT ; .)
    }               reduce using rule 55 (pipelineA -> COUNT ; .)


state 112

    (53) pipelineA -> IN ( . var_cte ) ;
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 134

state 113

    (52) pipelineA -> [ pipelineB . ] ;

    ]               shift and go to state 135


state 114

    (56) pipelineB -> exp . pipelineC
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp
    (57) pipelineC -> . , pipelineB
    (58) pipelineC -> . empty
    (116) empty -> .

    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66
    ,               shift and go to state 136
    ]               reduce using rule 116 (empty -> .)

    empty                          shift and go to state 138
    pipelineC                      shift and go to state 137

state 115

    (54) pipelineA -> OUT ( . ) ;

    )               shift and go to state 139


state 116

    (28) calling -> # callID ( insertEra . callingA
    (31) callingA -> . callingB ) ;
    (32) callingA -> . ) ;
    (33) callingB -> . expression checkParam callingC
    (68) expression -> . exp = = exp
    (69) expression -> . exp < > exp
    (70) expression -> . exp < = exp
    (71) expression -> . exp > = exp
    (72) expression -> . exp > exp
    (73) expression -> . exp < exp
    (74) expression -> . exp AND exp
    (75) expression -> . exp OR exp
    (76) expression -> . exp empty
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    )               shift and go to state 140
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    factor                         shift and go to state 40
    var_cte                        shift and go to state 36
    callingA                       shift and go to state 141
    callingB                       shift and go to state 142
    exp                            shift and go to state 51
    expression                     shift and go to state 143

state 117

    (45) condition -> IF ( expression ) . gotoFalse block conditionA continueGo
    (108) gotoFalse -> .

    {               reduce using rule 108 (gotoFalse -> .)

    gotoFalse                      shift and go to state 144

state 118

    (74) expression -> exp AND exp .
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp

    ;               reduce using rule 74 (expression -> exp AND exp .)
    ,               reduce using rule 74 (expression -> exp AND exp .)
    )               reduce using rule 74 (expression -> exp AND exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 119

    (73) expression -> exp < exp .
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp

    ;               reduce using rule 73 (expression -> exp < exp .)
    ,               reduce using rule 73 (expression -> exp < exp .)
    )               reduce using rule 73 (expression -> exp < exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 120

    (70) expression -> exp < = . exp
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 145
    factor                         shift and go to state 40

state 121

    (69) expression -> exp < > . exp
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 146
    factor                         shift and go to state 40

state 122

    (68) expression -> exp = = . exp
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 147
    factor                         shift and go to state 40

state 123

    (75) expression -> exp OR exp .
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp

    ;               reduce using rule 75 (expression -> exp OR exp .)
    ,               reduce using rule 75 (expression -> exp OR exp .)
    )               reduce using rule 75 (expression -> exp OR exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 124

    (72) expression -> exp > exp .
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp

    ;               reduce using rule 72 (expression -> exp > exp .)
    ,               reduce using rule 72 (expression -> exp > exp .)
    )               reduce using rule 72 (expression -> exp > exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 125

    (71) expression -> exp > = . exp
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 148
    factor                         shift and go to state 40

state 126

    (62) commandA -> OFF move exp . ;
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp

    ;               shift and go to state 149
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 127

    (61) commandA -> ON move exp . CTE_INTEGER color ;
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp

    CTE_INTEGER     shift and go to state 150
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 128

    (44) assign -> ID = expression ; .

    ID              reduce using rule 44 (assign -> ID = expression ; .)
    IF              reduce using rule 44 (assign -> ID = expression ; .)
    ECHO            reduce using rule 44 (assign -> ID = expression ; .)
    WHILE           reduce using rule 44 (assign -> ID = expression ; .)
    REPLAY          reduce using rule 44 (assign -> ID = expression ; .)
    SAMPLE          reduce using rule 44 (assign -> ID = expression ; .)
    #               reduce using rule 44 (assign -> ID = expression ; .)
    PIPE            reduce using rule 44 (assign -> ID = expression ; .)
    WHERE           reduce using rule 44 (assign -> ID = expression ; .)
    CLEAR           reduce using rule 44 (assign -> ID = expression ; .)
    OVAL            reduce using rule 44 (assign -> ID = expression ; .)
    TRIO            reduce using rule 44 (assign -> ID = expression ; .)
    QUAD            reduce using rule 44 (assign -> ID = expression ; .)
    ARC             reduce using rule 44 (assign -> ID = expression ; .)
    }               reduce using rule 44 (assign -> ID = expression ; .)
    MOD             reduce using rule 44 (assign -> ID = expression ; .)
    END             reduce using rule 44 (assign -> ID = expression ; .)


state 129

    (18) module -> MOD # moduleID insertQuadMod . moduleA endMod
    (19) moduleA -> . ( vars ) block
    (20) moduleA -> . block
    (38) block -> . { blockA

    (               shift and go to state 151
    {               shift and go to state 153

    moduleA                        shift and go to state 154
    block                          shift and go to state 152

state 130

    (59) command -> figure exp exp color ; .

    ID              reduce using rule 59 (command -> figure exp exp color ; .)
    IF              reduce using rule 59 (command -> figure exp exp color ; .)
    ECHO            reduce using rule 59 (command -> figure exp exp color ; .)
    WHILE           reduce using rule 59 (command -> figure exp exp color ; .)
    REPLAY          reduce using rule 59 (command -> figure exp exp color ; .)
    SAMPLE          reduce using rule 59 (command -> figure exp exp color ; .)
    #               reduce using rule 59 (command -> figure exp exp color ; .)
    PIPE            reduce using rule 59 (command -> figure exp exp color ; .)
    WHERE           reduce using rule 59 (command -> figure exp exp color ; .)
    CLEAR           reduce using rule 59 (command -> figure exp exp color ; .)
    OVAL            reduce using rule 59 (command -> figure exp exp color ; .)
    TRIO            reduce using rule 59 (command -> figure exp exp color ; .)
    QUAD            reduce using rule 59 (command -> figure exp exp color ; .)
    ARC             reduce using rule 59 (command -> figure exp exp color ; .)
    }               reduce using rule 59 (command -> figure exp exp color ; .)
    ]               reduce using rule 59 (command -> figure exp exp color ; .)
    MOD             reduce using rule 59 (command -> figure exp exp color ; .)
    END             reduce using rule 59 (command -> figure exp exp color ; .)


state 131

    (63) cycle -> WHILE gotoW ( expression ) . gotoFalse block continueGoW
    (108) gotoFalse -> .

    {               reduce using rule 108 (gotoFalse -> .)

    gotoFalse                      shift and go to state 155

state 132

    (64) repeat -> REPLAY CTE_INTEGER gotoR [ repeatA . ] ;

    ]               shift and go to state 156


state 133

    (65) repeatA -> command . repeatB
    (66) repeatB -> . repeatA
    (67) repeatB -> . empty
    (65) repeatA -> . command repeatB
    (116) empty -> .
    (59) command -> . figure exp exp color ;
    (60) command -> . SAMPLE commandA
    (84) figure -> . OVAL
    (85) figure -> . TRIO
    (86) figure -> . QUAD
    (87) figure -> . ARC

    ]               reduce using rule 116 (empty -> .)
    SAMPLE          shift and go to state 19
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    repeatA                        shift and go to state 157
    repeatB                        shift and go to state 158
    command                        shift and go to state 133
    empty                          shift and go to state 159

state 134

    (53) pipelineA -> IN ( var_cte . ) ;

    )               shift and go to state 160


state 135

    (52) pipelineA -> [ pipelineB ] . ;

    ;               shift and go to state 161


state 136

    (57) pipelineC -> , . pipelineB
    (56) pipelineB -> . exp pipelineC
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    pipelineB                      shift and go to state 162
    exp                            shift and go to state 114
    factor                         shift and go to state 40

state 137

    (56) pipelineB -> exp pipelineC .

    ]               reduce using rule 56 (pipelineB -> exp pipelineC .)


state 138

    (58) pipelineC -> empty .

    ]               reduce using rule 58 (pipelineC -> empty .)


state 139

    (54) pipelineA -> OUT ( ) . ;

    ;               shift and go to state 163


state 140

    (32) callingA -> ) . ;

    ;               shift and go to state 164


state 141

    (28) calling -> # callID ( insertEra callingA .

    MOD             reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    ID              reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    IF              reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    ECHO            reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    WHILE           reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    REPLAY          reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    SAMPLE          reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    #               reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    PIPE            reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    WHERE           reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    CLEAR           reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    OVAL            reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    TRIO            reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    QUAD            reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    ARC             reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    END             reduce using rule 28 (calling -> # callID ( insertEra callingA .)
    }               reduce using rule 28 (calling -> # callID ( insertEra callingA .)


state 142

    (31) callingA -> callingB . ) ;

    )               shift and go to state 165


state 143

    (33) callingB -> expression . checkParam callingC
    (34) checkParam -> .

    ,               reduce using rule 34 (checkParam -> .)
    )               reduce using rule 34 (checkParam -> .)

    checkParam                     shift and go to state 166

state 144

    (45) condition -> IF ( expression ) gotoFalse . block conditionA continueGo
    (38) block -> . { blockA

    {               shift and go to state 153

    block                          shift and go to state 167

state 145

    (70) expression -> exp < = exp .
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp

    ;               reduce using rule 70 (expression -> exp < = exp .)
    ,               reduce using rule 70 (expression -> exp < = exp .)
    )               reduce using rule 70 (expression -> exp < = exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 146

    (69) expression -> exp < > exp .
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp

    ;               reduce using rule 69 (expression -> exp < > exp .)
    ,               reduce using rule 69 (expression -> exp < > exp .)
    )               reduce using rule 69 (expression -> exp < > exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 147

    (68) expression -> exp = = exp .
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp

    ;               reduce using rule 68 (expression -> exp = = exp .)
    ,               reduce using rule 68 (expression -> exp = = exp .)
    )               reduce using rule 68 (expression -> exp = = exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 148

    (71) expression -> exp > = exp .
    (77) exp -> exp . + exp
    (78) exp -> exp . - exp
    (79) exp -> exp . * exp
    (80) exp -> exp . / exp

    ;               reduce using rule 71 (expression -> exp > = exp .)
    ,               reduce using rule 71 (expression -> exp > = exp .)
    )               reduce using rule 71 (expression -> exp > = exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 149

    (62) commandA -> OFF move exp ; .

    MOD             reduce using rule 62 (commandA -> OFF move exp ; .)
    ID              reduce using rule 62 (commandA -> OFF move exp ; .)
    IF              reduce using rule 62 (commandA -> OFF move exp ; .)
    ECHO            reduce using rule 62 (commandA -> OFF move exp ; .)
    WHILE           reduce using rule 62 (commandA -> OFF move exp ; .)
    REPLAY          reduce using rule 62 (commandA -> OFF move exp ; .)
    SAMPLE          reduce using rule 62 (commandA -> OFF move exp ; .)
    #               reduce using rule 62 (commandA -> OFF move exp ; .)
    PIPE            reduce using rule 62 (commandA -> OFF move exp ; .)
    WHERE           reduce using rule 62 (commandA -> OFF move exp ; .)
    CLEAR           reduce using rule 62 (commandA -> OFF move exp ; .)
    OVAL            reduce using rule 62 (commandA -> OFF move exp ; .)
    TRIO            reduce using rule 62 (commandA -> OFF move exp ; .)
    QUAD            reduce using rule 62 (commandA -> OFF move exp ; .)
    ARC             reduce using rule 62 (commandA -> OFF move exp ; .)
    END             reduce using rule 62 (commandA -> OFF move exp ; .)
    ]               reduce using rule 62 (commandA -> OFF move exp ; .)
    }               reduce using rule 62 (commandA -> OFF move exp ; .)


state 150

    (61) commandA -> ON move exp CTE_INTEGER . color ;
    (92) color -> . RED
    (93) color -> . YELLOW
    (94) color -> . BLUE
    (95) color -> . GREEN
    (96) color -> . BLACK
    (97) color -> . WHITE
    (98) color -> . ORANGE
    (99) color -> . PURPLE
    (100) color -> . CYAN

    RED             shift and go to state 108
    YELLOW          shift and go to state 103
    BLUE            shift and go to state 99
    GREEN           shift and go to state 102
    BLACK           shift and go to state 106
    WHITE           shift and go to state 107
    ORANGE          shift and go to state 105
    PURPLE          shift and go to state 101
    CYAN            shift and go to state 104

    color                          shift and go to state 168

state 151

    (19) moduleA -> ( . vars ) block
    (22) vars -> . type ID varsA
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOL

    INT             shift and go to state 171
    FLOAT           shift and go to state 170
    BOOL            shift and go to state 172

    type                           shift and go to state 173
    vars                           shift and go to state 169

state 152

    (20) moduleA -> block .

    MOD             reduce using rule 20 (moduleA -> block .)
    ID              reduce using rule 20 (moduleA -> block .)
    IF              reduce using rule 20 (moduleA -> block .)
    ECHO            reduce using rule 20 (moduleA -> block .)
    WHILE           reduce using rule 20 (moduleA -> block .)
    REPLAY          reduce using rule 20 (moduleA -> block .)
    SAMPLE          reduce using rule 20 (moduleA -> block .)
    #               reduce using rule 20 (moduleA -> block .)
    PIPE            reduce using rule 20 (moduleA -> block .)
    WHERE           reduce using rule 20 (moduleA -> block .)
    CLEAR           reduce using rule 20 (moduleA -> block .)
    OVAL            reduce using rule 20 (moduleA -> block .)
    TRIO            reduce using rule 20 (moduleA -> block .)
    QUAD            reduce using rule 20 (moduleA -> block .)
    ARC             reduce using rule 20 (moduleA -> block .)
    END             reduce using rule 20 (moduleA -> block .)


state 153

    (38) block -> { . blockA
    (39) blockA -> . blockB }
    (40) blockA -> . }
    (41) blockB -> . statute blockC
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . cycle
    (13) statute -> . repeat
    (14) statute -> . command
    (15) statute -> . calling
    (16) statute -> . pipeline
    (17) statute -> . screen
    (44) assign -> . ID = expression ;
    (45) condition -> . IF ( expression ) gotoFalse block conditionA continueGo
    (48) write -> . ECHO writeA ;
    (63) cycle -> . WHILE gotoW ( expression ) gotoFalse block continueGoW
    (64) repeat -> . REPLAY CTE_INTEGER gotoR [ repeatA ] ;
    (59) command -> . figure exp exp color ;
    (60) command -> . SAMPLE commandA
    (28) calling -> . # callID ( insertEra callingA
    (51) pipeline -> . PIPE ID pipelineA
    (101) screen -> . WHERE
    (102) screen -> . CLEAR
    (84) figure -> . OVAL
    (85) figure -> . TRIO
    (86) figure -> . QUAD
    (87) figure -> . ARC

    }               shift and go to state 175
    ID              shift and go to state 23
    IF              shift and go to state 12
    ECHO            shift and go to state 18
    WHILE           shift and go to state 6
    REPLAY          shift and go to state 7
    SAMPLE          shift and go to state 19
    #               shift and go to state 9
    PIPE            shift and go to state 8
    WHERE           shift and go to state 28
    CLEAR           shift and go to state 13
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    write                          shift and go to state 10
    command                        shift and go to state 30
    repeat                         shift and go to state 15
    screen                         shift and go to state 17
    condition                      shift and go to state 11
    cycle                          shift and go to state 24
    statute                        shift and go to state 174
    pipeline                       shift and go to state 26
    calling                        shift and go to state 27
    blockB                         shift and go to state 176
    blockA                         shift and go to state 177
    assign                         shift and go to state 33

state 154

    (18) module -> MOD # moduleID insertQuadMod moduleA . endMod
    (115) endMod -> .

    MOD             reduce using rule 115 (endMod -> .)
    ID              reduce using rule 115 (endMod -> .)
    IF              reduce using rule 115 (endMod -> .)
    ECHO            reduce using rule 115 (endMod -> .)
    WHILE           reduce using rule 115 (endMod -> .)
    REPLAY          reduce using rule 115 (endMod -> .)
    SAMPLE          reduce using rule 115 (endMod -> .)
    #               reduce using rule 115 (endMod -> .)
    PIPE            reduce using rule 115 (endMod -> .)
    WHERE           reduce using rule 115 (endMod -> .)
    CLEAR           reduce using rule 115 (endMod -> .)
    OVAL            reduce using rule 115 (endMod -> .)
    TRIO            reduce using rule 115 (endMod -> .)
    QUAD            reduce using rule 115 (endMod -> .)
    ARC             reduce using rule 115 (endMod -> .)
    END             reduce using rule 115 (endMod -> .)

    endMod                         shift and go to state 178

state 155

    (63) cycle -> WHILE gotoW ( expression ) gotoFalse . block continueGoW
    (38) block -> . { blockA

    {               shift and go to state 153

    block                          shift and go to state 179

state 156

    (64) repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] . ;

    ;               shift and go to state 180


state 157

    (66) repeatB -> repeatA .

    ]               reduce using rule 66 (repeatB -> repeatA .)


state 158

    (65) repeatA -> command repeatB .

    ]               reduce using rule 65 (repeatA -> command repeatB .)


state 159

    (67) repeatB -> empty .

    ]               reduce using rule 67 (repeatB -> empty .)


state 160

    (53) pipelineA -> IN ( var_cte ) . ;

    ;               shift and go to state 181


state 161

    (52) pipelineA -> [ pipelineB ] ; .

    MOD             reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    ID              reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    IF              reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    ECHO            reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    WHILE           reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    REPLAY          reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    SAMPLE          reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    #               reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    PIPE            reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    WHERE           reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    CLEAR           reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    OVAL            reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    TRIO            reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    QUAD            reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    ARC             reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    END             reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)
    }               reduce using rule 52 (pipelineA -> [ pipelineB ] ; .)


state 162

    (57) pipelineC -> , pipelineB .

    ]               reduce using rule 57 (pipelineC -> , pipelineB .)


state 163

    (54) pipelineA -> OUT ( ) ; .

    MOD             reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    ID              reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    IF              reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    ECHO            reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    WHILE           reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    REPLAY          reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    SAMPLE          reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    #               reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    PIPE            reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    WHERE           reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    CLEAR           reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    OVAL            reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    TRIO            reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    QUAD            reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    ARC             reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    END             reduce using rule 54 (pipelineA -> OUT ( ) ; .)
    }               reduce using rule 54 (pipelineA -> OUT ( ) ; .)


state 164

    (32) callingA -> ) ; .

    MOD             reduce using rule 32 (callingA -> ) ; .)
    ID              reduce using rule 32 (callingA -> ) ; .)
    IF              reduce using rule 32 (callingA -> ) ; .)
    ECHO            reduce using rule 32 (callingA -> ) ; .)
    WHILE           reduce using rule 32 (callingA -> ) ; .)
    REPLAY          reduce using rule 32 (callingA -> ) ; .)
    SAMPLE          reduce using rule 32 (callingA -> ) ; .)
    #               reduce using rule 32 (callingA -> ) ; .)
    PIPE            reduce using rule 32 (callingA -> ) ; .)
    WHERE           reduce using rule 32 (callingA -> ) ; .)
    CLEAR           reduce using rule 32 (callingA -> ) ; .)
    OVAL            reduce using rule 32 (callingA -> ) ; .)
    TRIO            reduce using rule 32 (callingA -> ) ; .)
    QUAD            reduce using rule 32 (callingA -> ) ; .)
    ARC             reduce using rule 32 (callingA -> ) ; .)
    END             reduce using rule 32 (callingA -> ) ; .)
    }               reduce using rule 32 (callingA -> ) ; .)


state 165

    (31) callingA -> callingB ) . ;

    ;               shift and go to state 182


state 166

    (33) callingB -> expression checkParam . callingC
    (35) callingC -> . , sumXparam callingB
    (36) callingC -> . empty
    (116) empty -> .

    ,               shift and go to state 183
    )               reduce using rule 116 (empty -> .)

    callingC                       shift and go to state 184
    empty                          shift and go to state 185

state 167

    (45) condition -> IF ( expression ) gotoFalse block . conditionA continueGo
    (46) conditionA -> . ELSE gotoE block
    (47) conditionA -> . empty
    (116) empty -> .

    ELSE            shift and go to state 188
    MOD             reduce using rule 116 (empty -> .)
    ID              reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    ECHO            reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    REPLAY          reduce using rule 116 (empty -> .)
    SAMPLE          reduce using rule 116 (empty -> .)
    #               reduce using rule 116 (empty -> .)
    PIPE            reduce using rule 116 (empty -> .)
    WHERE           reduce using rule 116 (empty -> .)
    CLEAR           reduce using rule 116 (empty -> .)
    OVAL            reduce using rule 116 (empty -> .)
    TRIO            reduce using rule 116 (empty -> .)
    QUAD            reduce using rule 116 (empty -> .)
    ARC             reduce using rule 116 (empty -> .)
    END             reduce using rule 116 (empty -> .)
    }               reduce using rule 116 (empty -> .)

    conditionA                     shift and go to state 186
    empty                          shift and go to state 187

state 168

    (61) commandA -> ON move exp CTE_INTEGER color . ;

    ;               shift and go to state 189


state 169

    (19) moduleA -> ( vars . ) block

    )               shift and go to state 190


state 170

    (26) type -> FLOAT .

    ID              reduce using rule 26 (type -> FLOAT .)


state 171

    (25) type -> INT .

    ID              reduce using rule 25 (type -> INT .)


state 172

    (27) type -> BOOL .

    ID              reduce using rule 27 (type -> BOOL .)


state 173

    (22) vars -> type . ID varsA

    ID              shift and go to state 191


state 174

    (41) blockB -> statute . blockC
    (42) blockC -> . blockB
    (43) blockC -> . empty
    (41) blockB -> . statute blockC
    (116) empty -> .
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . cycle
    (13) statute -> . repeat
    (14) statute -> . command
    (15) statute -> . calling
    (16) statute -> . pipeline
    (17) statute -> . screen
    (44) assign -> . ID = expression ;
    (45) condition -> . IF ( expression ) gotoFalse block conditionA continueGo
    (48) write -> . ECHO writeA ;
    (63) cycle -> . WHILE gotoW ( expression ) gotoFalse block continueGoW
    (64) repeat -> . REPLAY CTE_INTEGER gotoR [ repeatA ] ;
    (59) command -> . figure exp exp color ;
    (60) command -> . SAMPLE commandA
    (28) calling -> . # callID ( insertEra callingA
    (51) pipeline -> . PIPE ID pipelineA
    (101) screen -> . WHERE
    (102) screen -> . CLEAR
    (84) figure -> . OVAL
    (85) figure -> . TRIO
    (86) figure -> . QUAD
    (87) figure -> . ARC

    }               reduce using rule 116 (empty -> .)
    ID              shift and go to state 23
    IF              shift and go to state 12
    ECHO            shift and go to state 18
    WHILE           shift and go to state 6
    REPLAY          shift and go to state 7
    SAMPLE          shift and go to state 19
    #               shift and go to state 9
    PIPE            shift and go to state 8
    WHERE           shift and go to state 28
    CLEAR           shift and go to state 13
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    write                          shift and go to state 10
    command                        shift and go to state 30
    empty                          shift and go to state 192
    repeat                         shift and go to state 15
    screen                         shift and go to state 17
    condition                      shift and go to state 11
    cycle                          shift and go to state 24
    statute                        shift and go to state 174
    pipeline                       shift and go to state 26
    calling                        shift and go to state 27
    blockC                         shift and go to state 193
    blockB                         shift and go to state 194
    assign                         shift and go to state 33

state 175

    (40) blockA -> } .

    MOD             reduce using rule 40 (blockA -> } .)
    ID              reduce using rule 40 (blockA -> } .)
    IF              reduce using rule 40 (blockA -> } .)
    ECHO            reduce using rule 40 (blockA -> } .)
    WHILE           reduce using rule 40 (blockA -> } .)
    REPLAY          reduce using rule 40 (blockA -> } .)
    SAMPLE          reduce using rule 40 (blockA -> } .)
    #               reduce using rule 40 (blockA -> } .)
    PIPE            reduce using rule 40 (blockA -> } .)
    WHERE           reduce using rule 40 (blockA -> } .)
    CLEAR           reduce using rule 40 (blockA -> } .)
    OVAL            reduce using rule 40 (blockA -> } .)
    TRIO            reduce using rule 40 (blockA -> } .)
    QUAD            reduce using rule 40 (blockA -> } .)
    ARC             reduce using rule 40 (blockA -> } .)
    END             reduce using rule 40 (blockA -> } .)
    ELSE            reduce using rule 40 (blockA -> } .)
    }               reduce using rule 40 (blockA -> } .)


state 176

    (39) blockA -> blockB . }

    }               shift and go to state 195


state 177

    (38) block -> { blockA .

    MOD             reduce using rule 38 (block -> { blockA .)
    ID              reduce using rule 38 (block -> { blockA .)
    IF              reduce using rule 38 (block -> { blockA .)
    ECHO            reduce using rule 38 (block -> { blockA .)
    WHILE           reduce using rule 38 (block -> { blockA .)
    REPLAY          reduce using rule 38 (block -> { blockA .)
    SAMPLE          reduce using rule 38 (block -> { blockA .)
    #               reduce using rule 38 (block -> { blockA .)
    PIPE            reduce using rule 38 (block -> { blockA .)
    WHERE           reduce using rule 38 (block -> { blockA .)
    CLEAR           reduce using rule 38 (block -> { blockA .)
    OVAL            reduce using rule 38 (block -> { blockA .)
    TRIO            reduce using rule 38 (block -> { blockA .)
    QUAD            reduce using rule 38 (block -> { blockA .)
    ARC             reduce using rule 38 (block -> { blockA .)
    END             reduce using rule 38 (block -> { blockA .)
    }               reduce using rule 38 (block -> { blockA .)
    ELSE            reduce using rule 38 (block -> { blockA .)


state 178

    (18) module -> MOD # moduleID insertQuadMod moduleA endMod .

    MOD             reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    ID              reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    IF              reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    ECHO            reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    WHILE           reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    REPLAY          reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    SAMPLE          reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    #               reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    PIPE            reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    WHERE           reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    CLEAR           reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    OVAL            reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    TRIO            reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    QUAD            reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    ARC             reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)
    END             reduce using rule 18 (module -> MOD # moduleID insertQuadMod moduleA endMod .)


state 179

    (63) cycle -> WHILE gotoW ( expression ) gotoFalse block . continueGoW
    (113) continueGoW -> .

    MOD             reduce using rule 113 (continueGoW -> .)
    ID              reduce using rule 113 (continueGoW -> .)
    IF              reduce using rule 113 (continueGoW -> .)
    ECHO            reduce using rule 113 (continueGoW -> .)
    WHILE           reduce using rule 113 (continueGoW -> .)
    REPLAY          reduce using rule 113 (continueGoW -> .)
    SAMPLE          reduce using rule 113 (continueGoW -> .)
    #               reduce using rule 113 (continueGoW -> .)
    PIPE            reduce using rule 113 (continueGoW -> .)
    WHERE           reduce using rule 113 (continueGoW -> .)
    CLEAR           reduce using rule 113 (continueGoW -> .)
    OVAL            reduce using rule 113 (continueGoW -> .)
    TRIO            reduce using rule 113 (continueGoW -> .)
    QUAD            reduce using rule 113 (continueGoW -> .)
    ARC             reduce using rule 113 (continueGoW -> .)
    END             reduce using rule 113 (continueGoW -> .)
    }               reduce using rule 113 (continueGoW -> .)

    continueGoW                    shift and go to state 196

state 180

    (64) repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .

    ID              reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    IF              reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    ECHO            reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    WHILE           reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    REPLAY          reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    SAMPLE          reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    #               reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    PIPE            reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    WHERE           reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    CLEAR           reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    OVAL            reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    TRIO            reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    QUAD            reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    ARC             reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    }               reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    MOD             reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    END             reduce using rule 64 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)


state 181

    (53) pipelineA -> IN ( var_cte ) ; .

    MOD             reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    ID              reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    IF              reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    ECHO            reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    WHILE           reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    REPLAY          reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    SAMPLE          reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    #               reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    PIPE            reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    WHERE           reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    CLEAR           reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    OVAL            reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    TRIO            reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    QUAD            reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    ARC             reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    END             reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)
    }               reduce using rule 53 (pipelineA -> IN ( var_cte ) ; .)


state 182

    (31) callingA -> callingB ) ; .

    MOD             reduce using rule 31 (callingA -> callingB ) ; .)
    ID              reduce using rule 31 (callingA -> callingB ) ; .)
    IF              reduce using rule 31 (callingA -> callingB ) ; .)
    ECHO            reduce using rule 31 (callingA -> callingB ) ; .)
    WHILE           reduce using rule 31 (callingA -> callingB ) ; .)
    REPLAY          reduce using rule 31 (callingA -> callingB ) ; .)
    SAMPLE          reduce using rule 31 (callingA -> callingB ) ; .)
    #               reduce using rule 31 (callingA -> callingB ) ; .)
    PIPE            reduce using rule 31 (callingA -> callingB ) ; .)
    WHERE           reduce using rule 31 (callingA -> callingB ) ; .)
    CLEAR           reduce using rule 31 (callingA -> callingB ) ; .)
    OVAL            reduce using rule 31 (callingA -> callingB ) ; .)
    TRIO            reduce using rule 31 (callingA -> callingB ) ; .)
    QUAD            reduce using rule 31 (callingA -> callingB ) ; .)
    ARC             reduce using rule 31 (callingA -> callingB ) ; .)
    END             reduce using rule 31 (callingA -> callingB ) ; .)
    }               reduce using rule 31 (callingA -> callingB ) ; .)


state 183

    (35) callingC -> , . sumXparam callingB
    (37) sumXparam -> .

    (               reduce using rule 37 (sumXparam -> .)
    ID              reduce using rule 37 (sumXparam -> .)
    CTE_INTEGER     reduce using rule 37 (sumXparam -> .)
    CTE_FLOAT       reduce using rule 37 (sumXparam -> .)
    TRUE            reduce using rule 37 (sumXparam -> .)
    FALSE           reduce using rule 37 (sumXparam -> .)

    sumXparam                      shift and go to state 197

state 184

    (33) callingB -> expression checkParam callingC .

    )               reduce using rule 33 (callingB -> expression checkParam callingC .)


state 185

    (36) callingC -> empty .

    )               reduce using rule 36 (callingC -> empty .)


state 186

    (45) condition -> IF ( expression ) gotoFalse block conditionA . continueGo
    (112) continueGo -> .

    MOD             reduce using rule 112 (continueGo -> .)
    ID              reduce using rule 112 (continueGo -> .)
    IF              reduce using rule 112 (continueGo -> .)
    ECHO            reduce using rule 112 (continueGo -> .)
    WHILE           reduce using rule 112 (continueGo -> .)
    REPLAY          reduce using rule 112 (continueGo -> .)
    SAMPLE          reduce using rule 112 (continueGo -> .)
    #               reduce using rule 112 (continueGo -> .)
    PIPE            reduce using rule 112 (continueGo -> .)
    WHERE           reduce using rule 112 (continueGo -> .)
    CLEAR           reduce using rule 112 (continueGo -> .)
    OVAL            reduce using rule 112 (continueGo -> .)
    TRIO            reduce using rule 112 (continueGo -> .)
    QUAD            reduce using rule 112 (continueGo -> .)
    ARC             reduce using rule 112 (continueGo -> .)
    END             reduce using rule 112 (continueGo -> .)
    }               reduce using rule 112 (continueGo -> .)

    continueGo                     shift and go to state 198

state 187

    (47) conditionA -> empty .

    MOD             reduce using rule 47 (conditionA -> empty .)
    ID              reduce using rule 47 (conditionA -> empty .)
    IF              reduce using rule 47 (conditionA -> empty .)
    ECHO            reduce using rule 47 (conditionA -> empty .)
    WHILE           reduce using rule 47 (conditionA -> empty .)
    REPLAY          reduce using rule 47 (conditionA -> empty .)
    SAMPLE          reduce using rule 47 (conditionA -> empty .)
    #               reduce using rule 47 (conditionA -> empty .)
    PIPE            reduce using rule 47 (conditionA -> empty .)
    WHERE           reduce using rule 47 (conditionA -> empty .)
    CLEAR           reduce using rule 47 (conditionA -> empty .)
    OVAL            reduce using rule 47 (conditionA -> empty .)
    TRIO            reduce using rule 47 (conditionA -> empty .)
    QUAD            reduce using rule 47 (conditionA -> empty .)
    ARC             reduce using rule 47 (conditionA -> empty .)
    END             reduce using rule 47 (conditionA -> empty .)
    }               reduce using rule 47 (conditionA -> empty .)


state 188

    (46) conditionA -> ELSE . gotoE block
    (109) gotoE -> .

    {               reduce using rule 109 (gotoE -> .)

    gotoE                          shift and go to state 199

state 189

    (61) commandA -> ON move exp CTE_INTEGER color ; .

    MOD             reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    ID              reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    IF              reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    ECHO            reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    WHILE           reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    REPLAY          reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    SAMPLE          reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    #               reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    PIPE            reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    WHERE           reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    CLEAR           reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    OVAL            reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    TRIO            reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    QUAD            reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    ARC             reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    END             reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    ]               reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)
    }               reduce using rule 61 (commandA -> ON move exp CTE_INTEGER color ; .)


state 190

    (19) moduleA -> ( vars ) . block
    (38) block -> . { blockA

    {               shift and go to state 153

    block                          shift and go to state 200

state 191

    (22) vars -> type ID . varsA
    (23) varsA -> . , vars
    (24) varsA -> . empty
    (116) empty -> .

    ,               shift and go to state 202
    )               reduce using rule 116 (empty -> .)

    varsA                          shift and go to state 201
    empty                          shift and go to state 203

state 192

    (43) blockC -> empty .

    }               reduce using rule 43 (blockC -> empty .)


state 193

    (41) blockB -> statute blockC .

    }               reduce using rule 41 (blockB -> statute blockC .)


state 194

    (42) blockC -> blockB .

    }               reduce using rule 42 (blockC -> blockB .)


state 195

    (39) blockA -> blockB } .

    MOD             reduce using rule 39 (blockA -> blockB } .)
    ID              reduce using rule 39 (blockA -> blockB } .)
    IF              reduce using rule 39 (blockA -> blockB } .)
    ECHO            reduce using rule 39 (blockA -> blockB } .)
    WHILE           reduce using rule 39 (blockA -> blockB } .)
    REPLAY          reduce using rule 39 (blockA -> blockB } .)
    SAMPLE          reduce using rule 39 (blockA -> blockB } .)
    #               reduce using rule 39 (blockA -> blockB } .)
    PIPE            reduce using rule 39 (blockA -> blockB } .)
    WHERE           reduce using rule 39 (blockA -> blockB } .)
    CLEAR           reduce using rule 39 (blockA -> blockB } .)
    OVAL            reduce using rule 39 (blockA -> blockB } .)
    TRIO            reduce using rule 39 (blockA -> blockB } .)
    QUAD            reduce using rule 39 (blockA -> blockB } .)
    ARC             reduce using rule 39 (blockA -> blockB } .)
    END             reduce using rule 39 (blockA -> blockB } .)
    ELSE            reduce using rule 39 (blockA -> blockB } .)
    }               reduce using rule 39 (blockA -> blockB } .)


state 196

    (63) cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .

    MOD             reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    ID              reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    IF              reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    ECHO            reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    WHILE           reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    REPLAY          reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    SAMPLE          reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    #               reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    PIPE            reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    WHERE           reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    CLEAR           reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    OVAL            reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    TRIO            reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    QUAD            reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    ARC             reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    END             reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    }               reduce using rule 63 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)


state 197

    (35) callingC -> , sumXparam . callingB
    (33) callingB -> . expression checkParam callingC
    (68) expression -> . exp = = exp
    (69) expression -> . exp < > exp
    (70) expression -> . exp < = exp
    (71) expression -> . exp > = exp
    (72) expression -> . exp > exp
    (73) expression -> . exp < exp
    (74) expression -> . exp AND exp
    (75) expression -> . exp OR exp
    (76) expression -> . exp empty
    (77) exp -> . exp + exp
    (78) exp -> . exp - exp
    (79) exp -> . exp * exp
    (80) exp -> . exp / exp
    (81) exp -> . factor empty
    (82) factor -> . ( expression )
    (83) factor -> . var_cte
    (103) var_cte -> . ID
    (104) var_cte -> . CTE_INTEGER
    (105) var_cte -> . CTE_FLOAT
    (106) var_cte -> . TRUE
    (107) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    callingB                       shift and go to state 204
    exp                            shift and go to state 51
    factor                         shift and go to state 40
    expression                     shift and go to state 143

state 198

    (45) condition -> IF ( expression ) gotoFalse block conditionA continueGo .

    MOD             reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    ID              reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    IF              reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    ECHO            reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    WHILE           reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    REPLAY          reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    SAMPLE          reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    #               reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    PIPE            reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    WHERE           reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    CLEAR           reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    OVAL            reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    TRIO            reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    QUAD            reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    ARC             reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    END             reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    }               reduce using rule 45 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)


state 199

    (46) conditionA -> ELSE gotoE . block
    (38) block -> . { blockA

    {               shift and go to state 153

    block                          shift and go to state 205

state 200

    (19) moduleA -> ( vars ) block .

    MOD             reduce using rule 19 (moduleA -> ( vars ) block .)
    ID              reduce using rule 19 (moduleA -> ( vars ) block .)
    IF              reduce using rule 19 (moduleA -> ( vars ) block .)
    ECHO            reduce using rule 19 (moduleA -> ( vars ) block .)
    WHILE           reduce using rule 19 (moduleA -> ( vars ) block .)
    REPLAY          reduce using rule 19 (moduleA -> ( vars ) block .)
    SAMPLE          reduce using rule 19 (moduleA -> ( vars ) block .)
    #               reduce using rule 19 (moduleA -> ( vars ) block .)
    PIPE            reduce using rule 19 (moduleA -> ( vars ) block .)
    WHERE           reduce using rule 19 (moduleA -> ( vars ) block .)
    CLEAR           reduce using rule 19 (moduleA -> ( vars ) block .)
    OVAL            reduce using rule 19 (moduleA -> ( vars ) block .)
    TRIO            reduce using rule 19 (moduleA -> ( vars ) block .)
    QUAD            reduce using rule 19 (moduleA -> ( vars ) block .)
    ARC             reduce using rule 19 (moduleA -> ( vars ) block .)
    END             reduce using rule 19 (moduleA -> ( vars ) block .)


state 201

    (22) vars -> type ID varsA .

    )               reduce using rule 22 (vars -> type ID varsA .)


state 202

    (23) varsA -> , . vars
    (22) vars -> . type ID varsA
    (25) type -> . INT
    (26) type -> . FLOAT
    (27) type -> . BOOL

    INT             shift and go to state 171
    FLOAT           shift and go to state 170
    BOOL            shift and go to state 172

    type                           shift and go to state 173
    vars                           shift and go to state 206

state 203

    (24) varsA -> empty .

    )               reduce using rule 24 (varsA -> empty .)


state 204

    (35) callingC -> , sumXparam callingB .

    )               reduce using rule 35 (callingC -> , sumXparam callingB .)


state 205

    (46) conditionA -> ELSE gotoE block .

    MOD             reduce using rule 46 (conditionA -> ELSE gotoE block .)
    ID              reduce using rule 46 (conditionA -> ELSE gotoE block .)
    IF              reduce using rule 46 (conditionA -> ELSE gotoE block .)
    ECHO            reduce using rule 46 (conditionA -> ELSE gotoE block .)
    WHILE           reduce using rule 46 (conditionA -> ELSE gotoE block .)
    REPLAY          reduce using rule 46 (conditionA -> ELSE gotoE block .)
    SAMPLE          reduce using rule 46 (conditionA -> ELSE gotoE block .)
    #               reduce using rule 46 (conditionA -> ELSE gotoE block .)
    PIPE            reduce using rule 46 (conditionA -> ELSE gotoE block .)
    WHERE           reduce using rule 46 (conditionA -> ELSE gotoE block .)
    CLEAR           reduce using rule 46 (conditionA -> ELSE gotoE block .)
    OVAL            reduce using rule 46 (conditionA -> ELSE gotoE block .)
    TRIO            reduce using rule 46 (conditionA -> ELSE gotoE block .)
    QUAD            reduce using rule 46 (conditionA -> ELSE gotoE block .)
    ARC             reduce using rule 46 (conditionA -> ELSE gotoE block .)
    END             reduce using rule 46 (conditionA -> ELSE gotoE block .)
    }               reduce using rule 46 (conditionA -> ELSE gotoE block .)


state 206

    (23) varsA -> , vars .

    )               reduce using rule 23 (varsA -> , vars .)

