Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> INIT programA
Rule 2     programA -> programB END
Rule 3     programA -> END
Rule 4     programB -> workspace programC
Rule 5     programC -> programB
Rule 6     programC -> empty
Rule 7     workspace -> statute
Rule 8     workspace -> module
Rule 9     statute -> assign
Rule 10    statute -> condition
Rule 11    statute -> write
Rule 12    statute -> cycle
Rule 13    statute -> repeat
Rule 14    statute -> command
Rule 15    statute -> calling
Rule 16    statute -> pipeline
Rule 17    statute -> screen
Rule 18    module -> MOD # ID insertQuadMod moduleA endMod
Rule 19    moduleA -> ( vars ) block
Rule 20    moduleA -> block
Rule 21    vars -> type ID varsA
Rule 22    varsA -> , vars
Rule 23    varsA -> empty
Rule 24    type -> INT
Rule 25    type -> FLOAT
Rule 26    type -> BOOL
Rule 27    calling -> # callID ( insertEra callingA
Rule 28    callID -> ID
Rule 29    insertEra -> <empty>
Rule 30    callingA -> callingB ) ;
Rule 31    callingA -> ) ;
Rule 32    callingB -> expression checkParam callingC
Rule 33    checkParam -> <empty>
Rule 34    callingC -> , sumXparam callingB
Rule 35    callingC -> empty
Rule 36    sumXparam -> <empty>
Rule 37    block -> { blockA
Rule 38    blockA -> blockB }
Rule 39    blockA -> }
Rule 40    blockB -> statute blockC
Rule 41    blockC -> blockB
Rule 42    blockC -> empty
Rule 43    assign -> ID = expression ;
Rule 44    condition -> IF ( expression ) gotoFalse block conditionA continueGo
Rule 45    conditionA -> ELSE gotoE block
Rule 46    conditionA -> empty
Rule 47    write -> ECHO writeA ;
Rule 48    writeA -> expression
Rule 49    writeA -> CTE_STRING
Rule 50    pipeline -> PIPE ID pipelineA
Rule 51    pipelineA -> [ pipelineB ] ;
Rule 52    pipelineA -> IN ( var_cte ) ;
Rule 53    pipelineA -> OUT ( ) ;
Rule 54    pipelineA -> COUNT ;
Rule 55    pipelineB -> exp pipelineC
Rule 56    pipelineC -> , pipelineB
Rule 57    pipelineC -> empty
Rule 58    command -> figure exp exp color ;
Rule 59    command -> SAMPLE commandA
Rule 60    commandA -> ON move exp CTE_INTEGER color ;
Rule 61    commandA -> OFF move exp ;
Rule 62    cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW
Rule 63    repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ;
Rule 64    repeatA -> command repeatB
Rule 65    repeatB -> repeatA
Rule 66    repeatB -> empty
Rule 67    expression -> exp = = exp
Rule 68    expression -> exp < > exp
Rule 69    expression -> exp < = exp
Rule 70    expression -> exp > = exp
Rule 71    expression -> exp > exp
Rule 72    expression -> exp < exp
Rule 73    expression -> exp AND exp
Rule 74    expression -> exp OR exp
Rule 75    expression -> exp empty
Rule 76    exp -> exp + exp
Rule 77    exp -> exp - exp
Rule 78    exp -> exp * exp
Rule 79    exp -> exp / exp
Rule 80    exp -> factor empty
Rule 81    factor -> ( expression )
Rule 82    factor -> var_cte
Rule 83    figure -> OVAL
Rule 84    figure -> TRIO
Rule 85    figure -> QUAD
Rule 86    figure -> ARC
Rule 87    move -> UP
Rule 88    move -> DOWN
Rule 89    move -> LEFT
Rule 90    move -> RIGHT
Rule 91    color -> RED
Rule 92    color -> YELLOW
Rule 93    color -> BLUE
Rule 94    color -> GREEN
Rule 95    color -> BLACK
Rule 96    color -> ORANGE
Rule 97    color -> PURPLE
Rule 98    color -> CYAN
Rule 99    screen -> WHERE
Rule 100   screen -> CLEAR
Rule 101   var_cte -> ID
Rule 102   var_cte -> CTE_INTEGER
Rule 103   var_cte -> CTE_FLOAT
Rule 104   var_cte -> TRUE
Rule 105   var_cte -> FALSE
Rule 106   gotoFalse -> <empty>
Rule 107   gotoE -> <empty>
Rule 108   gotoW -> <empty>
Rule 109   gotoR -> <empty>
Rule 110   continueGo -> <empty>
Rule 111   continueGoW -> <empty>
Rule 112   insertQuadMod -> <empty>
Rule 113   endMod -> <empty>
Rule 114   empty -> <empty>

Terminals, with rules where they appear

#                    : 18 27
(                    : 19 27 44 52 53 62 81
)                    : 19 30 31 44 52 53 62 81
*                    : 78
+                    : 76
,                    : 22 34 56
-                    : 77
/                    : 79
;                    : 30 31 43 47 51 52 53 54 58 60 61 63
<                    : 68 69 72
=                    : 43 67 67 69 70
>                    : 68 70 71
AND                  : 73
ARC                  : 86
BLACK                : 95
BLUE                 : 93
BOOL                 : 26
CLEAR                : 100
COUNT                : 54
CTE_FLOAT            : 103
CTE_INTEGER          : 60 63 102
CTE_STRING           : 49
CYAN                 : 98
DOWN                 : 88
ECHO                 : 47
ELSE                 : 45
END                  : 2 3
FALSE                : 105
FLOAT                : 25
GREEN                : 94
ID                   : 18 21 28 43 50 101
IF                   : 44
IN                   : 52
INIT                 : 1
INT                  : 24
LEFT                 : 89
MOD                  : 18
OFF                  : 61
ON                   : 60
OR                   : 74
ORANGE               : 96
OUT                  : 53
OVAL                 : 83
PIPE                 : 50
PURPLE               : 97
QUAD                 : 85
RED                  : 91
REPLAY               : 63
RIGHT                : 90
SAMPLE               : 59
TRIO                 : 84
TRUE                 : 104
UP                   : 87
WHERE                : 99
WHILE                : 62
YELLOW               : 92
[                    : 51 63
]                    : 51 63
error                : 
{                    : 37
}                    : 38 39

Nonterminals, with rules where they appear

assign               : 9
block                : 19 20 44 45 62
blockA               : 37
blockB               : 38 41
blockC               : 40
callID               : 27
calling              : 15
callingA             : 27
callingB             : 30 34
callingC             : 32
checkParam           : 32
color                : 58 60
command              : 14 64
commandA             : 59
condition            : 10
conditionA           : 44
continueGo           : 44
continueGoW          : 62
cycle                : 12
empty                : 6 23 35 42 46 57 66 75 80
endMod               : 18
exp                  : 55 58 58 60 61 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 76 76 77 77 78 78 79 79
expression           : 32 43 44 48 62 81
factor               : 80
figure               : 58
gotoE                : 45
gotoFalse            : 44 62
gotoR                : 63
gotoW                : 62
insertEra            : 27
insertQuadMod        : 18
module               : 8
moduleA              : 18
move                 : 60 61
pipeline             : 16
pipelineA            : 50
pipelineB            : 51 56
pipelineC            : 55
program              : 0
programA             : 1
programB             : 2 5
programC             : 4
repeat               : 13
repeatA              : 63 65
repeatB              : 64
screen               : 17
statute              : 7 40
sumXparam            : 34
type                 : 21
var_cte              : 52 82
vars                 : 19 22
varsA                : 21
workspace            : 4
write                : 11
writeA               : 47

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . INIT programA

    INIT            shift and go to state 1

    program                        shift and go to state 2

state 1

    (1) program -> INIT . programA
    (2) programA -> . programB END
    (3) programA -> . END
    (4) programB -> . workspace programC
    (7) workspace -> . statute
    (8) workspace -> . module
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . cycle
    (13) statute -> . repeat
    (14) statute -> . command
    (15) statute -> . calling
    (16) statute -> . pipeline
    (17) statute -> . screen
    (18) module -> . MOD # ID insertQuadMod moduleA endMod
    (43) assign -> . ID = expression ;
    (44) condition -> . IF ( expression ) gotoFalse block conditionA continueGo
    (47) write -> . ECHO writeA ;
    (62) cycle -> . WHILE gotoW ( expression ) gotoFalse block continueGoW
    (63) repeat -> . REPLAY CTE_INTEGER gotoR [ repeatA ] ;
    (58) command -> . figure exp exp color ;
    (59) command -> . SAMPLE commandA
    (27) calling -> . # callID ( insertEra callingA
    (50) pipeline -> . PIPE ID pipelineA
    (99) screen -> . WHERE
    (100) screen -> . CLEAR
    (83) figure -> . OVAL
    (84) figure -> . TRIO
    (85) figure -> . QUAD
    (86) figure -> . ARC

    END             shift and go to state 16
    MOD             shift and go to state 33
    ID              shift and go to state 23
    IF              shift and go to state 12
    ECHO            shift and go to state 18
    WHILE           shift and go to state 6
    REPLAY          shift and go to state 7
    SAMPLE          shift and go to state 19
    #               shift and go to state 9
    PIPE            shift and go to state 8
    WHERE           shift and go to state 28
    CLEAR           shift and go to state 13
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    module                         shift and go to state 4
    write                          shift and go to state 10
    condition                      shift and go to state 11
    repeat                         shift and go to state 15
    screen                         shift and go to state 17
    programB                       shift and go to state 21
    cycle                          shift and go to state 24
    statute                        shift and go to state 25
    pipeline                       shift and go to state 26
    calling                        shift and go to state 27
    command                        shift and go to state 30
    workspace                      shift and go to state 31
    assign                         shift and go to state 32
    programA                       shift and go to state 20

state 2

    (0) S' -> program .



state 3

    (58) command -> figure . exp exp color ;
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 39
    factor                         shift and go to state 40

state 4

    (8) workspace -> module .

    MOD             reduce using rule 8 (workspace -> module .)
    ID              reduce using rule 8 (workspace -> module .)
    IF              reduce using rule 8 (workspace -> module .)
    ECHO            reduce using rule 8 (workspace -> module .)
    WHILE           reduce using rule 8 (workspace -> module .)
    REPLAY          reduce using rule 8 (workspace -> module .)
    SAMPLE          reduce using rule 8 (workspace -> module .)
    #               reduce using rule 8 (workspace -> module .)
    PIPE            reduce using rule 8 (workspace -> module .)
    WHERE           reduce using rule 8 (workspace -> module .)
    CLEAR           reduce using rule 8 (workspace -> module .)
    OVAL            reduce using rule 8 (workspace -> module .)
    TRIO            reduce using rule 8 (workspace -> module .)
    QUAD            reduce using rule 8 (workspace -> module .)
    ARC             reduce using rule 8 (workspace -> module .)
    END             reduce using rule 8 (workspace -> module .)


state 5

    (83) figure -> OVAL .

    (               reduce using rule 83 (figure -> OVAL .)
    ID              reduce using rule 83 (figure -> OVAL .)
    CTE_INTEGER     reduce using rule 83 (figure -> OVAL .)
    CTE_FLOAT       reduce using rule 83 (figure -> OVAL .)
    TRUE            reduce using rule 83 (figure -> OVAL .)
    FALSE           reduce using rule 83 (figure -> OVAL .)


state 6

    (62) cycle -> WHILE . gotoW ( expression ) gotoFalse block continueGoW
    (108) gotoW -> .

    (               reduce using rule 108 (gotoW -> .)

    gotoW                          shift and go to state 43

state 7

    (63) repeat -> REPLAY . CTE_INTEGER gotoR [ repeatA ] ;

    CTE_INTEGER     shift and go to state 44


state 8

    (50) pipeline -> PIPE . ID pipelineA

    ID              shift and go to state 45


state 9

    (27) calling -> # . callID ( insertEra callingA
    (28) callID -> . ID

    ID              shift and go to state 47

    callID                         shift and go to state 46

state 10

    (11) statute -> write .

    MOD             reduce using rule 11 (statute -> write .)
    ID              reduce using rule 11 (statute -> write .)
    IF              reduce using rule 11 (statute -> write .)
    ECHO            reduce using rule 11 (statute -> write .)
    WHILE           reduce using rule 11 (statute -> write .)
    REPLAY          reduce using rule 11 (statute -> write .)
    SAMPLE          reduce using rule 11 (statute -> write .)
    #               reduce using rule 11 (statute -> write .)
    PIPE            reduce using rule 11 (statute -> write .)
    WHERE           reduce using rule 11 (statute -> write .)
    CLEAR           reduce using rule 11 (statute -> write .)
    OVAL            reduce using rule 11 (statute -> write .)
    TRIO            reduce using rule 11 (statute -> write .)
    QUAD            reduce using rule 11 (statute -> write .)
    ARC             reduce using rule 11 (statute -> write .)
    END             reduce using rule 11 (statute -> write .)
    }               reduce using rule 11 (statute -> write .)


state 11

    (10) statute -> condition .

    MOD             reduce using rule 10 (statute -> condition .)
    ID              reduce using rule 10 (statute -> condition .)
    IF              reduce using rule 10 (statute -> condition .)
    ECHO            reduce using rule 10 (statute -> condition .)
    WHILE           reduce using rule 10 (statute -> condition .)
    REPLAY          reduce using rule 10 (statute -> condition .)
    SAMPLE          reduce using rule 10 (statute -> condition .)
    #               reduce using rule 10 (statute -> condition .)
    PIPE            reduce using rule 10 (statute -> condition .)
    WHERE           reduce using rule 10 (statute -> condition .)
    CLEAR           reduce using rule 10 (statute -> condition .)
    OVAL            reduce using rule 10 (statute -> condition .)
    TRIO            reduce using rule 10 (statute -> condition .)
    QUAD            reduce using rule 10 (statute -> condition .)
    ARC             reduce using rule 10 (statute -> condition .)
    END             reduce using rule 10 (statute -> condition .)
    }               reduce using rule 10 (statute -> condition .)


state 12

    (44) condition -> IF . ( expression ) gotoFalse block conditionA continueGo

    (               shift and go to state 48


state 13

    (100) screen -> CLEAR .

    ID              reduce using rule 100 (screen -> CLEAR .)
    IF              reduce using rule 100 (screen -> CLEAR .)
    ECHO            reduce using rule 100 (screen -> CLEAR .)
    WHILE           reduce using rule 100 (screen -> CLEAR .)
    REPLAY          reduce using rule 100 (screen -> CLEAR .)
    SAMPLE          reduce using rule 100 (screen -> CLEAR .)
    #               reduce using rule 100 (screen -> CLEAR .)
    PIPE            reduce using rule 100 (screen -> CLEAR .)
    WHERE           reduce using rule 100 (screen -> CLEAR .)
    CLEAR           reduce using rule 100 (screen -> CLEAR .)
    OVAL            reduce using rule 100 (screen -> CLEAR .)
    TRIO            reduce using rule 100 (screen -> CLEAR .)
    QUAD            reduce using rule 100 (screen -> CLEAR .)
    ARC             reduce using rule 100 (screen -> CLEAR .)
    }               reduce using rule 100 (screen -> CLEAR .)
    MOD             reduce using rule 100 (screen -> CLEAR .)
    END             reduce using rule 100 (screen -> CLEAR .)


state 14

    (84) figure -> TRIO .

    (               reduce using rule 84 (figure -> TRIO .)
    ID              reduce using rule 84 (figure -> TRIO .)
    CTE_INTEGER     reduce using rule 84 (figure -> TRIO .)
    CTE_FLOAT       reduce using rule 84 (figure -> TRIO .)
    TRUE            reduce using rule 84 (figure -> TRIO .)
    FALSE           reduce using rule 84 (figure -> TRIO .)


state 15

    (13) statute -> repeat .

    MOD             reduce using rule 13 (statute -> repeat .)
    ID              reduce using rule 13 (statute -> repeat .)
    IF              reduce using rule 13 (statute -> repeat .)
    ECHO            reduce using rule 13 (statute -> repeat .)
    WHILE           reduce using rule 13 (statute -> repeat .)
    REPLAY          reduce using rule 13 (statute -> repeat .)
    SAMPLE          reduce using rule 13 (statute -> repeat .)
    #               reduce using rule 13 (statute -> repeat .)
    PIPE            reduce using rule 13 (statute -> repeat .)
    WHERE           reduce using rule 13 (statute -> repeat .)
    CLEAR           reduce using rule 13 (statute -> repeat .)
    OVAL            reduce using rule 13 (statute -> repeat .)
    TRIO            reduce using rule 13 (statute -> repeat .)
    QUAD            reduce using rule 13 (statute -> repeat .)
    ARC             reduce using rule 13 (statute -> repeat .)
    END             reduce using rule 13 (statute -> repeat .)
    }               reduce using rule 13 (statute -> repeat .)


state 16

    (3) programA -> END .

    $end            reduce using rule 3 (programA -> END .)


state 17

    (17) statute -> screen .

    MOD             reduce using rule 17 (statute -> screen .)
    ID              reduce using rule 17 (statute -> screen .)
    IF              reduce using rule 17 (statute -> screen .)
    ECHO            reduce using rule 17 (statute -> screen .)
    WHILE           reduce using rule 17 (statute -> screen .)
    REPLAY          reduce using rule 17 (statute -> screen .)
    SAMPLE          reduce using rule 17 (statute -> screen .)
    #               reduce using rule 17 (statute -> screen .)
    PIPE            reduce using rule 17 (statute -> screen .)
    WHERE           reduce using rule 17 (statute -> screen .)
    CLEAR           reduce using rule 17 (statute -> screen .)
    OVAL            reduce using rule 17 (statute -> screen .)
    TRIO            reduce using rule 17 (statute -> screen .)
    QUAD            reduce using rule 17 (statute -> screen .)
    ARC             reduce using rule 17 (statute -> screen .)
    END             reduce using rule 17 (statute -> screen .)
    }               reduce using rule 17 (statute -> screen .)


state 18

    (47) write -> ECHO . writeA ;
    (48) writeA -> . expression
    (49) writeA -> . CTE_STRING
    (67) expression -> . exp = = exp
    (68) expression -> . exp < > exp
    (69) expression -> . exp < = exp
    (70) expression -> . exp > = exp
    (71) expression -> . exp > exp
    (72) expression -> . exp < exp
    (73) expression -> . exp AND exp
    (74) expression -> . exp OR exp
    (75) expression -> . exp empty
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    CTE_STRING      shift and go to state 50
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 51
    factor                         shift and go to state 40
    writeA                         shift and go to state 49
    expression                     shift and go to state 52

state 19

    (59) command -> SAMPLE . commandA
    (60) commandA -> . ON move exp CTE_INTEGER color ;
    (61) commandA -> . OFF move exp ;

    ON              shift and go to state 55
    OFF             shift and go to state 54

    commandA                       shift and go to state 53

state 20

    (1) program -> INIT programA .

    $end            reduce using rule 1 (program -> INIT programA .)


state 21

    (2) programA -> programB . END

    END             shift and go to state 56


state 22

    (85) figure -> QUAD .

    (               reduce using rule 85 (figure -> QUAD .)
    ID              reduce using rule 85 (figure -> QUAD .)
    CTE_INTEGER     reduce using rule 85 (figure -> QUAD .)
    CTE_FLOAT       reduce using rule 85 (figure -> QUAD .)
    TRUE            reduce using rule 85 (figure -> QUAD .)
    FALSE           reduce using rule 85 (figure -> QUAD .)


state 23

    (43) assign -> ID . = expression ;

    =               shift and go to state 57


state 24

    (12) statute -> cycle .

    MOD             reduce using rule 12 (statute -> cycle .)
    ID              reduce using rule 12 (statute -> cycle .)
    IF              reduce using rule 12 (statute -> cycle .)
    ECHO            reduce using rule 12 (statute -> cycle .)
    WHILE           reduce using rule 12 (statute -> cycle .)
    REPLAY          reduce using rule 12 (statute -> cycle .)
    SAMPLE          reduce using rule 12 (statute -> cycle .)
    #               reduce using rule 12 (statute -> cycle .)
    PIPE            reduce using rule 12 (statute -> cycle .)
    WHERE           reduce using rule 12 (statute -> cycle .)
    CLEAR           reduce using rule 12 (statute -> cycle .)
    OVAL            reduce using rule 12 (statute -> cycle .)
    TRIO            reduce using rule 12 (statute -> cycle .)
    QUAD            reduce using rule 12 (statute -> cycle .)
    ARC             reduce using rule 12 (statute -> cycle .)
    END             reduce using rule 12 (statute -> cycle .)
    }               reduce using rule 12 (statute -> cycle .)


state 25

    (7) workspace -> statute .

    MOD             reduce using rule 7 (workspace -> statute .)
    ID              reduce using rule 7 (workspace -> statute .)
    IF              reduce using rule 7 (workspace -> statute .)
    ECHO            reduce using rule 7 (workspace -> statute .)
    WHILE           reduce using rule 7 (workspace -> statute .)
    REPLAY          reduce using rule 7 (workspace -> statute .)
    SAMPLE          reduce using rule 7 (workspace -> statute .)
    #               reduce using rule 7 (workspace -> statute .)
    PIPE            reduce using rule 7 (workspace -> statute .)
    WHERE           reduce using rule 7 (workspace -> statute .)
    CLEAR           reduce using rule 7 (workspace -> statute .)
    OVAL            reduce using rule 7 (workspace -> statute .)
    TRIO            reduce using rule 7 (workspace -> statute .)
    QUAD            reduce using rule 7 (workspace -> statute .)
    ARC             reduce using rule 7 (workspace -> statute .)
    END             reduce using rule 7 (workspace -> statute .)


state 26

    (16) statute -> pipeline .

    MOD             reduce using rule 16 (statute -> pipeline .)
    ID              reduce using rule 16 (statute -> pipeline .)
    IF              reduce using rule 16 (statute -> pipeline .)
    ECHO            reduce using rule 16 (statute -> pipeline .)
    WHILE           reduce using rule 16 (statute -> pipeline .)
    REPLAY          reduce using rule 16 (statute -> pipeline .)
    SAMPLE          reduce using rule 16 (statute -> pipeline .)
    #               reduce using rule 16 (statute -> pipeline .)
    PIPE            reduce using rule 16 (statute -> pipeline .)
    WHERE           reduce using rule 16 (statute -> pipeline .)
    CLEAR           reduce using rule 16 (statute -> pipeline .)
    OVAL            reduce using rule 16 (statute -> pipeline .)
    TRIO            reduce using rule 16 (statute -> pipeline .)
    QUAD            reduce using rule 16 (statute -> pipeline .)
    ARC             reduce using rule 16 (statute -> pipeline .)
    END             reduce using rule 16 (statute -> pipeline .)
    }               reduce using rule 16 (statute -> pipeline .)


state 27

    (15) statute -> calling .

    MOD             reduce using rule 15 (statute -> calling .)
    ID              reduce using rule 15 (statute -> calling .)
    IF              reduce using rule 15 (statute -> calling .)
    ECHO            reduce using rule 15 (statute -> calling .)
    WHILE           reduce using rule 15 (statute -> calling .)
    REPLAY          reduce using rule 15 (statute -> calling .)
    SAMPLE          reduce using rule 15 (statute -> calling .)
    #               reduce using rule 15 (statute -> calling .)
    PIPE            reduce using rule 15 (statute -> calling .)
    WHERE           reduce using rule 15 (statute -> calling .)
    CLEAR           reduce using rule 15 (statute -> calling .)
    OVAL            reduce using rule 15 (statute -> calling .)
    TRIO            reduce using rule 15 (statute -> calling .)
    QUAD            reduce using rule 15 (statute -> calling .)
    ARC             reduce using rule 15 (statute -> calling .)
    END             reduce using rule 15 (statute -> calling .)
    }               reduce using rule 15 (statute -> calling .)


state 28

    (99) screen -> WHERE .

    ID              reduce using rule 99 (screen -> WHERE .)
    IF              reduce using rule 99 (screen -> WHERE .)
    ECHO            reduce using rule 99 (screen -> WHERE .)
    WHILE           reduce using rule 99 (screen -> WHERE .)
    REPLAY          reduce using rule 99 (screen -> WHERE .)
    SAMPLE          reduce using rule 99 (screen -> WHERE .)
    #               reduce using rule 99 (screen -> WHERE .)
    PIPE            reduce using rule 99 (screen -> WHERE .)
    WHERE           reduce using rule 99 (screen -> WHERE .)
    CLEAR           reduce using rule 99 (screen -> WHERE .)
    OVAL            reduce using rule 99 (screen -> WHERE .)
    TRIO            reduce using rule 99 (screen -> WHERE .)
    QUAD            reduce using rule 99 (screen -> WHERE .)
    ARC             reduce using rule 99 (screen -> WHERE .)
    }               reduce using rule 99 (screen -> WHERE .)
    MOD             reduce using rule 99 (screen -> WHERE .)
    END             reduce using rule 99 (screen -> WHERE .)


state 29

    (86) figure -> ARC .

    (               reduce using rule 86 (figure -> ARC .)
    ID              reduce using rule 86 (figure -> ARC .)
    CTE_INTEGER     reduce using rule 86 (figure -> ARC .)
    CTE_FLOAT       reduce using rule 86 (figure -> ARC .)
    TRUE            reduce using rule 86 (figure -> ARC .)
    FALSE           reduce using rule 86 (figure -> ARC .)


state 30

    (14) statute -> command .

    MOD             reduce using rule 14 (statute -> command .)
    ID              reduce using rule 14 (statute -> command .)
    IF              reduce using rule 14 (statute -> command .)
    ECHO            reduce using rule 14 (statute -> command .)
    WHILE           reduce using rule 14 (statute -> command .)
    REPLAY          reduce using rule 14 (statute -> command .)
    SAMPLE          reduce using rule 14 (statute -> command .)
    #               reduce using rule 14 (statute -> command .)
    PIPE            reduce using rule 14 (statute -> command .)
    WHERE           reduce using rule 14 (statute -> command .)
    CLEAR           reduce using rule 14 (statute -> command .)
    OVAL            reduce using rule 14 (statute -> command .)
    TRIO            reduce using rule 14 (statute -> command .)
    QUAD            reduce using rule 14 (statute -> command .)
    ARC             reduce using rule 14 (statute -> command .)
    END             reduce using rule 14 (statute -> command .)
    }               reduce using rule 14 (statute -> command .)


state 31

    (4) programB -> workspace . programC
    (5) programC -> . programB
    (6) programC -> . empty
    (4) programB -> . workspace programC
    (114) empty -> .
    (7) workspace -> . statute
    (8) workspace -> . module
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . cycle
    (13) statute -> . repeat
    (14) statute -> . command
    (15) statute -> . calling
    (16) statute -> . pipeline
    (17) statute -> . screen
    (18) module -> . MOD # ID insertQuadMod moduleA endMod
    (43) assign -> . ID = expression ;
    (44) condition -> . IF ( expression ) gotoFalse block conditionA continueGo
    (47) write -> . ECHO writeA ;
    (62) cycle -> . WHILE gotoW ( expression ) gotoFalse block continueGoW
    (63) repeat -> . REPLAY CTE_INTEGER gotoR [ repeatA ] ;
    (58) command -> . figure exp exp color ;
    (59) command -> . SAMPLE commandA
    (27) calling -> . # callID ( insertEra callingA
    (50) pipeline -> . PIPE ID pipelineA
    (99) screen -> . WHERE
    (100) screen -> . CLEAR
    (83) figure -> . OVAL
    (84) figure -> . TRIO
    (85) figure -> . QUAD
    (86) figure -> . ARC

    END             reduce using rule 114 (empty -> .)
    MOD             shift and go to state 33
    ID              shift and go to state 23
    IF              shift and go to state 12
    ECHO            shift and go to state 18
    WHILE           shift and go to state 6
    REPLAY          shift and go to state 7
    SAMPLE          shift and go to state 19
    #               shift and go to state 9
    PIPE            shift and go to state 8
    WHERE           shift and go to state 28
    CLEAR           shift and go to state 13
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    module                         shift and go to state 4
    write                          shift and go to state 10
    condition                      shift and go to state 11
    empty                          shift and go to state 58
    repeat                         shift and go to state 15
    screen                         shift and go to state 17
    programB                       shift and go to state 59
    programC                       shift and go to state 60
    cycle                          shift and go to state 24
    statute                        shift and go to state 25
    pipeline                       shift and go to state 26
    calling                        shift and go to state 27
    command                        shift and go to state 30
    workspace                      shift and go to state 31
    assign                         shift and go to state 32

state 32

    (9) statute -> assign .

    MOD             reduce using rule 9 (statute -> assign .)
    ID              reduce using rule 9 (statute -> assign .)
    IF              reduce using rule 9 (statute -> assign .)
    ECHO            reduce using rule 9 (statute -> assign .)
    WHILE           reduce using rule 9 (statute -> assign .)
    REPLAY          reduce using rule 9 (statute -> assign .)
    SAMPLE          reduce using rule 9 (statute -> assign .)
    #               reduce using rule 9 (statute -> assign .)
    PIPE            reduce using rule 9 (statute -> assign .)
    WHERE           reduce using rule 9 (statute -> assign .)
    CLEAR           reduce using rule 9 (statute -> assign .)
    OVAL            reduce using rule 9 (statute -> assign .)
    TRIO            reduce using rule 9 (statute -> assign .)
    QUAD            reduce using rule 9 (statute -> assign .)
    ARC             reduce using rule 9 (statute -> assign .)
    END             reduce using rule 9 (statute -> assign .)
    }               reduce using rule 9 (statute -> assign .)


state 33

    (18) module -> MOD . # ID insertQuadMod moduleA endMod

    #               shift and go to state 61


state 34

    (103) var_cte -> CTE_FLOAT .

    =               reduce using rule 103 (var_cte -> CTE_FLOAT .)
    <               reduce using rule 103 (var_cte -> CTE_FLOAT .)
    >               reduce using rule 103 (var_cte -> CTE_FLOAT .)
    AND             reduce using rule 103 (var_cte -> CTE_FLOAT .)
    OR              reduce using rule 103 (var_cte -> CTE_FLOAT .)
    +               reduce using rule 103 (var_cte -> CTE_FLOAT .)
    -               reduce using rule 103 (var_cte -> CTE_FLOAT .)
    *               reduce using rule 103 (var_cte -> CTE_FLOAT .)
    /               reduce using rule 103 (var_cte -> CTE_FLOAT .)
    ;               reduce using rule 103 (var_cte -> CTE_FLOAT .)
    )               reduce using rule 103 (var_cte -> CTE_FLOAT .)
    ,               reduce using rule 103 (var_cte -> CTE_FLOAT .)
    (               reduce using rule 103 (var_cte -> CTE_FLOAT .)
    ID              reduce using rule 103 (var_cte -> CTE_FLOAT .)
    CTE_INTEGER     reduce using rule 103 (var_cte -> CTE_FLOAT .)
    CTE_FLOAT       reduce using rule 103 (var_cte -> CTE_FLOAT .)
    TRUE            reduce using rule 103 (var_cte -> CTE_FLOAT .)
    FALSE           reduce using rule 103 (var_cte -> CTE_FLOAT .)
    RED             reduce using rule 103 (var_cte -> CTE_FLOAT .)
    YELLOW          reduce using rule 103 (var_cte -> CTE_FLOAT .)
    BLUE            reduce using rule 103 (var_cte -> CTE_FLOAT .)
    GREEN           reduce using rule 103 (var_cte -> CTE_FLOAT .)
    BLACK           reduce using rule 103 (var_cte -> CTE_FLOAT .)
    ORANGE          reduce using rule 103 (var_cte -> CTE_FLOAT .)
    PURPLE          reduce using rule 103 (var_cte -> CTE_FLOAT .)
    CYAN            reduce using rule 103 (var_cte -> CTE_FLOAT .)
    ]               reduce using rule 103 (var_cte -> CTE_FLOAT .)


state 35

    (81) factor -> ( . expression )
    (67) expression -> . exp = = exp
    (68) expression -> . exp < > exp
    (69) expression -> . exp < = exp
    (70) expression -> . exp > = exp
    (71) expression -> . exp > exp
    (72) expression -> . exp < exp
    (73) expression -> . exp AND exp
    (74) expression -> . exp OR exp
    (75) expression -> . exp empty
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    expression                     shift and go to state 62
    exp                            shift and go to state 51
    factor                         shift and go to state 40

state 36

    (82) factor -> var_cte .

    =               reduce using rule 82 (factor -> var_cte .)
    <               reduce using rule 82 (factor -> var_cte .)
    >               reduce using rule 82 (factor -> var_cte .)
    AND             reduce using rule 82 (factor -> var_cte .)
    OR              reduce using rule 82 (factor -> var_cte .)
    +               reduce using rule 82 (factor -> var_cte .)
    -               reduce using rule 82 (factor -> var_cte .)
    *               reduce using rule 82 (factor -> var_cte .)
    /               reduce using rule 82 (factor -> var_cte .)
    ;               reduce using rule 82 (factor -> var_cte .)
    ,               reduce using rule 82 (factor -> var_cte .)
    ]               reduce using rule 82 (factor -> var_cte .)
    )               reduce using rule 82 (factor -> var_cte .)
    (               reduce using rule 82 (factor -> var_cte .)
    ID              reduce using rule 82 (factor -> var_cte .)
    CTE_INTEGER     reduce using rule 82 (factor -> var_cte .)
    CTE_FLOAT       reduce using rule 82 (factor -> var_cte .)
    TRUE            reduce using rule 82 (factor -> var_cte .)
    FALSE           reduce using rule 82 (factor -> var_cte .)
    RED             reduce using rule 82 (factor -> var_cte .)
    YELLOW          reduce using rule 82 (factor -> var_cte .)
    BLUE            reduce using rule 82 (factor -> var_cte .)
    GREEN           reduce using rule 82 (factor -> var_cte .)
    BLACK           reduce using rule 82 (factor -> var_cte .)
    ORANGE          reduce using rule 82 (factor -> var_cte .)
    PURPLE          reduce using rule 82 (factor -> var_cte .)
    CYAN            reduce using rule 82 (factor -> var_cte .)


state 37

    (102) var_cte -> CTE_INTEGER .

    =               reduce using rule 102 (var_cte -> CTE_INTEGER .)
    <               reduce using rule 102 (var_cte -> CTE_INTEGER .)
    >               reduce using rule 102 (var_cte -> CTE_INTEGER .)
    AND             reduce using rule 102 (var_cte -> CTE_INTEGER .)
    OR              reduce using rule 102 (var_cte -> CTE_INTEGER .)
    +               reduce using rule 102 (var_cte -> CTE_INTEGER .)
    -               reduce using rule 102 (var_cte -> CTE_INTEGER .)
    *               reduce using rule 102 (var_cte -> CTE_INTEGER .)
    /               reduce using rule 102 (var_cte -> CTE_INTEGER .)
    ;               reduce using rule 102 (var_cte -> CTE_INTEGER .)
    )               reduce using rule 102 (var_cte -> CTE_INTEGER .)
    ,               reduce using rule 102 (var_cte -> CTE_INTEGER .)
    (               reduce using rule 102 (var_cte -> CTE_INTEGER .)
    ID              reduce using rule 102 (var_cte -> CTE_INTEGER .)
    CTE_INTEGER     reduce using rule 102 (var_cte -> CTE_INTEGER .)
    CTE_FLOAT       reduce using rule 102 (var_cte -> CTE_INTEGER .)
    TRUE            reduce using rule 102 (var_cte -> CTE_INTEGER .)
    FALSE           reduce using rule 102 (var_cte -> CTE_INTEGER .)
    RED             reduce using rule 102 (var_cte -> CTE_INTEGER .)
    YELLOW          reduce using rule 102 (var_cte -> CTE_INTEGER .)
    BLUE            reduce using rule 102 (var_cte -> CTE_INTEGER .)
    GREEN           reduce using rule 102 (var_cte -> CTE_INTEGER .)
    BLACK           reduce using rule 102 (var_cte -> CTE_INTEGER .)
    ORANGE          reduce using rule 102 (var_cte -> CTE_INTEGER .)
    PURPLE          reduce using rule 102 (var_cte -> CTE_INTEGER .)
    CYAN            reduce using rule 102 (var_cte -> CTE_INTEGER .)
    ]               reduce using rule 102 (var_cte -> CTE_INTEGER .)


state 38

    (104) var_cte -> TRUE .

    =               reduce using rule 104 (var_cte -> TRUE .)
    <               reduce using rule 104 (var_cte -> TRUE .)
    >               reduce using rule 104 (var_cte -> TRUE .)
    AND             reduce using rule 104 (var_cte -> TRUE .)
    OR              reduce using rule 104 (var_cte -> TRUE .)
    +               reduce using rule 104 (var_cte -> TRUE .)
    -               reduce using rule 104 (var_cte -> TRUE .)
    *               reduce using rule 104 (var_cte -> TRUE .)
    /               reduce using rule 104 (var_cte -> TRUE .)
    ;               reduce using rule 104 (var_cte -> TRUE .)
    )               reduce using rule 104 (var_cte -> TRUE .)
    ,               reduce using rule 104 (var_cte -> TRUE .)
    (               reduce using rule 104 (var_cte -> TRUE .)
    ID              reduce using rule 104 (var_cte -> TRUE .)
    CTE_INTEGER     reduce using rule 104 (var_cte -> TRUE .)
    CTE_FLOAT       reduce using rule 104 (var_cte -> TRUE .)
    TRUE            reduce using rule 104 (var_cte -> TRUE .)
    FALSE           reduce using rule 104 (var_cte -> TRUE .)
    RED             reduce using rule 104 (var_cte -> TRUE .)
    YELLOW          reduce using rule 104 (var_cte -> TRUE .)
    BLUE            reduce using rule 104 (var_cte -> TRUE .)
    GREEN           reduce using rule 104 (var_cte -> TRUE .)
    BLACK           reduce using rule 104 (var_cte -> TRUE .)
    ORANGE          reduce using rule 104 (var_cte -> TRUE .)
    PURPLE          reduce using rule 104 (var_cte -> TRUE .)
    CYAN            reduce using rule 104 (var_cte -> TRUE .)
    ]               reduce using rule 104 (var_cte -> TRUE .)


state 39

    (58) command -> figure exp . exp color ;
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 67
    factor                         shift and go to state 40

state 40

    (80) exp -> factor . empty
    (114) empty -> .

    +               reduce using rule 114 (empty -> .)
    -               reduce using rule 114 (empty -> .)
    *               reduce using rule 114 (empty -> .)
    /               reduce using rule 114 (empty -> .)
    (               reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    CTE_INTEGER     reduce using rule 114 (empty -> .)
    CTE_FLOAT       reduce using rule 114 (empty -> .)
    TRUE            reduce using rule 114 (empty -> .)
    FALSE           reduce using rule 114 (empty -> .)
    =               reduce using rule 114 (empty -> .)
    <               reduce using rule 114 (empty -> .)
    >               reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    ;               reduce using rule 114 (empty -> .)
    )               reduce using rule 114 (empty -> .)
    RED             reduce using rule 114 (empty -> .)
    YELLOW          reduce using rule 114 (empty -> .)
    BLUE            reduce using rule 114 (empty -> .)
    GREEN           reduce using rule 114 (empty -> .)
    BLACK           reduce using rule 114 (empty -> .)
    ORANGE          reduce using rule 114 (empty -> .)
    PURPLE          reduce using rule 114 (empty -> .)
    CYAN            reduce using rule 114 (empty -> .)
    ,               reduce using rule 114 (empty -> .)
    ]               reduce using rule 114 (empty -> .)

    empty                          shift and go to state 68

state 41

    (105) var_cte -> FALSE .

    =               reduce using rule 105 (var_cte -> FALSE .)
    <               reduce using rule 105 (var_cte -> FALSE .)
    >               reduce using rule 105 (var_cte -> FALSE .)
    AND             reduce using rule 105 (var_cte -> FALSE .)
    OR              reduce using rule 105 (var_cte -> FALSE .)
    +               reduce using rule 105 (var_cte -> FALSE .)
    -               reduce using rule 105 (var_cte -> FALSE .)
    *               reduce using rule 105 (var_cte -> FALSE .)
    /               reduce using rule 105 (var_cte -> FALSE .)
    ;               reduce using rule 105 (var_cte -> FALSE .)
    )               reduce using rule 105 (var_cte -> FALSE .)
    ,               reduce using rule 105 (var_cte -> FALSE .)
    (               reduce using rule 105 (var_cte -> FALSE .)
    ID              reduce using rule 105 (var_cte -> FALSE .)
    CTE_INTEGER     reduce using rule 105 (var_cte -> FALSE .)
    CTE_FLOAT       reduce using rule 105 (var_cte -> FALSE .)
    TRUE            reduce using rule 105 (var_cte -> FALSE .)
    FALSE           reduce using rule 105 (var_cte -> FALSE .)
    RED             reduce using rule 105 (var_cte -> FALSE .)
    YELLOW          reduce using rule 105 (var_cte -> FALSE .)
    BLUE            reduce using rule 105 (var_cte -> FALSE .)
    GREEN           reduce using rule 105 (var_cte -> FALSE .)
    BLACK           reduce using rule 105 (var_cte -> FALSE .)
    ORANGE          reduce using rule 105 (var_cte -> FALSE .)
    PURPLE          reduce using rule 105 (var_cte -> FALSE .)
    CYAN            reduce using rule 105 (var_cte -> FALSE .)
    ]               reduce using rule 105 (var_cte -> FALSE .)


state 42

    (101) var_cte -> ID .

    =               reduce using rule 101 (var_cte -> ID .)
    <               reduce using rule 101 (var_cte -> ID .)
    >               reduce using rule 101 (var_cte -> ID .)
    AND             reduce using rule 101 (var_cte -> ID .)
    OR              reduce using rule 101 (var_cte -> ID .)
    +               reduce using rule 101 (var_cte -> ID .)
    -               reduce using rule 101 (var_cte -> ID .)
    *               reduce using rule 101 (var_cte -> ID .)
    /               reduce using rule 101 (var_cte -> ID .)
    ;               reduce using rule 101 (var_cte -> ID .)
    )               reduce using rule 101 (var_cte -> ID .)
    ,               reduce using rule 101 (var_cte -> ID .)
    (               reduce using rule 101 (var_cte -> ID .)
    ID              reduce using rule 101 (var_cte -> ID .)
    CTE_INTEGER     reduce using rule 101 (var_cte -> ID .)
    CTE_FLOAT       reduce using rule 101 (var_cte -> ID .)
    TRUE            reduce using rule 101 (var_cte -> ID .)
    FALSE           reduce using rule 101 (var_cte -> ID .)
    RED             reduce using rule 101 (var_cte -> ID .)
    YELLOW          reduce using rule 101 (var_cte -> ID .)
    BLUE            reduce using rule 101 (var_cte -> ID .)
    GREEN           reduce using rule 101 (var_cte -> ID .)
    BLACK           reduce using rule 101 (var_cte -> ID .)
    ORANGE          reduce using rule 101 (var_cte -> ID .)
    PURPLE          reduce using rule 101 (var_cte -> ID .)
    CYAN            reduce using rule 101 (var_cte -> ID .)
    ]               reduce using rule 101 (var_cte -> ID .)


state 43

    (62) cycle -> WHILE gotoW . ( expression ) gotoFalse block continueGoW

    (               shift and go to state 69


state 44

    (63) repeat -> REPLAY CTE_INTEGER . gotoR [ repeatA ] ;
    (109) gotoR -> .

    [               reduce using rule 109 (gotoR -> .)

    gotoR                          shift and go to state 70

state 45

    (50) pipeline -> PIPE ID . pipelineA
    (51) pipelineA -> . [ pipelineB ] ;
    (52) pipelineA -> . IN ( var_cte ) ;
    (53) pipelineA -> . OUT ( ) ;
    (54) pipelineA -> . COUNT ;

    [               shift and go to state 74
    IN              shift and go to state 72
    OUT             shift and go to state 75
    COUNT           shift and go to state 71

    pipelineA                      shift and go to state 73

state 46

    (27) calling -> # callID . ( insertEra callingA

    (               shift and go to state 76


state 47

    (28) callID -> ID .

    (               reduce using rule 28 (callID -> ID .)


state 48

    (44) condition -> IF ( . expression ) gotoFalse block conditionA continueGo
    (67) expression -> . exp = = exp
    (68) expression -> . exp < > exp
    (69) expression -> . exp < = exp
    (70) expression -> . exp > = exp
    (71) expression -> . exp > exp
    (72) expression -> . exp < exp
    (73) expression -> . exp AND exp
    (74) expression -> . exp OR exp
    (75) expression -> . exp empty
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    exp                            shift and go to state 51
    factor                         shift and go to state 40
    var_cte                        shift and go to state 36
    expression                     shift and go to state 77

state 49

    (47) write -> ECHO writeA . ;

    ;               shift and go to state 78


state 50

    (49) writeA -> CTE_STRING .

    ;               reduce using rule 49 (writeA -> CTE_STRING .)


state 51

    (67) expression -> exp . = = exp
    (68) expression -> exp . < > exp
    (69) expression -> exp . < = exp
    (70) expression -> exp . > = exp
    (71) expression -> exp . > exp
    (72) expression -> exp . < exp
    (73) expression -> exp . AND exp
    (74) expression -> exp . OR exp
    (75) expression -> exp . empty
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp
    (114) empty -> .

    =               shift and go to state 81
    <               shift and go to state 80
    >               shift and go to state 84
    AND             shift and go to state 79
    OR              shift and go to state 82
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66
    ;               reduce using rule 114 (empty -> .)
    )               reduce using rule 114 (empty -> .)
    ,               reduce using rule 114 (empty -> .)

    empty                          shift and go to state 83

state 52

    (48) writeA -> expression .

    ;               reduce using rule 48 (writeA -> expression .)


state 53

    (59) command -> SAMPLE commandA .

    ID              reduce using rule 59 (command -> SAMPLE commandA .)
    IF              reduce using rule 59 (command -> SAMPLE commandA .)
    ECHO            reduce using rule 59 (command -> SAMPLE commandA .)
    WHILE           reduce using rule 59 (command -> SAMPLE commandA .)
    REPLAY          reduce using rule 59 (command -> SAMPLE commandA .)
    SAMPLE          reduce using rule 59 (command -> SAMPLE commandA .)
    #               reduce using rule 59 (command -> SAMPLE commandA .)
    PIPE            reduce using rule 59 (command -> SAMPLE commandA .)
    WHERE           reduce using rule 59 (command -> SAMPLE commandA .)
    CLEAR           reduce using rule 59 (command -> SAMPLE commandA .)
    OVAL            reduce using rule 59 (command -> SAMPLE commandA .)
    TRIO            reduce using rule 59 (command -> SAMPLE commandA .)
    QUAD            reduce using rule 59 (command -> SAMPLE commandA .)
    ARC             reduce using rule 59 (command -> SAMPLE commandA .)
    }               reduce using rule 59 (command -> SAMPLE commandA .)
    MOD             reduce using rule 59 (command -> SAMPLE commandA .)
    END             reduce using rule 59 (command -> SAMPLE commandA .)
    ]               reduce using rule 59 (command -> SAMPLE commandA .)


state 54

    (61) commandA -> OFF . move exp ;
    (87) move -> . UP
    (88) move -> . DOWN
    (89) move -> . LEFT
    (90) move -> . RIGHT

    UP              shift and go to state 87
    DOWN            shift and go to state 88
    LEFT            shift and go to state 89
    RIGHT           shift and go to state 85

    move                           shift and go to state 86

state 55

    (60) commandA -> ON . move exp CTE_INTEGER color ;
    (87) move -> . UP
    (88) move -> . DOWN
    (89) move -> . LEFT
    (90) move -> . RIGHT

    UP              shift and go to state 87
    DOWN            shift and go to state 88
    LEFT            shift and go to state 89
    RIGHT           shift and go to state 85

    move                           shift and go to state 90

state 56

    (2) programA -> programB END .

    $end            reduce using rule 2 (programA -> programB END .)


state 57

    (43) assign -> ID = . expression ;
    (67) expression -> . exp = = exp
    (68) expression -> . exp < > exp
    (69) expression -> . exp < = exp
    (70) expression -> . exp > = exp
    (71) expression -> . exp > exp
    (72) expression -> . exp < exp
    (73) expression -> . exp AND exp
    (74) expression -> . exp OR exp
    (75) expression -> . exp empty
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    expression                     shift and go to state 91
    exp                            shift and go to state 51
    factor                         shift and go to state 40

state 58

    (6) programC -> empty .

    END             reduce using rule 6 (programC -> empty .)


state 59

    (5) programC -> programB .

    END             reduce using rule 5 (programC -> programB .)


state 60

    (4) programB -> workspace programC .

    END             reduce using rule 4 (programB -> workspace programC .)


state 61

    (18) module -> MOD # . ID insertQuadMod moduleA endMod

    ID              shift and go to state 92


state 62

    (81) factor -> ( expression . )

    )               shift and go to state 93


state 63

    (76) exp -> exp + . exp
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 94
    factor                         shift and go to state 40

state 64

    (78) exp -> exp * . exp
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 95
    factor                         shift and go to state 40

state 65

    (77) exp -> exp - . exp
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 96
    factor                         shift and go to state 40

state 66

    (79) exp -> exp / . exp
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 97
    factor                         shift and go to state 40

state 67

    (58) command -> figure exp exp . color ;
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp
    (91) color -> . RED
    (92) color -> . YELLOW
    (93) color -> . BLUE
    (94) color -> . GREEN
    (95) color -> . BLACK
    (96) color -> . ORANGE
    (97) color -> . PURPLE
    (98) color -> . CYAN

    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66
    RED             shift and go to state 106
    YELLOW          shift and go to state 102
    BLUE            shift and go to state 98
    GREEN           shift and go to state 101
    BLACK           shift and go to state 105
    ORANGE          shift and go to state 104
    PURPLE          shift and go to state 100
    CYAN            shift and go to state 103

    color                          shift and go to state 99

state 68

    (80) exp -> factor empty .

    +               reduce using rule 80 (exp -> factor empty .)
    -               reduce using rule 80 (exp -> factor empty .)
    *               reduce using rule 80 (exp -> factor empty .)
    /               reduce using rule 80 (exp -> factor empty .)
    (               reduce using rule 80 (exp -> factor empty .)
    ID              reduce using rule 80 (exp -> factor empty .)
    CTE_INTEGER     reduce using rule 80 (exp -> factor empty .)
    CTE_FLOAT       reduce using rule 80 (exp -> factor empty .)
    TRUE            reduce using rule 80 (exp -> factor empty .)
    FALSE           reduce using rule 80 (exp -> factor empty .)
    ;               reduce using rule 80 (exp -> factor empty .)
    )               reduce using rule 80 (exp -> factor empty .)
    ,               reduce using rule 80 (exp -> factor empty .)
    =               reduce using rule 80 (exp -> factor empty .)
    <               reduce using rule 80 (exp -> factor empty .)
    >               reduce using rule 80 (exp -> factor empty .)
    AND             reduce using rule 80 (exp -> factor empty .)
    OR              reduce using rule 80 (exp -> factor empty .)
    RED             reduce using rule 80 (exp -> factor empty .)
    YELLOW          reduce using rule 80 (exp -> factor empty .)
    BLUE            reduce using rule 80 (exp -> factor empty .)
    GREEN           reduce using rule 80 (exp -> factor empty .)
    BLACK           reduce using rule 80 (exp -> factor empty .)
    ORANGE          reduce using rule 80 (exp -> factor empty .)
    PURPLE          reduce using rule 80 (exp -> factor empty .)
    CYAN            reduce using rule 80 (exp -> factor empty .)
    ]               reduce using rule 80 (exp -> factor empty .)


state 69

    (62) cycle -> WHILE gotoW ( . expression ) gotoFalse block continueGoW
    (67) expression -> . exp = = exp
    (68) expression -> . exp < > exp
    (69) expression -> . exp < = exp
    (70) expression -> . exp > = exp
    (71) expression -> . exp > exp
    (72) expression -> . exp < exp
    (73) expression -> . exp AND exp
    (74) expression -> . exp OR exp
    (75) expression -> . exp empty
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 51
    factor                         shift and go to state 40
    expression                     shift and go to state 107

state 70

    (63) repeat -> REPLAY CTE_INTEGER gotoR . [ repeatA ] ;

    [               shift and go to state 108


state 71

    (54) pipelineA -> COUNT . ;

    ;               shift and go to state 109


state 72

    (52) pipelineA -> IN . ( var_cte ) ;

    (               shift and go to state 110


state 73

    (50) pipeline -> PIPE ID pipelineA .

    MOD             reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    ID              reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    IF              reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    ECHO            reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    WHILE           reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    REPLAY          reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    SAMPLE          reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    #               reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    PIPE            reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    WHERE           reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    CLEAR           reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    OVAL            reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    TRIO            reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    QUAD            reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    ARC             reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    END             reduce using rule 50 (pipeline -> PIPE ID pipelineA .)
    }               reduce using rule 50 (pipeline -> PIPE ID pipelineA .)


state 74

    (51) pipelineA -> [ . pipelineB ] ;
    (55) pipelineB -> . exp pipelineC
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    pipelineB                      shift and go to state 111
    exp                            shift and go to state 112
    factor                         shift and go to state 40

state 75

    (53) pipelineA -> OUT . ( ) ;

    (               shift and go to state 113


state 76

    (27) calling -> # callID ( . insertEra callingA
    (29) insertEra -> .

    )               reduce using rule 29 (insertEra -> .)
    (               reduce using rule 29 (insertEra -> .)
    ID              reduce using rule 29 (insertEra -> .)
    CTE_INTEGER     reduce using rule 29 (insertEra -> .)
    CTE_FLOAT       reduce using rule 29 (insertEra -> .)
    TRUE            reduce using rule 29 (insertEra -> .)
    FALSE           reduce using rule 29 (insertEra -> .)

    insertEra                      shift and go to state 114

state 77

    (44) condition -> IF ( expression . ) gotoFalse block conditionA continueGo

    )               shift and go to state 115


state 78

    (47) write -> ECHO writeA ; .

    MOD             reduce using rule 47 (write -> ECHO writeA ; .)
    ID              reduce using rule 47 (write -> ECHO writeA ; .)
    IF              reduce using rule 47 (write -> ECHO writeA ; .)
    ECHO            reduce using rule 47 (write -> ECHO writeA ; .)
    WHILE           reduce using rule 47 (write -> ECHO writeA ; .)
    REPLAY          reduce using rule 47 (write -> ECHO writeA ; .)
    SAMPLE          reduce using rule 47 (write -> ECHO writeA ; .)
    #               reduce using rule 47 (write -> ECHO writeA ; .)
    PIPE            reduce using rule 47 (write -> ECHO writeA ; .)
    WHERE           reduce using rule 47 (write -> ECHO writeA ; .)
    CLEAR           reduce using rule 47 (write -> ECHO writeA ; .)
    OVAL            reduce using rule 47 (write -> ECHO writeA ; .)
    TRIO            reduce using rule 47 (write -> ECHO writeA ; .)
    QUAD            reduce using rule 47 (write -> ECHO writeA ; .)
    ARC             reduce using rule 47 (write -> ECHO writeA ; .)
    END             reduce using rule 47 (write -> ECHO writeA ; .)
    }               reduce using rule 47 (write -> ECHO writeA ; .)


state 79

    (73) expression -> exp AND . exp
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 116
    factor                         shift and go to state 40

state 80

    (68) expression -> exp < . > exp
    (69) expression -> exp < . = exp
    (72) expression -> exp < . exp
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    >               shift and go to state 119
    =               shift and go to state 118
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 117
    factor                         shift and go to state 40

state 81

    (67) expression -> exp = . = exp

    =               shift and go to state 120


state 82

    (74) expression -> exp OR . exp
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 121
    factor                         shift and go to state 40

state 83

    (75) expression -> exp empty .

    ;               reduce using rule 75 (expression -> exp empty .)
    )               reduce using rule 75 (expression -> exp empty .)
    ,               reduce using rule 75 (expression -> exp empty .)


state 84

    (70) expression -> exp > . = exp
    (71) expression -> exp > . exp
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    =               shift and go to state 123
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 122
    factor                         shift and go to state 40

state 85

    (90) move -> RIGHT .

    (               reduce using rule 90 (move -> RIGHT .)
    ID              reduce using rule 90 (move -> RIGHT .)
    CTE_INTEGER     reduce using rule 90 (move -> RIGHT .)
    CTE_FLOAT       reduce using rule 90 (move -> RIGHT .)
    TRUE            reduce using rule 90 (move -> RIGHT .)
    FALSE           reduce using rule 90 (move -> RIGHT .)


state 86

    (61) commandA -> OFF move . exp ;
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 124
    factor                         shift and go to state 40

state 87

    (87) move -> UP .

    (               reduce using rule 87 (move -> UP .)
    ID              reduce using rule 87 (move -> UP .)
    CTE_INTEGER     reduce using rule 87 (move -> UP .)
    CTE_FLOAT       reduce using rule 87 (move -> UP .)
    TRUE            reduce using rule 87 (move -> UP .)
    FALSE           reduce using rule 87 (move -> UP .)


state 88

    (88) move -> DOWN .

    (               reduce using rule 88 (move -> DOWN .)
    ID              reduce using rule 88 (move -> DOWN .)
    CTE_INTEGER     reduce using rule 88 (move -> DOWN .)
    CTE_FLOAT       reduce using rule 88 (move -> DOWN .)
    TRUE            reduce using rule 88 (move -> DOWN .)
    FALSE           reduce using rule 88 (move -> DOWN .)


state 89

    (89) move -> LEFT .

    (               reduce using rule 89 (move -> LEFT .)
    ID              reduce using rule 89 (move -> LEFT .)
    CTE_INTEGER     reduce using rule 89 (move -> LEFT .)
    CTE_FLOAT       reduce using rule 89 (move -> LEFT .)
    TRUE            reduce using rule 89 (move -> LEFT .)
    FALSE           reduce using rule 89 (move -> LEFT .)


state 90

    (60) commandA -> ON move . exp CTE_INTEGER color ;
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 125
    factor                         shift and go to state 40

state 91

    (43) assign -> ID = expression . ;

    ;               shift and go to state 126


state 92

    (18) module -> MOD # ID . insertQuadMod moduleA endMod
    (112) insertQuadMod -> .

    (               reduce using rule 112 (insertQuadMod -> .)
    {               reduce using rule 112 (insertQuadMod -> .)

    insertQuadMod                  shift and go to state 127

state 93

    (81) factor -> ( expression ) .

    =               reduce using rule 81 (factor -> ( expression ) .)
    <               reduce using rule 81 (factor -> ( expression ) .)
    >               reduce using rule 81 (factor -> ( expression ) .)
    AND             reduce using rule 81 (factor -> ( expression ) .)
    OR              reduce using rule 81 (factor -> ( expression ) .)
    +               reduce using rule 81 (factor -> ( expression ) .)
    -               reduce using rule 81 (factor -> ( expression ) .)
    *               reduce using rule 81 (factor -> ( expression ) .)
    /               reduce using rule 81 (factor -> ( expression ) .)
    ;               reduce using rule 81 (factor -> ( expression ) .)
    ,               reduce using rule 81 (factor -> ( expression ) .)
    ]               reduce using rule 81 (factor -> ( expression ) .)
    )               reduce using rule 81 (factor -> ( expression ) .)
    (               reduce using rule 81 (factor -> ( expression ) .)
    ID              reduce using rule 81 (factor -> ( expression ) .)
    CTE_INTEGER     reduce using rule 81 (factor -> ( expression ) .)
    CTE_FLOAT       reduce using rule 81 (factor -> ( expression ) .)
    TRUE            reduce using rule 81 (factor -> ( expression ) .)
    FALSE           reduce using rule 81 (factor -> ( expression ) .)
    RED             reduce using rule 81 (factor -> ( expression ) .)
    YELLOW          reduce using rule 81 (factor -> ( expression ) .)
    BLUE            reduce using rule 81 (factor -> ( expression ) .)
    GREEN           reduce using rule 81 (factor -> ( expression ) .)
    BLACK           reduce using rule 81 (factor -> ( expression ) .)
    ORANGE          reduce using rule 81 (factor -> ( expression ) .)
    PURPLE          reduce using rule 81 (factor -> ( expression ) .)
    CYAN            reduce using rule 81 (factor -> ( expression ) .)


state 94

    (76) exp -> exp + exp .
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp

    +               reduce using rule 76 (exp -> exp + exp .)
    -               reduce using rule 76 (exp -> exp + exp .)
    (               reduce using rule 76 (exp -> exp + exp .)
    ID              reduce using rule 76 (exp -> exp + exp .)
    CTE_INTEGER     reduce using rule 76 (exp -> exp + exp .)
    CTE_FLOAT       reduce using rule 76 (exp -> exp + exp .)
    TRUE            reduce using rule 76 (exp -> exp + exp .)
    FALSE           reduce using rule 76 (exp -> exp + exp .)
    ;               reduce using rule 76 (exp -> exp + exp .)
    )               reduce using rule 76 (exp -> exp + exp .)
    ,               reduce using rule 76 (exp -> exp + exp .)
    =               reduce using rule 76 (exp -> exp + exp .)
    <               reduce using rule 76 (exp -> exp + exp .)
    >               reduce using rule 76 (exp -> exp + exp .)
    AND             reduce using rule 76 (exp -> exp + exp .)
    OR              reduce using rule 76 (exp -> exp + exp .)
    RED             reduce using rule 76 (exp -> exp + exp .)
    YELLOW          reduce using rule 76 (exp -> exp + exp .)
    BLUE            reduce using rule 76 (exp -> exp + exp .)
    GREEN           reduce using rule 76 (exp -> exp + exp .)
    BLACK           reduce using rule 76 (exp -> exp + exp .)
    ORANGE          reduce using rule 76 (exp -> exp + exp .)
    PURPLE          reduce using rule 76 (exp -> exp + exp .)
    CYAN            reduce using rule 76 (exp -> exp + exp .)
    ]               reduce using rule 76 (exp -> exp + exp .)
    *               shift and go to state 64
    /               shift and go to state 66

  ! *               [ reduce using rule 76 (exp -> exp + exp .) ]
  ! /               [ reduce using rule 76 (exp -> exp + exp .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 65 ]


state 95

    (78) exp -> exp * exp .
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp

    +               reduce using rule 78 (exp -> exp * exp .)
    -               reduce using rule 78 (exp -> exp * exp .)
    *               reduce using rule 78 (exp -> exp * exp .)
    /               reduce using rule 78 (exp -> exp * exp .)
    (               reduce using rule 78 (exp -> exp * exp .)
    ID              reduce using rule 78 (exp -> exp * exp .)
    CTE_INTEGER     reduce using rule 78 (exp -> exp * exp .)
    CTE_FLOAT       reduce using rule 78 (exp -> exp * exp .)
    TRUE            reduce using rule 78 (exp -> exp * exp .)
    FALSE           reduce using rule 78 (exp -> exp * exp .)
    ;               reduce using rule 78 (exp -> exp * exp .)
    )               reduce using rule 78 (exp -> exp * exp .)
    ,               reduce using rule 78 (exp -> exp * exp .)
    =               reduce using rule 78 (exp -> exp * exp .)
    <               reduce using rule 78 (exp -> exp * exp .)
    >               reduce using rule 78 (exp -> exp * exp .)
    AND             reduce using rule 78 (exp -> exp * exp .)
    OR              reduce using rule 78 (exp -> exp * exp .)
    RED             reduce using rule 78 (exp -> exp * exp .)
    YELLOW          reduce using rule 78 (exp -> exp * exp .)
    BLUE            reduce using rule 78 (exp -> exp * exp .)
    GREEN           reduce using rule 78 (exp -> exp * exp .)
    BLACK           reduce using rule 78 (exp -> exp * exp .)
    ORANGE          reduce using rule 78 (exp -> exp * exp .)
    PURPLE          reduce using rule 78 (exp -> exp * exp .)
    CYAN            reduce using rule 78 (exp -> exp * exp .)
    ]               reduce using rule 78 (exp -> exp * exp .)

  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 64 ]
  ! /               [ shift and go to state 66 ]


state 96

    (77) exp -> exp - exp .
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp

    +               reduce using rule 77 (exp -> exp - exp .)
    -               reduce using rule 77 (exp -> exp - exp .)
    (               reduce using rule 77 (exp -> exp - exp .)
    ID              reduce using rule 77 (exp -> exp - exp .)
    CTE_INTEGER     reduce using rule 77 (exp -> exp - exp .)
    CTE_FLOAT       reduce using rule 77 (exp -> exp - exp .)
    TRUE            reduce using rule 77 (exp -> exp - exp .)
    FALSE           reduce using rule 77 (exp -> exp - exp .)
    ;               reduce using rule 77 (exp -> exp - exp .)
    )               reduce using rule 77 (exp -> exp - exp .)
    ,               reduce using rule 77 (exp -> exp - exp .)
    =               reduce using rule 77 (exp -> exp - exp .)
    <               reduce using rule 77 (exp -> exp - exp .)
    >               reduce using rule 77 (exp -> exp - exp .)
    AND             reduce using rule 77 (exp -> exp - exp .)
    OR              reduce using rule 77 (exp -> exp - exp .)
    RED             reduce using rule 77 (exp -> exp - exp .)
    YELLOW          reduce using rule 77 (exp -> exp - exp .)
    BLUE            reduce using rule 77 (exp -> exp - exp .)
    GREEN           reduce using rule 77 (exp -> exp - exp .)
    BLACK           reduce using rule 77 (exp -> exp - exp .)
    ORANGE          reduce using rule 77 (exp -> exp - exp .)
    PURPLE          reduce using rule 77 (exp -> exp - exp .)
    CYAN            reduce using rule 77 (exp -> exp - exp .)
    ]               reduce using rule 77 (exp -> exp - exp .)
    *               shift and go to state 64
    /               shift and go to state 66

  ! *               [ reduce using rule 77 (exp -> exp - exp .) ]
  ! /               [ reduce using rule 77 (exp -> exp - exp .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 65 ]


state 97

    (79) exp -> exp / exp .
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp

    +               reduce using rule 79 (exp -> exp / exp .)
    -               reduce using rule 79 (exp -> exp / exp .)
    *               reduce using rule 79 (exp -> exp / exp .)
    /               reduce using rule 79 (exp -> exp / exp .)
    (               reduce using rule 79 (exp -> exp / exp .)
    ID              reduce using rule 79 (exp -> exp / exp .)
    CTE_INTEGER     reduce using rule 79 (exp -> exp / exp .)
    CTE_FLOAT       reduce using rule 79 (exp -> exp / exp .)
    TRUE            reduce using rule 79 (exp -> exp / exp .)
    FALSE           reduce using rule 79 (exp -> exp / exp .)
    ;               reduce using rule 79 (exp -> exp / exp .)
    )               reduce using rule 79 (exp -> exp / exp .)
    ,               reduce using rule 79 (exp -> exp / exp .)
    =               reduce using rule 79 (exp -> exp / exp .)
    <               reduce using rule 79 (exp -> exp / exp .)
    >               reduce using rule 79 (exp -> exp / exp .)
    AND             reduce using rule 79 (exp -> exp / exp .)
    OR              reduce using rule 79 (exp -> exp / exp .)
    RED             reduce using rule 79 (exp -> exp / exp .)
    YELLOW          reduce using rule 79 (exp -> exp / exp .)
    BLUE            reduce using rule 79 (exp -> exp / exp .)
    GREEN           reduce using rule 79 (exp -> exp / exp .)
    BLACK           reduce using rule 79 (exp -> exp / exp .)
    ORANGE          reduce using rule 79 (exp -> exp / exp .)
    PURPLE          reduce using rule 79 (exp -> exp / exp .)
    CYAN            reduce using rule 79 (exp -> exp / exp .)
    ]               reduce using rule 79 (exp -> exp / exp .)

  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 64 ]
  ! /               [ shift and go to state 66 ]


state 98

    (93) color -> BLUE .

    ;               reduce using rule 93 (color -> BLUE .)


state 99

    (58) command -> figure exp exp color . ;

    ;               shift and go to state 128


state 100

    (97) color -> PURPLE .

    ;               reduce using rule 97 (color -> PURPLE .)


state 101

    (94) color -> GREEN .

    ;               reduce using rule 94 (color -> GREEN .)


state 102

    (92) color -> YELLOW .

    ;               reduce using rule 92 (color -> YELLOW .)


state 103

    (98) color -> CYAN .

    ;               reduce using rule 98 (color -> CYAN .)


state 104

    (96) color -> ORANGE .

    ;               reduce using rule 96 (color -> ORANGE .)


state 105

    (95) color -> BLACK .

    ;               reduce using rule 95 (color -> BLACK .)


state 106

    (91) color -> RED .

    ;               reduce using rule 91 (color -> RED .)


state 107

    (62) cycle -> WHILE gotoW ( expression . ) gotoFalse block continueGoW

    )               shift and go to state 129


state 108

    (63) repeat -> REPLAY CTE_INTEGER gotoR [ . repeatA ] ;
    (64) repeatA -> . command repeatB
    (58) command -> . figure exp exp color ;
    (59) command -> . SAMPLE commandA
    (83) figure -> . OVAL
    (84) figure -> . TRIO
    (85) figure -> . QUAD
    (86) figure -> . ARC

    SAMPLE          shift and go to state 19
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    repeatA                        shift and go to state 130
    command                        shift and go to state 131

state 109

    (54) pipelineA -> COUNT ; .

    MOD             reduce using rule 54 (pipelineA -> COUNT ; .)
    ID              reduce using rule 54 (pipelineA -> COUNT ; .)
    IF              reduce using rule 54 (pipelineA -> COUNT ; .)
    ECHO            reduce using rule 54 (pipelineA -> COUNT ; .)
    WHILE           reduce using rule 54 (pipelineA -> COUNT ; .)
    REPLAY          reduce using rule 54 (pipelineA -> COUNT ; .)
    SAMPLE          reduce using rule 54 (pipelineA -> COUNT ; .)
    #               reduce using rule 54 (pipelineA -> COUNT ; .)
    PIPE            reduce using rule 54 (pipelineA -> COUNT ; .)
    WHERE           reduce using rule 54 (pipelineA -> COUNT ; .)
    CLEAR           reduce using rule 54 (pipelineA -> COUNT ; .)
    OVAL            reduce using rule 54 (pipelineA -> COUNT ; .)
    TRIO            reduce using rule 54 (pipelineA -> COUNT ; .)
    QUAD            reduce using rule 54 (pipelineA -> COUNT ; .)
    ARC             reduce using rule 54 (pipelineA -> COUNT ; .)
    END             reduce using rule 54 (pipelineA -> COUNT ; .)
    }               reduce using rule 54 (pipelineA -> COUNT ; .)


state 110

    (52) pipelineA -> IN ( . var_cte ) ;
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 132

state 111

    (51) pipelineA -> [ pipelineB . ] ;

    ]               shift and go to state 133


state 112

    (55) pipelineB -> exp . pipelineC
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp
    (56) pipelineC -> . , pipelineB
    (57) pipelineC -> . empty
    (114) empty -> .

    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66
    ,               shift and go to state 134
    ]               reduce using rule 114 (empty -> .)

    empty                          shift and go to state 136
    pipelineC                      shift and go to state 135

state 113

    (53) pipelineA -> OUT ( . ) ;

    )               shift and go to state 137


state 114

    (27) calling -> # callID ( insertEra . callingA
    (30) callingA -> . callingB ) ;
    (31) callingA -> . ) ;
    (32) callingB -> . expression checkParam callingC
    (67) expression -> . exp = = exp
    (68) expression -> . exp < > exp
    (69) expression -> . exp < = exp
    (70) expression -> . exp > = exp
    (71) expression -> . exp > exp
    (72) expression -> . exp < exp
    (73) expression -> . exp AND exp
    (74) expression -> . exp OR exp
    (75) expression -> . exp empty
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    )               shift and go to state 138
    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    factor                         shift and go to state 40
    var_cte                        shift and go to state 36
    callingA                       shift and go to state 139
    callingB                       shift and go to state 140
    exp                            shift and go to state 51
    expression                     shift and go to state 141

state 115

    (44) condition -> IF ( expression ) . gotoFalse block conditionA continueGo
    (106) gotoFalse -> .

    {               reduce using rule 106 (gotoFalse -> .)

    gotoFalse                      shift and go to state 142

state 116

    (73) expression -> exp AND exp .
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp

    ;               reduce using rule 73 (expression -> exp AND exp .)
    )               reduce using rule 73 (expression -> exp AND exp .)
    ,               reduce using rule 73 (expression -> exp AND exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 117

    (72) expression -> exp < exp .
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp

    ;               reduce using rule 72 (expression -> exp < exp .)
    )               reduce using rule 72 (expression -> exp < exp .)
    ,               reduce using rule 72 (expression -> exp < exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 118

    (69) expression -> exp < = . exp
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 143
    factor                         shift and go to state 40

state 119

    (68) expression -> exp < > . exp
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 144
    factor                         shift and go to state 40

state 120

    (67) expression -> exp = = . exp
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 145
    factor                         shift and go to state 40

state 121

    (74) expression -> exp OR exp .
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp

    ;               reduce using rule 74 (expression -> exp OR exp .)
    )               reduce using rule 74 (expression -> exp OR exp .)
    ,               reduce using rule 74 (expression -> exp OR exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 122

    (71) expression -> exp > exp .
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp

    ;               reduce using rule 71 (expression -> exp > exp .)
    )               reduce using rule 71 (expression -> exp > exp .)
    ,               reduce using rule 71 (expression -> exp > exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 123

    (70) expression -> exp > = . exp
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    exp                            shift and go to state 146
    factor                         shift and go to state 40

state 124

    (61) commandA -> OFF move exp . ;
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp

    ;               shift and go to state 147
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 125

    (60) commandA -> ON move exp . CTE_INTEGER color ;
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp

    CTE_INTEGER     shift and go to state 148
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 126

    (43) assign -> ID = expression ; .

    MOD             reduce using rule 43 (assign -> ID = expression ; .)
    ID              reduce using rule 43 (assign -> ID = expression ; .)
    IF              reduce using rule 43 (assign -> ID = expression ; .)
    ECHO            reduce using rule 43 (assign -> ID = expression ; .)
    WHILE           reduce using rule 43 (assign -> ID = expression ; .)
    REPLAY          reduce using rule 43 (assign -> ID = expression ; .)
    SAMPLE          reduce using rule 43 (assign -> ID = expression ; .)
    #               reduce using rule 43 (assign -> ID = expression ; .)
    PIPE            reduce using rule 43 (assign -> ID = expression ; .)
    WHERE           reduce using rule 43 (assign -> ID = expression ; .)
    CLEAR           reduce using rule 43 (assign -> ID = expression ; .)
    OVAL            reduce using rule 43 (assign -> ID = expression ; .)
    TRIO            reduce using rule 43 (assign -> ID = expression ; .)
    QUAD            reduce using rule 43 (assign -> ID = expression ; .)
    ARC             reduce using rule 43 (assign -> ID = expression ; .)
    END             reduce using rule 43 (assign -> ID = expression ; .)
    }               reduce using rule 43 (assign -> ID = expression ; .)


state 127

    (18) module -> MOD # ID insertQuadMod . moduleA endMod
    (19) moduleA -> . ( vars ) block
    (20) moduleA -> . block
    (37) block -> . { blockA

    (               shift and go to state 149
    {               shift and go to state 151

    moduleA                        shift and go to state 152
    block                          shift and go to state 150

state 128

    (58) command -> figure exp exp color ; .

    ID              reduce using rule 58 (command -> figure exp exp color ; .)
    IF              reduce using rule 58 (command -> figure exp exp color ; .)
    ECHO            reduce using rule 58 (command -> figure exp exp color ; .)
    WHILE           reduce using rule 58 (command -> figure exp exp color ; .)
    REPLAY          reduce using rule 58 (command -> figure exp exp color ; .)
    SAMPLE          reduce using rule 58 (command -> figure exp exp color ; .)
    #               reduce using rule 58 (command -> figure exp exp color ; .)
    PIPE            reduce using rule 58 (command -> figure exp exp color ; .)
    WHERE           reduce using rule 58 (command -> figure exp exp color ; .)
    CLEAR           reduce using rule 58 (command -> figure exp exp color ; .)
    OVAL            reduce using rule 58 (command -> figure exp exp color ; .)
    TRIO            reduce using rule 58 (command -> figure exp exp color ; .)
    QUAD            reduce using rule 58 (command -> figure exp exp color ; .)
    ARC             reduce using rule 58 (command -> figure exp exp color ; .)
    }               reduce using rule 58 (command -> figure exp exp color ; .)
    MOD             reduce using rule 58 (command -> figure exp exp color ; .)
    END             reduce using rule 58 (command -> figure exp exp color ; .)
    ]               reduce using rule 58 (command -> figure exp exp color ; .)


state 129

    (62) cycle -> WHILE gotoW ( expression ) . gotoFalse block continueGoW
    (106) gotoFalse -> .

    {               reduce using rule 106 (gotoFalse -> .)

    gotoFalse                      shift and go to state 153

state 130

    (63) repeat -> REPLAY CTE_INTEGER gotoR [ repeatA . ] ;

    ]               shift and go to state 154


state 131

    (64) repeatA -> command . repeatB
    (65) repeatB -> . repeatA
    (66) repeatB -> . empty
    (64) repeatA -> . command repeatB
    (114) empty -> .
    (58) command -> . figure exp exp color ;
    (59) command -> . SAMPLE commandA
    (83) figure -> . OVAL
    (84) figure -> . TRIO
    (85) figure -> . QUAD
    (86) figure -> . ARC

    ]               reduce using rule 114 (empty -> .)
    SAMPLE          shift and go to state 19
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    repeatA                        shift and go to state 155
    repeatB                        shift and go to state 156
    command                        shift and go to state 131
    empty                          shift and go to state 157

state 132

    (52) pipelineA -> IN ( var_cte . ) ;

    )               shift and go to state 158


state 133

    (51) pipelineA -> [ pipelineB ] . ;

    ;               shift and go to state 159


state 134

    (56) pipelineC -> , . pipelineB
    (55) pipelineB -> . exp pipelineC
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    pipelineB                      shift and go to state 160
    exp                            shift and go to state 112
    factor                         shift and go to state 40

state 135

    (55) pipelineB -> exp pipelineC .

    ]               reduce using rule 55 (pipelineB -> exp pipelineC .)


state 136

    (57) pipelineC -> empty .

    ]               reduce using rule 57 (pipelineC -> empty .)


state 137

    (53) pipelineA -> OUT ( ) . ;

    ;               shift and go to state 161


state 138

    (31) callingA -> ) . ;

    ;               shift and go to state 162


state 139

    (27) calling -> # callID ( insertEra callingA .

    MOD             reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    ID              reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    IF              reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    ECHO            reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    WHILE           reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    REPLAY          reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    SAMPLE          reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    #               reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    PIPE            reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    WHERE           reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    CLEAR           reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    OVAL            reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    TRIO            reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    QUAD            reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    ARC             reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    END             reduce using rule 27 (calling -> # callID ( insertEra callingA .)
    }               reduce using rule 27 (calling -> # callID ( insertEra callingA .)


state 140

    (30) callingA -> callingB . ) ;

    )               shift and go to state 163


state 141

    (32) callingB -> expression . checkParam callingC
    (33) checkParam -> .

    ,               reduce using rule 33 (checkParam -> .)
    )               reduce using rule 33 (checkParam -> .)

    checkParam                     shift and go to state 164

state 142

    (44) condition -> IF ( expression ) gotoFalse . block conditionA continueGo
    (37) block -> . { blockA

    {               shift and go to state 151

    block                          shift and go to state 165

state 143

    (69) expression -> exp < = exp .
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp

    ;               reduce using rule 69 (expression -> exp < = exp .)
    )               reduce using rule 69 (expression -> exp < = exp .)
    ,               reduce using rule 69 (expression -> exp < = exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 144

    (68) expression -> exp < > exp .
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp

    ;               reduce using rule 68 (expression -> exp < > exp .)
    )               reduce using rule 68 (expression -> exp < > exp .)
    ,               reduce using rule 68 (expression -> exp < > exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 145

    (67) expression -> exp = = exp .
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp

    ;               reduce using rule 67 (expression -> exp = = exp .)
    )               reduce using rule 67 (expression -> exp = = exp .)
    ,               reduce using rule 67 (expression -> exp = = exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 146

    (70) expression -> exp > = exp .
    (76) exp -> exp . + exp
    (77) exp -> exp . - exp
    (78) exp -> exp . * exp
    (79) exp -> exp . / exp

    ;               reduce using rule 70 (expression -> exp > = exp .)
    )               reduce using rule 70 (expression -> exp > = exp .)
    ,               reduce using rule 70 (expression -> exp > = exp .)
    +               shift and go to state 63
    -               shift and go to state 65
    *               shift and go to state 64
    /               shift and go to state 66


state 147

    (61) commandA -> OFF move exp ; .

    MOD             reduce using rule 61 (commandA -> OFF move exp ; .)
    ID              reduce using rule 61 (commandA -> OFF move exp ; .)
    IF              reduce using rule 61 (commandA -> OFF move exp ; .)
    ECHO            reduce using rule 61 (commandA -> OFF move exp ; .)
    WHILE           reduce using rule 61 (commandA -> OFF move exp ; .)
    REPLAY          reduce using rule 61 (commandA -> OFF move exp ; .)
    SAMPLE          reduce using rule 61 (commandA -> OFF move exp ; .)
    #               reduce using rule 61 (commandA -> OFF move exp ; .)
    PIPE            reduce using rule 61 (commandA -> OFF move exp ; .)
    WHERE           reduce using rule 61 (commandA -> OFF move exp ; .)
    CLEAR           reduce using rule 61 (commandA -> OFF move exp ; .)
    OVAL            reduce using rule 61 (commandA -> OFF move exp ; .)
    TRIO            reduce using rule 61 (commandA -> OFF move exp ; .)
    QUAD            reduce using rule 61 (commandA -> OFF move exp ; .)
    ARC             reduce using rule 61 (commandA -> OFF move exp ; .)
    END             reduce using rule 61 (commandA -> OFF move exp ; .)
    ]               reduce using rule 61 (commandA -> OFF move exp ; .)
    }               reduce using rule 61 (commandA -> OFF move exp ; .)


state 148

    (60) commandA -> ON move exp CTE_INTEGER . color ;
    (91) color -> . RED
    (92) color -> . YELLOW
    (93) color -> . BLUE
    (94) color -> . GREEN
    (95) color -> . BLACK
    (96) color -> . ORANGE
    (97) color -> . PURPLE
    (98) color -> . CYAN

    RED             shift and go to state 106
    YELLOW          shift and go to state 102
    BLUE            shift and go to state 98
    GREEN           shift and go to state 101
    BLACK           shift and go to state 105
    ORANGE          shift and go to state 104
    PURPLE          shift and go to state 100
    CYAN            shift and go to state 103

    color                          shift and go to state 166

state 149

    (19) moduleA -> ( . vars ) block
    (21) vars -> . type ID varsA
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . BOOL

    INT             shift and go to state 169
    FLOAT           shift and go to state 168
    BOOL            shift and go to state 170

    type                           shift and go to state 171
    vars                           shift and go to state 167

state 150

    (20) moduleA -> block .

    MOD             reduce using rule 20 (moduleA -> block .)
    ID              reduce using rule 20 (moduleA -> block .)
    IF              reduce using rule 20 (moduleA -> block .)
    ECHO            reduce using rule 20 (moduleA -> block .)
    WHILE           reduce using rule 20 (moduleA -> block .)
    REPLAY          reduce using rule 20 (moduleA -> block .)
    SAMPLE          reduce using rule 20 (moduleA -> block .)
    #               reduce using rule 20 (moduleA -> block .)
    PIPE            reduce using rule 20 (moduleA -> block .)
    WHERE           reduce using rule 20 (moduleA -> block .)
    CLEAR           reduce using rule 20 (moduleA -> block .)
    OVAL            reduce using rule 20 (moduleA -> block .)
    TRIO            reduce using rule 20 (moduleA -> block .)
    QUAD            reduce using rule 20 (moduleA -> block .)
    ARC             reduce using rule 20 (moduleA -> block .)
    END             reduce using rule 20 (moduleA -> block .)


state 151

    (37) block -> { . blockA
    (38) blockA -> . blockB }
    (39) blockA -> . }
    (40) blockB -> . statute blockC
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . cycle
    (13) statute -> . repeat
    (14) statute -> . command
    (15) statute -> . calling
    (16) statute -> . pipeline
    (17) statute -> . screen
    (43) assign -> . ID = expression ;
    (44) condition -> . IF ( expression ) gotoFalse block conditionA continueGo
    (47) write -> . ECHO writeA ;
    (62) cycle -> . WHILE gotoW ( expression ) gotoFalse block continueGoW
    (63) repeat -> . REPLAY CTE_INTEGER gotoR [ repeatA ] ;
    (58) command -> . figure exp exp color ;
    (59) command -> . SAMPLE commandA
    (27) calling -> . # callID ( insertEra callingA
    (50) pipeline -> . PIPE ID pipelineA
    (99) screen -> . WHERE
    (100) screen -> . CLEAR
    (83) figure -> . OVAL
    (84) figure -> . TRIO
    (85) figure -> . QUAD
    (86) figure -> . ARC

    }               shift and go to state 173
    ID              shift and go to state 23
    IF              shift and go to state 12
    ECHO            shift and go to state 18
    WHILE           shift and go to state 6
    REPLAY          shift and go to state 7
    SAMPLE          shift and go to state 19
    #               shift and go to state 9
    PIPE            shift and go to state 8
    WHERE           shift and go to state 28
    CLEAR           shift and go to state 13
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    write                          shift and go to state 10
    command                        shift and go to state 30
    repeat                         shift and go to state 15
    screen                         shift and go to state 17
    condition                      shift and go to state 11
    cycle                          shift and go to state 24
    statute                        shift and go to state 172
    pipeline                       shift and go to state 26
    calling                        shift and go to state 27
    blockB                         shift and go to state 174
    blockA                         shift and go to state 175
    assign                         shift and go to state 32

state 152

    (18) module -> MOD # ID insertQuadMod moduleA . endMod
    (113) endMod -> .

    MOD             reduce using rule 113 (endMod -> .)
    ID              reduce using rule 113 (endMod -> .)
    IF              reduce using rule 113 (endMod -> .)
    ECHO            reduce using rule 113 (endMod -> .)
    WHILE           reduce using rule 113 (endMod -> .)
    REPLAY          reduce using rule 113 (endMod -> .)
    SAMPLE          reduce using rule 113 (endMod -> .)
    #               reduce using rule 113 (endMod -> .)
    PIPE            reduce using rule 113 (endMod -> .)
    WHERE           reduce using rule 113 (endMod -> .)
    CLEAR           reduce using rule 113 (endMod -> .)
    OVAL            reduce using rule 113 (endMod -> .)
    TRIO            reduce using rule 113 (endMod -> .)
    QUAD            reduce using rule 113 (endMod -> .)
    ARC             reduce using rule 113 (endMod -> .)
    END             reduce using rule 113 (endMod -> .)

    endMod                         shift and go to state 176

state 153

    (62) cycle -> WHILE gotoW ( expression ) gotoFalse . block continueGoW
    (37) block -> . { blockA

    {               shift and go to state 151

    block                          shift and go to state 177

state 154

    (63) repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] . ;

    ;               shift and go to state 178


state 155

    (65) repeatB -> repeatA .

    ]               reduce using rule 65 (repeatB -> repeatA .)


state 156

    (64) repeatA -> command repeatB .

    ]               reduce using rule 64 (repeatA -> command repeatB .)


state 157

    (66) repeatB -> empty .

    ]               reduce using rule 66 (repeatB -> empty .)


state 158

    (52) pipelineA -> IN ( var_cte ) . ;

    ;               shift and go to state 179


state 159

    (51) pipelineA -> [ pipelineB ] ; .

    MOD             reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    ID              reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    IF              reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    ECHO            reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    WHILE           reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    REPLAY          reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    SAMPLE          reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    #               reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    PIPE            reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    WHERE           reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    CLEAR           reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    OVAL            reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    TRIO            reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    QUAD            reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    ARC             reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    END             reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)
    }               reduce using rule 51 (pipelineA -> [ pipelineB ] ; .)


state 160

    (56) pipelineC -> , pipelineB .

    ]               reduce using rule 56 (pipelineC -> , pipelineB .)


state 161

    (53) pipelineA -> OUT ( ) ; .

    MOD             reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    ID              reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    IF              reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    ECHO            reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    WHILE           reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    REPLAY          reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    SAMPLE          reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    #               reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    PIPE            reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    WHERE           reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    CLEAR           reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    OVAL            reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    TRIO            reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    QUAD            reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    ARC             reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    END             reduce using rule 53 (pipelineA -> OUT ( ) ; .)
    }               reduce using rule 53 (pipelineA -> OUT ( ) ; .)


state 162

    (31) callingA -> ) ; .

    MOD             reduce using rule 31 (callingA -> ) ; .)
    ID              reduce using rule 31 (callingA -> ) ; .)
    IF              reduce using rule 31 (callingA -> ) ; .)
    ECHO            reduce using rule 31 (callingA -> ) ; .)
    WHILE           reduce using rule 31 (callingA -> ) ; .)
    REPLAY          reduce using rule 31 (callingA -> ) ; .)
    SAMPLE          reduce using rule 31 (callingA -> ) ; .)
    #               reduce using rule 31 (callingA -> ) ; .)
    PIPE            reduce using rule 31 (callingA -> ) ; .)
    WHERE           reduce using rule 31 (callingA -> ) ; .)
    CLEAR           reduce using rule 31 (callingA -> ) ; .)
    OVAL            reduce using rule 31 (callingA -> ) ; .)
    TRIO            reduce using rule 31 (callingA -> ) ; .)
    QUAD            reduce using rule 31 (callingA -> ) ; .)
    ARC             reduce using rule 31 (callingA -> ) ; .)
    END             reduce using rule 31 (callingA -> ) ; .)
    }               reduce using rule 31 (callingA -> ) ; .)


state 163

    (30) callingA -> callingB ) . ;

    ;               shift and go to state 180


state 164

    (32) callingB -> expression checkParam . callingC
    (34) callingC -> . , sumXparam callingB
    (35) callingC -> . empty
    (114) empty -> .

    ,               shift and go to state 181
    )               reduce using rule 114 (empty -> .)

    callingC                       shift and go to state 182
    empty                          shift and go to state 183

state 165

    (44) condition -> IF ( expression ) gotoFalse block . conditionA continueGo
    (45) conditionA -> . ELSE gotoE block
    (46) conditionA -> . empty
    (114) empty -> .

    ELSE            shift and go to state 186
    MOD             reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    ECHO            reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    REPLAY          reduce using rule 114 (empty -> .)
    SAMPLE          reduce using rule 114 (empty -> .)
    #               reduce using rule 114 (empty -> .)
    PIPE            reduce using rule 114 (empty -> .)
    WHERE           reduce using rule 114 (empty -> .)
    CLEAR           reduce using rule 114 (empty -> .)
    OVAL            reduce using rule 114 (empty -> .)
    TRIO            reduce using rule 114 (empty -> .)
    QUAD            reduce using rule 114 (empty -> .)
    ARC             reduce using rule 114 (empty -> .)
    END             reduce using rule 114 (empty -> .)
    }               reduce using rule 114 (empty -> .)

    conditionA                     shift and go to state 184
    empty                          shift and go to state 185

state 166

    (60) commandA -> ON move exp CTE_INTEGER color . ;

    ;               shift and go to state 187


state 167

    (19) moduleA -> ( vars . ) block

    )               shift and go to state 188


state 168

    (25) type -> FLOAT .

    ID              reduce using rule 25 (type -> FLOAT .)


state 169

    (24) type -> INT .

    ID              reduce using rule 24 (type -> INT .)


state 170

    (26) type -> BOOL .

    ID              reduce using rule 26 (type -> BOOL .)


state 171

    (21) vars -> type . ID varsA

    ID              shift and go to state 189


state 172

    (40) blockB -> statute . blockC
    (41) blockC -> . blockB
    (42) blockC -> . empty
    (40) blockB -> . statute blockC
    (114) empty -> .
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . cycle
    (13) statute -> . repeat
    (14) statute -> . command
    (15) statute -> . calling
    (16) statute -> . pipeline
    (17) statute -> . screen
    (43) assign -> . ID = expression ;
    (44) condition -> . IF ( expression ) gotoFalse block conditionA continueGo
    (47) write -> . ECHO writeA ;
    (62) cycle -> . WHILE gotoW ( expression ) gotoFalse block continueGoW
    (63) repeat -> . REPLAY CTE_INTEGER gotoR [ repeatA ] ;
    (58) command -> . figure exp exp color ;
    (59) command -> . SAMPLE commandA
    (27) calling -> . # callID ( insertEra callingA
    (50) pipeline -> . PIPE ID pipelineA
    (99) screen -> . WHERE
    (100) screen -> . CLEAR
    (83) figure -> . OVAL
    (84) figure -> . TRIO
    (85) figure -> . QUAD
    (86) figure -> . ARC

    }               reduce using rule 114 (empty -> .)
    ID              shift and go to state 23
    IF              shift and go to state 12
    ECHO            shift and go to state 18
    WHILE           shift and go to state 6
    REPLAY          shift and go to state 7
    SAMPLE          shift and go to state 19
    #               shift and go to state 9
    PIPE            shift and go to state 8
    WHERE           shift and go to state 28
    CLEAR           shift and go to state 13
    OVAL            shift and go to state 5
    TRIO            shift and go to state 14
    QUAD            shift and go to state 22
    ARC             shift and go to state 29

    figure                         shift and go to state 3
    write                          shift and go to state 10
    command                        shift and go to state 30
    empty                          shift and go to state 190
    repeat                         shift and go to state 15
    screen                         shift and go to state 17
    condition                      shift and go to state 11
    cycle                          shift and go to state 24
    statute                        shift and go to state 172
    pipeline                       shift and go to state 26
    calling                        shift and go to state 27
    blockC                         shift and go to state 191
    blockB                         shift and go to state 192
    assign                         shift and go to state 32

state 173

    (39) blockA -> } .

    MOD             reduce using rule 39 (blockA -> } .)
    ID              reduce using rule 39 (blockA -> } .)
    IF              reduce using rule 39 (blockA -> } .)
    ECHO            reduce using rule 39 (blockA -> } .)
    WHILE           reduce using rule 39 (blockA -> } .)
    REPLAY          reduce using rule 39 (blockA -> } .)
    SAMPLE          reduce using rule 39 (blockA -> } .)
    #               reduce using rule 39 (blockA -> } .)
    PIPE            reduce using rule 39 (blockA -> } .)
    WHERE           reduce using rule 39 (blockA -> } .)
    CLEAR           reduce using rule 39 (blockA -> } .)
    OVAL            reduce using rule 39 (blockA -> } .)
    TRIO            reduce using rule 39 (blockA -> } .)
    QUAD            reduce using rule 39 (blockA -> } .)
    ARC             reduce using rule 39 (blockA -> } .)
    END             reduce using rule 39 (blockA -> } .)
    ELSE            reduce using rule 39 (blockA -> } .)
    }               reduce using rule 39 (blockA -> } .)


state 174

    (38) blockA -> blockB . }

    }               shift and go to state 193


state 175

    (37) block -> { blockA .

    MOD             reduce using rule 37 (block -> { blockA .)
    ID              reduce using rule 37 (block -> { blockA .)
    IF              reduce using rule 37 (block -> { blockA .)
    ECHO            reduce using rule 37 (block -> { blockA .)
    WHILE           reduce using rule 37 (block -> { blockA .)
    REPLAY          reduce using rule 37 (block -> { blockA .)
    SAMPLE          reduce using rule 37 (block -> { blockA .)
    #               reduce using rule 37 (block -> { blockA .)
    PIPE            reduce using rule 37 (block -> { blockA .)
    WHERE           reduce using rule 37 (block -> { blockA .)
    CLEAR           reduce using rule 37 (block -> { blockA .)
    OVAL            reduce using rule 37 (block -> { blockA .)
    TRIO            reduce using rule 37 (block -> { blockA .)
    QUAD            reduce using rule 37 (block -> { blockA .)
    ARC             reduce using rule 37 (block -> { blockA .)
    END             reduce using rule 37 (block -> { blockA .)
    }               reduce using rule 37 (block -> { blockA .)
    ELSE            reduce using rule 37 (block -> { blockA .)


state 176

    (18) module -> MOD # ID insertQuadMod moduleA endMod .

    MOD             reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    ID              reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    IF              reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    ECHO            reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    WHILE           reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    REPLAY          reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    SAMPLE          reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    #               reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    PIPE            reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    WHERE           reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    CLEAR           reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    OVAL            reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    TRIO            reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    QUAD            reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    ARC             reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)
    END             reduce using rule 18 (module -> MOD # ID insertQuadMod moduleA endMod .)


state 177

    (62) cycle -> WHILE gotoW ( expression ) gotoFalse block . continueGoW
    (111) continueGoW -> .

    MOD             reduce using rule 111 (continueGoW -> .)
    ID              reduce using rule 111 (continueGoW -> .)
    IF              reduce using rule 111 (continueGoW -> .)
    ECHO            reduce using rule 111 (continueGoW -> .)
    WHILE           reduce using rule 111 (continueGoW -> .)
    REPLAY          reduce using rule 111 (continueGoW -> .)
    SAMPLE          reduce using rule 111 (continueGoW -> .)
    #               reduce using rule 111 (continueGoW -> .)
    PIPE            reduce using rule 111 (continueGoW -> .)
    WHERE           reduce using rule 111 (continueGoW -> .)
    CLEAR           reduce using rule 111 (continueGoW -> .)
    OVAL            reduce using rule 111 (continueGoW -> .)
    TRIO            reduce using rule 111 (continueGoW -> .)
    QUAD            reduce using rule 111 (continueGoW -> .)
    ARC             reduce using rule 111 (continueGoW -> .)
    END             reduce using rule 111 (continueGoW -> .)
    }               reduce using rule 111 (continueGoW -> .)

    continueGoW                    shift and go to state 194

state 178

    (63) repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .

    ID              reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    IF              reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    ECHO            reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    WHILE           reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    REPLAY          reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    SAMPLE          reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    #               reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    PIPE            reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    WHERE           reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    CLEAR           reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    OVAL            reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    TRIO            reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    QUAD            reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    ARC             reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    }               reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    MOD             reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)
    END             reduce using rule 63 (repeat -> REPLAY CTE_INTEGER gotoR [ repeatA ] ; .)


state 179

    (52) pipelineA -> IN ( var_cte ) ; .

    MOD             reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    ID              reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    IF              reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    ECHO            reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    WHILE           reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    REPLAY          reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    SAMPLE          reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    #               reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    PIPE            reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    WHERE           reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    CLEAR           reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    OVAL            reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    TRIO            reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    QUAD            reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    ARC             reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    END             reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)
    }               reduce using rule 52 (pipelineA -> IN ( var_cte ) ; .)


state 180

    (30) callingA -> callingB ) ; .

    MOD             reduce using rule 30 (callingA -> callingB ) ; .)
    ID              reduce using rule 30 (callingA -> callingB ) ; .)
    IF              reduce using rule 30 (callingA -> callingB ) ; .)
    ECHO            reduce using rule 30 (callingA -> callingB ) ; .)
    WHILE           reduce using rule 30 (callingA -> callingB ) ; .)
    REPLAY          reduce using rule 30 (callingA -> callingB ) ; .)
    SAMPLE          reduce using rule 30 (callingA -> callingB ) ; .)
    #               reduce using rule 30 (callingA -> callingB ) ; .)
    PIPE            reduce using rule 30 (callingA -> callingB ) ; .)
    WHERE           reduce using rule 30 (callingA -> callingB ) ; .)
    CLEAR           reduce using rule 30 (callingA -> callingB ) ; .)
    OVAL            reduce using rule 30 (callingA -> callingB ) ; .)
    TRIO            reduce using rule 30 (callingA -> callingB ) ; .)
    QUAD            reduce using rule 30 (callingA -> callingB ) ; .)
    ARC             reduce using rule 30 (callingA -> callingB ) ; .)
    END             reduce using rule 30 (callingA -> callingB ) ; .)
    }               reduce using rule 30 (callingA -> callingB ) ; .)


state 181

    (34) callingC -> , . sumXparam callingB
    (36) sumXparam -> .

    (               reduce using rule 36 (sumXparam -> .)
    ID              reduce using rule 36 (sumXparam -> .)
    CTE_INTEGER     reduce using rule 36 (sumXparam -> .)
    CTE_FLOAT       reduce using rule 36 (sumXparam -> .)
    TRUE            reduce using rule 36 (sumXparam -> .)
    FALSE           reduce using rule 36 (sumXparam -> .)

    sumXparam                      shift and go to state 195

state 182

    (32) callingB -> expression checkParam callingC .

    )               reduce using rule 32 (callingB -> expression checkParam callingC .)


state 183

    (35) callingC -> empty .

    )               reduce using rule 35 (callingC -> empty .)


state 184

    (44) condition -> IF ( expression ) gotoFalse block conditionA . continueGo
    (110) continueGo -> .

    MOD             reduce using rule 110 (continueGo -> .)
    ID              reduce using rule 110 (continueGo -> .)
    IF              reduce using rule 110 (continueGo -> .)
    ECHO            reduce using rule 110 (continueGo -> .)
    WHILE           reduce using rule 110 (continueGo -> .)
    REPLAY          reduce using rule 110 (continueGo -> .)
    SAMPLE          reduce using rule 110 (continueGo -> .)
    #               reduce using rule 110 (continueGo -> .)
    PIPE            reduce using rule 110 (continueGo -> .)
    WHERE           reduce using rule 110 (continueGo -> .)
    CLEAR           reduce using rule 110 (continueGo -> .)
    OVAL            reduce using rule 110 (continueGo -> .)
    TRIO            reduce using rule 110 (continueGo -> .)
    QUAD            reduce using rule 110 (continueGo -> .)
    ARC             reduce using rule 110 (continueGo -> .)
    END             reduce using rule 110 (continueGo -> .)
    }               reduce using rule 110 (continueGo -> .)

    continueGo                     shift and go to state 196

state 185

    (46) conditionA -> empty .

    MOD             reduce using rule 46 (conditionA -> empty .)
    ID              reduce using rule 46 (conditionA -> empty .)
    IF              reduce using rule 46 (conditionA -> empty .)
    ECHO            reduce using rule 46 (conditionA -> empty .)
    WHILE           reduce using rule 46 (conditionA -> empty .)
    REPLAY          reduce using rule 46 (conditionA -> empty .)
    SAMPLE          reduce using rule 46 (conditionA -> empty .)
    #               reduce using rule 46 (conditionA -> empty .)
    PIPE            reduce using rule 46 (conditionA -> empty .)
    WHERE           reduce using rule 46 (conditionA -> empty .)
    CLEAR           reduce using rule 46 (conditionA -> empty .)
    OVAL            reduce using rule 46 (conditionA -> empty .)
    TRIO            reduce using rule 46 (conditionA -> empty .)
    QUAD            reduce using rule 46 (conditionA -> empty .)
    ARC             reduce using rule 46 (conditionA -> empty .)
    END             reduce using rule 46 (conditionA -> empty .)
    }               reduce using rule 46 (conditionA -> empty .)


state 186

    (45) conditionA -> ELSE . gotoE block
    (107) gotoE -> .

    {               reduce using rule 107 (gotoE -> .)

    gotoE                          shift and go to state 197

state 187

    (60) commandA -> ON move exp CTE_INTEGER color ; .

    MOD             reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    ID              reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    IF              reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    ECHO            reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    WHILE           reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    REPLAY          reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    SAMPLE          reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    #               reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    PIPE            reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    WHERE           reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    CLEAR           reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    OVAL            reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    TRIO            reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    QUAD            reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    ARC             reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    END             reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    ]               reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)
    }               reduce using rule 60 (commandA -> ON move exp CTE_INTEGER color ; .)


state 188

    (19) moduleA -> ( vars ) . block
    (37) block -> . { blockA

    {               shift and go to state 151

    block                          shift and go to state 198

state 189

    (21) vars -> type ID . varsA
    (22) varsA -> . , vars
    (23) varsA -> . empty
    (114) empty -> .

    ,               shift and go to state 200
    )               reduce using rule 114 (empty -> .)

    varsA                          shift and go to state 199
    empty                          shift and go to state 201

state 190

    (42) blockC -> empty .

    }               reduce using rule 42 (blockC -> empty .)


state 191

    (40) blockB -> statute blockC .

    }               reduce using rule 40 (blockB -> statute blockC .)


state 192

    (41) blockC -> blockB .

    }               reduce using rule 41 (blockC -> blockB .)


state 193

    (38) blockA -> blockB } .

    MOD             reduce using rule 38 (blockA -> blockB } .)
    ID              reduce using rule 38 (blockA -> blockB } .)
    IF              reduce using rule 38 (blockA -> blockB } .)
    ECHO            reduce using rule 38 (blockA -> blockB } .)
    WHILE           reduce using rule 38 (blockA -> blockB } .)
    REPLAY          reduce using rule 38 (blockA -> blockB } .)
    SAMPLE          reduce using rule 38 (blockA -> blockB } .)
    #               reduce using rule 38 (blockA -> blockB } .)
    PIPE            reduce using rule 38 (blockA -> blockB } .)
    WHERE           reduce using rule 38 (blockA -> blockB } .)
    CLEAR           reduce using rule 38 (blockA -> blockB } .)
    OVAL            reduce using rule 38 (blockA -> blockB } .)
    TRIO            reduce using rule 38 (blockA -> blockB } .)
    QUAD            reduce using rule 38 (blockA -> blockB } .)
    ARC             reduce using rule 38 (blockA -> blockB } .)
    END             reduce using rule 38 (blockA -> blockB } .)
    ELSE            reduce using rule 38 (blockA -> blockB } .)
    }               reduce using rule 38 (blockA -> blockB } .)


state 194

    (62) cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .

    MOD             reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    ID              reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    IF              reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    ECHO            reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    WHILE           reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    REPLAY          reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    SAMPLE          reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    #               reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    PIPE            reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    WHERE           reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    CLEAR           reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    OVAL            reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    TRIO            reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    QUAD            reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    ARC             reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    END             reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)
    }               reduce using rule 62 (cycle -> WHILE gotoW ( expression ) gotoFalse block continueGoW .)


state 195

    (34) callingC -> , sumXparam . callingB
    (32) callingB -> . expression checkParam callingC
    (67) expression -> . exp = = exp
    (68) expression -> . exp < > exp
    (69) expression -> . exp < = exp
    (70) expression -> . exp > = exp
    (71) expression -> . exp > exp
    (72) expression -> . exp < exp
    (73) expression -> . exp AND exp
    (74) expression -> . exp OR exp
    (75) expression -> . exp empty
    (76) exp -> . exp + exp
    (77) exp -> . exp - exp
    (78) exp -> . exp * exp
    (79) exp -> . exp / exp
    (80) exp -> . factor empty
    (81) factor -> . ( expression )
    (82) factor -> . var_cte
    (101) var_cte -> . ID
    (102) var_cte -> . CTE_INTEGER
    (103) var_cte -> . CTE_FLOAT
    (104) var_cte -> . TRUE
    (105) var_cte -> . FALSE

    (               shift and go to state 35
    ID              shift and go to state 42
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 41

    var_cte                        shift and go to state 36
    callingB                       shift and go to state 202
    exp                            shift and go to state 51
    factor                         shift and go to state 40
    expression                     shift and go to state 141

state 196

    (44) condition -> IF ( expression ) gotoFalse block conditionA continueGo .

    MOD             reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    ID              reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    IF              reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    ECHO            reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    WHILE           reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    REPLAY          reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    SAMPLE          reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    #               reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    PIPE            reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    WHERE           reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    CLEAR           reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    OVAL            reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    TRIO            reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    QUAD            reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    ARC             reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    END             reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)
    }               reduce using rule 44 (condition -> IF ( expression ) gotoFalse block conditionA continueGo .)


state 197

    (45) conditionA -> ELSE gotoE . block
    (37) block -> . { blockA

    {               shift and go to state 151

    block                          shift and go to state 203

state 198

    (19) moduleA -> ( vars ) block .

    MOD             reduce using rule 19 (moduleA -> ( vars ) block .)
    ID              reduce using rule 19 (moduleA -> ( vars ) block .)
    IF              reduce using rule 19 (moduleA -> ( vars ) block .)
    ECHO            reduce using rule 19 (moduleA -> ( vars ) block .)
    WHILE           reduce using rule 19 (moduleA -> ( vars ) block .)
    REPLAY          reduce using rule 19 (moduleA -> ( vars ) block .)
    SAMPLE          reduce using rule 19 (moduleA -> ( vars ) block .)
    #               reduce using rule 19 (moduleA -> ( vars ) block .)
    PIPE            reduce using rule 19 (moduleA -> ( vars ) block .)
    WHERE           reduce using rule 19 (moduleA -> ( vars ) block .)
    CLEAR           reduce using rule 19 (moduleA -> ( vars ) block .)
    OVAL            reduce using rule 19 (moduleA -> ( vars ) block .)
    TRIO            reduce using rule 19 (moduleA -> ( vars ) block .)
    QUAD            reduce using rule 19 (moduleA -> ( vars ) block .)
    ARC             reduce using rule 19 (moduleA -> ( vars ) block .)
    END             reduce using rule 19 (moduleA -> ( vars ) block .)


state 199

    (21) vars -> type ID varsA .

    )               reduce using rule 21 (vars -> type ID varsA .)


state 200

    (22) varsA -> , . vars
    (21) vars -> . type ID varsA
    (24) type -> . INT
    (25) type -> . FLOAT
    (26) type -> . BOOL

    INT             shift and go to state 169
    FLOAT           shift and go to state 168
    BOOL            shift and go to state 170

    type                           shift and go to state 171
    vars                           shift and go to state 204

state 201

    (23) varsA -> empty .

    )               reduce using rule 23 (varsA -> empty .)


state 202

    (34) callingC -> , sumXparam callingB .

    )               reduce using rule 34 (callingC -> , sumXparam callingB .)


state 203

    (45) conditionA -> ELSE gotoE block .

    MOD             reduce using rule 45 (conditionA -> ELSE gotoE block .)
    ID              reduce using rule 45 (conditionA -> ELSE gotoE block .)
    IF              reduce using rule 45 (conditionA -> ELSE gotoE block .)
    ECHO            reduce using rule 45 (conditionA -> ELSE gotoE block .)
    WHILE           reduce using rule 45 (conditionA -> ELSE gotoE block .)
    REPLAY          reduce using rule 45 (conditionA -> ELSE gotoE block .)
    SAMPLE          reduce using rule 45 (conditionA -> ELSE gotoE block .)
    #               reduce using rule 45 (conditionA -> ELSE gotoE block .)
    PIPE            reduce using rule 45 (conditionA -> ELSE gotoE block .)
    WHERE           reduce using rule 45 (conditionA -> ELSE gotoE block .)
    CLEAR           reduce using rule 45 (conditionA -> ELSE gotoE block .)
    OVAL            reduce using rule 45 (conditionA -> ELSE gotoE block .)
    TRIO            reduce using rule 45 (conditionA -> ELSE gotoE block .)
    QUAD            reduce using rule 45 (conditionA -> ELSE gotoE block .)
    ARC             reduce using rule 45 (conditionA -> ELSE gotoE block .)
    END             reduce using rule 45 (conditionA -> ELSE gotoE block .)
    }               reduce using rule 45 (conditionA -> ELSE gotoE block .)


state 204

    (22) varsA -> , vars .

    )               reduce using rule 22 (varsA -> , vars .)

