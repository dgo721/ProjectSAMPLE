Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> INIT programA
Rule 2     programA -> programB END
Rule 3     programA -> END
Rule 4     programB -> workspace programC
Rule 5     programC -> programB
Rule 6     programC -> empty
Rule 7     workspace -> statute
Rule 8     workspace -> module
Rule 9     statute -> assign
Rule 10    statute -> condition
Rule 11    statute -> write
Rule 12    statute -> repeat
Rule 13    statute -> command
Rule 14    statute -> calling
Rule 15    statute -> pipeline
Rule 16    statute -> screen
Rule 17    module -> MOD _ ID moduleA
Rule 18    moduleA -> ( vars ) block
Rule 19    moduleA -> block
Rule 20    vars -> type ID varsA
Rule 21    varsA -> , vars
Rule 22    varsA -> empty
Rule 23    type -> INT
Rule 24    type -> FLOAT
Rule 25    calling -> _ ID ( callingA
Rule 26    callingA -> callingB ) ;
Rule 27    callingA -> ) ;
Rule 28    callingB -> expression callingC
Rule 29    callingC -> , callingB
Rule 30    callingC -> empty
Rule 31    block -> { blockA
Rule 32    blockA -> blockB }
Rule 33    blockA -> }
Rule 34    blockB -> statute blockC
Rule 35    blockC -> blockB
Rule 36    blockC -> empty
Rule 37    assign -> ID = expression ;
Rule 38    condition -> IF ( expression ) block conditionA
Rule 39    conditionA -> ELSE block
Rule 40    conditionA -> empty
Rule 41    write -> ECHO expression ;
Rule 42    write -> " CTE_STRING " ;
Rule 43    pipeline -> PIPE ID pipelineA
Rule 44    pipelineA -> [ pipelineB ] ;
Rule 45    pipelineA -> IN ( var_cte ) ;
Rule 46    pipelineA -> OUT ( ) ;
Rule 47    pipelineA -> COUNT ;
Rule 48    pipelineB -> exp pipelineC
Rule 49    pipelineC -> , pipelineB
Rule 50    pipelineC -> empty
Rule 51    command -> figure exp exp color ;
Rule 52    command -> SAMPLE commandA
Rule 53    commandA -> ON move exp CTE_INTEGER color ;
Rule 54    commandA -> OFF move exp ;
Rule 55    repeat -> REPLAY CTE_INTEGER [ repeatA ] ;
Rule 56    repeatA -> command repeatB
Rule 57    repeatB -> repeatA
Rule 58    repeatB -> empty
Rule 59    expression -> exp = = exp
Rule 60    expression -> exp < > exp
Rule 61    expression -> exp < = exp
Rule 62    expression -> exp > = exp
Rule 63    expression -> exp > exp
Rule 64    expression -> exp < exp
Rule 65    expression -> exp
Rule 66    exp -> term expA
Rule 67    expA -> expB
Rule 68    expA -> empty
Rule 69    expB -> + exp
Rule 70    expB -> - exp
Rule 71    term -> factor termA
Rule 72    termA -> termB
Rule 73    termA -> empty
Rule 74    termB -> * term
Rule 75    termB -> / term
Rule 76    factor -> ( expression )
Rule 77    factor -> var_cte
Rule 78    figure -> OVAL
Rule 79    figure -> TRIO
Rule 80    figure -> QUAD
Rule 81    figure -> ARC
Rule 82    move -> UP
Rule 83    move -> DOWN
Rule 84    move -> LEFT
Rule 85    move -> RIGHT
Rule 86    color -> RED
Rule 87    color -> YELLOW
Rule 88    color -> BLUE
Rule 89    color -> GREEN
Rule 90    color -> BLACK
Rule 91    color -> ORANGE
Rule 92    color -> PURPLE
Rule 93    color -> CYAN
Rule 94    screen -> WHERE
Rule 95    screen -> CLEAR
Rule 96    var_cte -> ID
Rule 97    var_cte -> CTE_INTEGER
Rule 98    var_cte -> CTE_FLOAT
Rule 99    empty -> <empty>

Terminals, with rules where they appear

"                    : 42 42
(                    : 18 25 38 45 46 76
)                    : 18 26 27 38 45 46 76
*                    : 74
+                    : 69
,                    : 21 29 49
-                    : 70
/                    : 75
;                    : 26 27 37 41 42 44 45 46 47 51 53 54 55
<                    : 60 61 64
=                    : 37 59 59 61 62
>                    : 60 62 63
ARC                  : 81
BLACK                : 90
BLUE                 : 88
CLEAR                : 95
COUNT                : 47
CTE_FLOAT            : 98
CTE_INTEGER          : 53 55 97
CTE_STRING           : 42
CYAN                 : 93
DOWN                 : 83
ECHO                 : 41
ELSE                 : 39
END                  : 2 3
FLOAT                : 24
GREEN                : 89
ID                   : 17 20 25 37 43 96
IF                   : 38
IN                   : 45
INIT                 : 1
INT                  : 23
LEFT                 : 84
MOD                  : 17
OFF                  : 54
ON                   : 53
ORANGE               : 91
OUT                  : 46
OVAL                 : 78
PIPE                 : 43
PURPLE               : 92
QUAD                 : 80
RED                  : 86
REPLAY               : 55
RIGHT                : 85
SAMPLE               : 52
TRIO                 : 79
UP                   : 82
WHERE                : 94
YELLOW               : 87
[                    : 44 55
]                    : 44 55
_                    : 17 25
error                : 
{                    : 31
}                    : 32 33

Nonterminals, with rules where they appear

assign               : 9
block                : 18 19 38 39
blockA               : 31
blockB               : 32 35
blockC               : 34
calling              : 14
callingA             : 25
callingB             : 26 29
callingC             : 28
color                : 51 53
command              : 13 56
commandA             : 52
condition            : 10
conditionA           : 38
empty                : 6 22 30 36 40 50 58 68 73
exp                  : 48 51 51 53 54 59 59 60 60 61 61 62 62 63 63 64 64 65 69 70
expA                 : 66
expB                 : 67
expression           : 28 37 38 41 76
factor               : 71
figure               : 51
module               : 8
moduleA              : 17
move                 : 53 54
pipeline             : 15
pipelineA            : 43
pipelineB            : 44 49
pipelineC            : 48
program              : 0
programA             : 1
programB             : 2 5
programC             : 4
repeat               : 12
repeatA              : 55 57
repeatB              : 56
screen               : 16
statute              : 7 34
term                 : 66 74 75
termA                : 71
termB                : 72
type                 : 20
var_cte              : 45 77
vars                 : 18 21
varsA                : 20
workspace            : 4
write                : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . INIT programA

    INIT            shift and go to state 1

    program                        shift and go to state 2

state 1

    (1) program -> INIT . programA
    (2) programA -> . programB END
    (3) programA -> . END
    (4) programB -> . workspace programC
    (7) workspace -> . statute
    (8) workspace -> . module
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . repeat
    (13) statute -> . command
    (14) statute -> . calling
    (15) statute -> . pipeline
    (16) statute -> . screen
    (17) module -> . MOD _ ID moduleA
    (37) assign -> . ID = expression ;
    (38) condition -> . IF ( expression ) block conditionA
    (41) write -> . ECHO expression ;
    (42) write -> . " CTE_STRING " ;
    (55) repeat -> . REPLAY CTE_INTEGER [ repeatA ] ;
    (51) command -> . figure exp exp color ;
    (52) command -> . SAMPLE commandA
    (25) calling -> . _ ID ( callingA
    (43) pipeline -> . PIPE ID pipelineA
    (94) screen -> . WHERE
    (95) screen -> . CLEAR
    (78) figure -> . OVAL
    (79) figure -> . TRIO
    (80) figure -> . QUAD
    (81) figure -> . ARC

    END             shift and go to state 14
    MOD             shift and go to state 32
    ID              shift and go to state 21
    IF              shift and go to state 23
    ECHO            shift and go to state 16
    "               shift and go to state 9
    REPLAY          shift and go to state 6
    SAMPLE          shift and go to state 17
    _               shift and go to state 22
    PIPE            shift and go to state 8
    WHERE           shift and go to state 27
    CLEAR           shift and go to state 11
    OVAL            shift and go to state 7
    TRIO            shift and go to state 12
    QUAD            shift and go to state 20
    ARC             shift and go to state 28

    figure                         shift and go to state 3
    module                         shift and go to state 5
    write                          shift and go to state 10
    condition                      shift and go to state 4
    repeat                         shift and go to state 13
    screen                         shift and go to state 15
    programB                       shift and go to state 19
    statute                        shift and go to state 24
    pipeline                       shift and go to state 25
    calling                        shift and go to state 26
    command                        shift and go to state 29
    workspace                      shift and go to state 30
    assign                         shift and go to state 31
    programA                       shift and go to state 18

state 2

    (0) S' -> program .



state 3

    (51) command -> figure . exp exp color ;
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    var_cte                        shift and go to state 36
    exp                            shift and go to state 38
    factor                         shift and go to state 39

state 4

    (10) statute -> condition .

    MOD             reduce using rule 10 (statute -> condition .)
    ID              reduce using rule 10 (statute -> condition .)
    IF              reduce using rule 10 (statute -> condition .)
    ECHO            reduce using rule 10 (statute -> condition .)
    "               reduce using rule 10 (statute -> condition .)
    REPLAY          reduce using rule 10 (statute -> condition .)
    SAMPLE          reduce using rule 10 (statute -> condition .)
    _               reduce using rule 10 (statute -> condition .)
    PIPE            reduce using rule 10 (statute -> condition .)
    WHERE           reduce using rule 10 (statute -> condition .)
    CLEAR           reduce using rule 10 (statute -> condition .)
    OVAL            reduce using rule 10 (statute -> condition .)
    TRIO            reduce using rule 10 (statute -> condition .)
    QUAD            reduce using rule 10 (statute -> condition .)
    ARC             reduce using rule 10 (statute -> condition .)
    END             reduce using rule 10 (statute -> condition .)
    }               reduce using rule 10 (statute -> condition .)


state 5

    (8) workspace -> module .

    MOD             reduce using rule 8 (workspace -> module .)
    ID              reduce using rule 8 (workspace -> module .)
    IF              reduce using rule 8 (workspace -> module .)
    ECHO            reduce using rule 8 (workspace -> module .)
    "               reduce using rule 8 (workspace -> module .)
    REPLAY          reduce using rule 8 (workspace -> module .)
    SAMPLE          reduce using rule 8 (workspace -> module .)
    _               reduce using rule 8 (workspace -> module .)
    PIPE            reduce using rule 8 (workspace -> module .)
    WHERE           reduce using rule 8 (workspace -> module .)
    CLEAR           reduce using rule 8 (workspace -> module .)
    OVAL            reduce using rule 8 (workspace -> module .)
    TRIO            reduce using rule 8 (workspace -> module .)
    QUAD            reduce using rule 8 (workspace -> module .)
    ARC             reduce using rule 8 (workspace -> module .)
    END             reduce using rule 8 (workspace -> module .)


state 6

    (55) repeat -> REPLAY . CTE_INTEGER [ repeatA ] ;

    CTE_INTEGER     shift and go to state 41


state 7

    (78) figure -> OVAL .

    (               reduce using rule 78 (figure -> OVAL .)
    ID              reduce using rule 78 (figure -> OVAL .)
    CTE_INTEGER     reduce using rule 78 (figure -> OVAL .)
    CTE_FLOAT       reduce using rule 78 (figure -> OVAL .)


state 8

    (43) pipeline -> PIPE . ID pipelineA

    ID              shift and go to state 42


state 9

    (42) write -> " . CTE_STRING " ;

    CTE_STRING      shift and go to state 43


state 10

    (11) statute -> write .

    MOD             reduce using rule 11 (statute -> write .)
    ID              reduce using rule 11 (statute -> write .)
    IF              reduce using rule 11 (statute -> write .)
    ECHO            reduce using rule 11 (statute -> write .)
    "               reduce using rule 11 (statute -> write .)
    REPLAY          reduce using rule 11 (statute -> write .)
    SAMPLE          reduce using rule 11 (statute -> write .)
    _               reduce using rule 11 (statute -> write .)
    PIPE            reduce using rule 11 (statute -> write .)
    WHERE           reduce using rule 11 (statute -> write .)
    CLEAR           reduce using rule 11 (statute -> write .)
    OVAL            reduce using rule 11 (statute -> write .)
    TRIO            reduce using rule 11 (statute -> write .)
    QUAD            reduce using rule 11 (statute -> write .)
    ARC             reduce using rule 11 (statute -> write .)
    END             reduce using rule 11 (statute -> write .)
    }               reduce using rule 11 (statute -> write .)


state 11

    (95) screen -> CLEAR .

    MOD             reduce using rule 95 (screen -> CLEAR .)
    ID              reduce using rule 95 (screen -> CLEAR .)
    IF              reduce using rule 95 (screen -> CLEAR .)
    ECHO            reduce using rule 95 (screen -> CLEAR .)
    "               reduce using rule 95 (screen -> CLEAR .)
    REPLAY          reduce using rule 95 (screen -> CLEAR .)
    SAMPLE          reduce using rule 95 (screen -> CLEAR .)
    _               reduce using rule 95 (screen -> CLEAR .)
    PIPE            reduce using rule 95 (screen -> CLEAR .)
    WHERE           reduce using rule 95 (screen -> CLEAR .)
    CLEAR           reduce using rule 95 (screen -> CLEAR .)
    OVAL            reduce using rule 95 (screen -> CLEAR .)
    TRIO            reduce using rule 95 (screen -> CLEAR .)
    QUAD            reduce using rule 95 (screen -> CLEAR .)
    ARC             reduce using rule 95 (screen -> CLEAR .)
    END             reduce using rule 95 (screen -> CLEAR .)
    }               reduce using rule 95 (screen -> CLEAR .)


state 12

    (79) figure -> TRIO .

    (               reduce using rule 79 (figure -> TRIO .)
    ID              reduce using rule 79 (figure -> TRIO .)
    CTE_INTEGER     reduce using rule 79 (figure -> TRIO .)
    CTE_FLOAT       reduce using rule 79 (figure -> TRIO .)


state 13

    (12) statute -> repeat .

    MOD             reduce using rule 12 (statute -> repeat .)
    ID              reduce using rule 12 (statute -> repeat .)
    IF              reduce using rule 12 (statute -> repeat .)
    ECHO            reduce using rule 12 (statute -> repeat .)
    "               reduce using rule 12 (statute -> repeat .)
    REPLAY          reduce using rule 12 (statute -> repeat .)
    SAMPLE          reduce using rule 12 (statute -> repeat .)
    _               reduce using rule 12 (statute -> repeat .)
    PIPE            reduce using rule 12 (statute -> repeat .)
    WHERE           reduce using rule 12 (statute -> repeat .)
    CLEAR           reduce using rule 12 (statute -> repeat .)
    OVAL            reduce using rule 12 (statute -> repeat .)
    TRIO            reduce using rule 12 (statute -> repeat .)
    QUAD            reduce using rule 12 (statute -> repeat .)
    ARC             reduce using rule 12 (statute -> repeat .)
    END             reduce using rule 12 (statute -> repeat .)
    }               reduce using rule 12 (statute -> repeat .)


state 14

    (3) programA -> END .

    $end            reduce using rule 3 (programA -> END .)


state 15

    (16) statute -> screen .

    MOD             reduce using rule 16 (statute -> screen .)
    ID              reduce using rule 16 (statute -> screen .)
    IF              reduce using rule 16 (statute -> screen .)
    ECHO            reduce using rule 16 (statute -> screen .)
    "               reduce using rule 16 (statute -> screen .)
    REPLAY          reduce using rule 16 (statute -> screen .)
    SAMPLE          reduce using rule 16 (statute -> screen .)
    _               reduce using rule 16 (statute -> screen .)
    PIPE            reduce using rule 16 (statute -> screen .)
    WHERE           reduce using rule 16 (statute -> screen .)
    CLEAR           reduce using rule 16 (statute -> screen .)
    OVAL            reduce using rule 16 (statute -> screen .)
    TRIO            reduce using rule 16 (statute -> screen .)
    QUAD            reduce using rule 16 (statute -> screen .)
    ARC             reduce using rule 16 (statute -> screen .)
    END             reduce using rule 16 (statute -> screen .)
    }               reduce using rule 16 (statute -> screen .)


state 16

    (41) write -> ECHO . expression ;
    (59) expression -> . exp = = exp
    (60) expression -> . exp < > exp
    (61) expression -> . exp < = exp
    (62) expression -> . exp > = exp
    (63) expression -> . exp > exp
    (64) expression -> . exp < exp
    (65) expression -> . exp
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    exp                            shift and go to state 45
    var_cte                        shift and go to state 36
    factor                         shift and go to state 39
    expression                     shift and go to state 44

state 17

    (52) command -> SAMPLE . commandA
    (53) commandA -> . ON move exp CTE_INTEGER color ;
    (54) commandA -> . OFF move exp ;

    ON              shift and go to state 48
    OFF             shift and go to state 47

    commandA                       shift and go to state 46

state 18

    (1) program -> INIT programA .

    $end            reduce using rule 1 (program -> INIT programA .)


state 19

    (2) programA -> programB . END

    END             shift and go to state 49


state 20

    (80) figure -> QUAD .

    (               reduce using rule 80 (figure -> QUAD .)
    ID              reduce using rule 80 (figure -> QUAD .)
    CTE_INTEGER     reduce using rule 80 (figure -> QUAD .)
    CTE_FLOAT       reduce using rule 80 (figure -> QUAD .)


state 21

    (37) assign -> ID . = expression ;

    =               shift and go to state 50


state 22

    (25) calling -> _ . ID ( callingA

    ID              shift and go to state 51


state 23

    (38) condition -> IF . ( expression ) block conditionA

    (               shift and go to state 52


state 24

    (7) workspace -> statute .

    MOD             reduce using rule 7 (workspace -> statute .)
    ID              reduce using rule 7 (workspace -> statute .)
    IF              reduce using rule 7 (workspace -> statute .)
    ECHO            reduce using rule 7 (workspace -> statute .)
    "               reduce using rule 7 (workspace -> statute .)
    REPLAY          reduce using rule 7 (workspace -> statute .)
    SAMPLE          reduce using rule 7 (workspace -> statute .)
    _               reduce using rule 7 (workspace -> statute .)
    PIPE            reduce using rule 7 (workspace -> statute .)
    WHERE           reduce using rule 7 (workspace -> statute .)
    CLEAR           reduce using rule 7 (workspace -> statute .)
    OVAL            reduce using rule 7 (workspace -> statute .)
    TRIO            reduce using rule 7 (workspace -> statute .)
    QUAD            reduce using rule 7 (workspace -> statute .)
    ARC             reduce using rule 7 (workspace -> statute .)
    END             reduce using rule 7 (workspace -> statute .)


state 25

    (15) statute -> pipeline .

    MOD             reduce using rule 15 (statute -> pipeline .)
    ID              reduce using rule 15 (statute -> pipeline .)
    IF              reduce using rule 15 (statute -> pipeline .)
    ECHO            reduce using rule 15 (statute -> pipeline .)
    "               reduce using rule 15 (statute -> pipeline .)
    REPLAY          reduce using rule 15 (statute -> pipeline .)
    SAMPLE          reduce using rule 15 (statute -> pipeline .)
    _               reduce using rule 15 (statute -> pipeline .)
    PIPE            reduce using rule 15 (statute -> pipeline .)
    WHERE           reduce using rule 15 (statute -> pipeline .)
    CLEAR           reduce using rule 15 (statute -> pipeline .)
    OVAL            reduce using rule 15 (statute -> pipeline .)
    TRIO            reduce using rule 15 (statute -> pipeline .)
    QUAD            reduce using rule 15 (statute -> pipeline .)
    ARC             reduce using rule 15 (statute -> pipeline .)
    END             reduce using rule 15 (statute -> pipeline .)
    }               reduce using rule 15 (statute -> pipeline .)


state 26

    (14) statute -> calling .

    MOD             reduce using rule 14 (statute -> calling .)
    ID              reduce using rule 14 (statute -> calling .)
    IF              reduce using rule 14 (statute -> calling .)
    ECHO            reduce using rule 14 (statute -> calling .)
    "               reduce using rule 14 (statute -> calling .)
    REPLAY          reduce using rule 14 (statute -> calling .)
    SAMPLE          reduce using rule 14 (statute -> calling .)
    _               reduce using rule 14 (statute -> calling .)
    PIPE            reduce using rule 14 (statute -> calling .)
    WHERE           reduce using rule 14 (statute -> calling .)
    CLEAR           reduce using rule 14 (statute -> calling .)
    OVAL            reduce using rule 14 (statute -> calling .)
    TRIO            reduce using rule 14 (statute -> calling .)
    QUAD            reduce using rule 14 (statute -> calling .)
    ARC             reduce using rule 14 (statute -> calling .)
    END             reduce using rule 14 (statute -> calling .)
    }               reduce using rule 14 (statute -> calling .)


state 27

    (94) screen -> WHERE .

    MOD             reduce using rule 94 (screen -> WHERE .)
    ID              reduce using rule 94 (screen -> WHERE .)
    IF              reduce using rule 94 (screen -> WHERE .)
    ECHO            reduce using rule 94 (screen -> WHERE .)
    "               reduce using rule 94 (screen -> WHERE .)
    REPLAY          reduce using rule 94 (screen -> WHERE .)
    SAMPLE          reduce using rule 94 (screen -> WHERE .)
    _               reduce using rule 94 (screen -> WHERE .)
    PIPE            reduce using rule 94 (screen -> WHERE .)
    WHERE           reduce using rule 94 (screen -> WHERE .)
    CLEAR           reduce using rule 94 (screen -> WHERE .)
    OVAL            reduce using rule 94 (screen -> WHERE .)
    TRIO            reduce using rule 94 (screen -> WHERE .)
    QUAD            reduce using rule 94 (screen -> WHERE .)
    ARC             reduce using rule 94 (screen -> WHERE .)
    END             reduce using rule 94 (screen -> WHERE .)
    }               reduce using rule 94 (screen -> WHERE .)


state 28

    (81) figure -> ARC .

    (               reduce using rule 81 (figure -> ARC .)
    ID              reduce using rule 81 (figure -> ARC .)
    CTE_INTEGER     reduce using rule 81 (figure -> ARC .)
    CTE_FLOAT       reduce using rule 81 (figure -> ARC .)


state 29

    (13) statute -> command .

    MOD             reduce using rule 13 (statute -> command .)
    ID              reduce using rule 13 (statute -> command .)
    IF              reduce using rule 13 (statute -> command .)
    ECHO            reduce using rule 13 (statute -> command .)
    "               reduce using rule 13 (statute -> command .)
    REPLAY          reduce using rule 13 (statute -> command .)
    SAMPLE          reduce using rule 13 (statute -> command .)
    _               reduce using rule 13 (statute -> command .)
    PIPE            reduce using rule 13 (statute -> command .)
    WHERE           reduce using rule 13 (statute -> command .)
    CLEAR           reduce using rule 13 (statute -> command .)
    OVAL            reduce using rule 13 (statute -> command .)
    TRIO            reduce using rule 13 (statute -> command .)
    QUAD            reduce using rule 13 (statute -> command .)
    ARC             reduce using rule 13 (statute -> command .)
    END             reduce using rule 13 (statute -> command .)
    }               reduce using rule 13 (statute -> command .)


state 30

    (4) programB -> workspace . programC
    (5) programC -> . programB
    (6) programC -> . empty
    (4) programB -> . workspace programC
    (99) empty -> .
    (7) workspace -> . statute
    (8) workspace -> . module
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . repeat
    (13) statute -> . command
    (14) statute -> . calling
    (15) statute -> . pipeline
    (16) statute -> . screen
    (17) module -> . MOD _ ID moduleA
    (37) assign -> . ID = expression ;
    (38) condition -> . IF ( expression ) block conditionA
    (41) write -> . ECHO expression ;
    (42) write -> . " CTE_STRING " ;
    (55) repeat -> . REPLAY CTE_INTEGER [ repeatA ] ;
    (51) command -> . figure exp exp color ;
    (52) command -> . SAMPLE commandA
    (25) calling -> . _ ID ( callingA
    (43) pipeline -> . PIPE ID pipelineA
    (94) screen -> . WHERE
    (95) screen -> . CLEAR
    (78) figure -> . OVAL
    (79) figure -> . TRIO
    (80) figure -> . QUAD
    (81) figure -> . ARC

    END             reduce using rule 99 (empty -> .)
    MOD             shift and go to state 32
    ID              shift and go to state 21
    IF              shift and go to state 23
    ECHO            shift and go to state 16
    "               shift and go to state 9
    REPLAY          shift and go to state 6
    SAMPLE          shift and go to state 17
    _               shift and go to state 22
    PIPE            shift and go to state 8
    WHERE           shift and go to state 27
    CLEAR           shift and go to state 11
    OVAL            shift and go to state 7
    TRIO            shift and go to state 12
    QUAD            shift and go to state 20
    ARC             shift and go to state 28

    figure                         shift and go to state 3
    module                         shift and go to state 5
    write                          shift and go to state 10
    condition                      shift and go to state 4
    empty                          shift and go to state 53
    repeat                         shift and go to state 13
    screen                         shift and go to state 15
    programB                       shift and go to state 54
    programC                       shift and go to state 55
    statute                        shift and go to state 24
    pipeline                       shift and go to state 25
    calling                        shift and go to state 26
    command                        shift and go to state 29
    workspace                      shift and go to state 30
    assign                         shift and go to state 31

state 31

    (9) statute -> assign .

    MOD             reduce using rule 9 (statute -> assign .)
    ID              reduce using rule 9 (statute -> assign .)
    IF              reduce using rule 9 (statute -> assign .)
    ECHO            reduce using rule 9 (statute -> assign .)
    "               reduce using rule 9 (statute -> assign .)
    REPLAY          reduce using rule 9 (statute -> assign .)
    SAMPLE          reduce using rule 9 (statute -> assign .)
    _               reduce using rule 9 (statute -> assign .)
    PIPE            reduce using rule 9 (statute -> assign .)
    WHERE           reduce using rule 9 (statute -> assign .)
    CLEAR           reduce using rule 9 (statute -> assign .)
    OVAL            reduce using rule 9 (statute -> assign .)
    TRIO            reduce using rule 9 (statute -> assign .)
    QUAD            reduce using rule 9 (statute -> assign .)
    ARC             reduce using rule 9 (statute -> assign .)
    END             reduce using rule 9 (statute -> assign .)
    }               reduce using rule 9 (statute -> assign .)


state 32

    (17) module -> MOD . _ ID moduleA

    _               shift and go to state 56


state 33

    (66) exp -> term . expA
    (67) expA -> . expB
    (68) expA -> . empty
    (69) expB -> . + exp
    (70) expB -> . - exp
    (99) empty -> .

    +               shift and go to state 57
    -               shift and go to state 58
    (               reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    CTE_INTEGER     reduce using rule 99 (empty -> .)
    CTE_FLOAT       reduce using rule 99 (empty -> .)
    =               reduce using rule 99 (empty -> .)
    <               reduce using rule 99 (empty -> .)
    >               reduce using rule 99 (empty -> .)
    ;               reduce using rule 99 (empty -> .)
    )               reduce using rule 99 (empty -> .)
    RED             reduce using rule 99 (empty -> .)
    YELLOW          reduce using rule 99 (empty -> .)
    BLUE            reduce using rule 99 (empty -> .)
    GREEN           reduce using rule 99 (empty -> .)
    BLACK           reduce using rule 99 (empty -> .)
    ORANGE          reduce using rule 99 (empty -> .)
    PURPLE          reduce using rule 99 (empty -> .)
    CYAN            reduce using rule 99 (empty -> .)
    ,               reduce using rule 99 (empty -> .)
    ]               reduce using rule 99 (empty -> .)

    expB                           shift and go to state 59
    expA                           shift and go to state 60
    empty                          shift and go to state 61

state 34

    (76) factor -> ( . expression )
    (59) expression -> . exp = = exp
    (60) expression -> . exp < > exp
    (61) expression -> . exp < = exp
    (62) expression -> . exp > = exp
    (63) expression -> . exp > exp
    (64) expression -> . exp < exp
    (65) expression -> . exp
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    exp                            shift and go to state 45
    var_cte                        shift and go to state 36
    factor                         shift and go to state 39
    expression                     shift and go to state 62

state 35

    (98) var_cte -> CTE_FLOAT .

    *               reduce using rule 98 (var_cte -> CTE_FLOAT .)
    /               reduce using rule 98 (var_cte -> CTE_FLOAT .)
    +               reduce using rule 98 (var_cte -> CTE_FLOAT .)
    -               reduce using rule 98 (var_cte -> CTE_FLOAT .)
    CTE_INTEGER     reduce using rule 98 (var_cte -> CTE_FLOAT .)
    =               reduce using rule 98 (var_cte -> CTE_FLOAT .)
    <               reduce using rule 98 (var_cte -> CTE_FLOAT .)
    >               reduce using rule 98 (var_cte -> CTE_FLOAT .)
    ;               reduce using rule 98 (var_cte -> CTE_FLOAT .)
    (               reduce using rule 98 (var_cte -> CTE_FLOAT .)
    ID              reduce using rule 98 (var_cte -> CTE_FLOAT .)
    CTE_FLOAT       reduce using rule 98 (var_cte -> CTE_FLOAT .)
    )               reduce using rule 98 (var_cte -> CTE_FLOAT .)
    RED             reduce using rule 98 (var_cte -> CTE_FLOAT .)
    YELLOW          reduce using rule 98 (var_cte -> CTE_FLOAT .)
    BLUE            reduce using rule 98 (var_cte -> CTE_FLOAT .)
    GREEN           reduce using rule 98 (var_cte -> CTE_FLOAT .)
    BLACK           reduce using rule 98 (var_cte -> CTE_FLOAT .)
    ORANGE          reduce using rule 98 (var_cte -> CTE_FLOAT .)
    PURPLE          reduce using rule 98 (var_cte -> CTE_FLOAT .)
    CYAN            reduce using rule 98 (var_cte -> CTE_FLOAT .)
    ,               reduce using rule 98 (var_cte -> CTE_FLOAT .)
    ]               reduce using rule 98 (var_cte -> CTE_FLOAT .)


state 36

    (77) factor -> var_cte .

    *               reduce using rule 77 (factor -> var_cte .)
    /               reduce using rule 77 (factor -> var_cte .)
    +               reduce using rule 77 (factor -> var_cte .)
    -               reduce using rule 77 (factor -> var_cte .)
    ;               reduce using rule 77 (factor -> var_cte .)
    )               reduce using rule 77 (factor -> var_cte .)
    ,               reduce using rule 77 (factor -> var_cte .)
    =               reduce using rule 77 (factor -> var_cte .)
    <               reduce using rule 77 (factor -> var_cte .)
    >               reduce using rule 77 (factor -> var_cte .)
    (               reduce using rule 77 (factor -> var_cte .)
    ID              reduce using rule 77 (factor -> var_cte .)
    CTE_INTEGER     reduce using rule 77 (factor -> var_cte .)
    CTE_FLOAT       reduce using rule 77 (factor -> var_cte .)
    ]               reduce using rule 77 (factor -> var_cte .)
    RED             reduce using rule 77 (factor -> var_cte .)
    YELLOW          reduce using rule 77 (factor -> var_cte .)
    BLUE            reduce using rule 77 (factor -> var_cte .)
    GREEN           reduce using rule 77 (factor -> var_cte .)
    BLACK           reduce using rule 77 (factor -> var_cte .)
    ORANGE          reduce using rule 77 (factor -> var_cte .)
    PURPLE          reduce using rule 77 (factor -> var_cte .)
    CYAN            reduce using rule 77 (factor -> var_cte .)


state 37

    (97) var_cte -> CTE_INTEGER .

    *               reduce using rule 97 (var_cte -> CTE_INTEGER .)
    /               reduce using rule 97 (var_cte -> CTE_INTEGER .)
    +               reduce using rule 97 (var_cte -> CTE_INTEGER .)
    -               reduce using rule 97 (var_cte -> CTE_INTEGER .)
    CTE_INTEGER     reduce using rule 97 (var_cte -> CTE_INTEGER .)
    =               reduce using rule 97 (var_cte -> CTE_INTEGER .)
    <               reduce using rule 97 (var_cte -> CTE_INTEGER .)
    >               reduce using rule 97 (var_cte -> CTE_INTEGER .)
    ;               reduce using rule 97 (var_cte -> CTE_INTEGER .)
    (               reduce using rule 97 (var_cte -> CTE_INTEGER .)
    ID              reduce using rule 97 (var_cte -> CTE_INTEGER .)
    CTE_FLOAT       reduce using rule 97 (var_cte -> CTE_INTEGER .)
    )               reduce using rule 97 (var_cte -> CTE_INTEGER .)
    RED             reduce using rule 97 (var_cte -> CTE_INTEGER .)
    YELLOW          reduce using rule 97 (var_cte -> CTE_INTEGER .)
    BLUE            reduce using rule 97 (var_cte -> CTE_INTEGER .)
    GREEN           reduce using rule 97 (var_cte -> CTE_INTEGER .)
    BLACK           reduce using rule 97 (var_cte -> CTE_INTEGER .)
    ORANGE          reduce using rule 97 (var_cte -> CTE_INTEGER .)
    PURPLE          reduce using rule 97 (var_cte -> CTE_INTEGER .)
    CYAN            reduce using rule 97 (var_cte -> CTE_INTEGER .)
    ,               reduce using rule 97 (var_cte -> CTE_INTEGER .)
    ]               reduce using rule 97 (var_cte -> CTE_INTEGER .)


state 38

    (51) command -> figure exp . exp color ;
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    var_cte                        shift and go to state 36
    exp                            shift and go to state 63
    factor                         shift and go to state 39

state 39

    (71) term -> factor . termA
    (72) termA -> . termB
    (73) termA -> . empty
    (74) termB -> . * term
    (75) termB -> . / term
    (99) empty -> .

    *               shift and go to state 64
    /               shift and go to state 65
    +               reduce using rule 99 (empty -> .)
    -               reduce using rule 99 (empty -> .)
    (               reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    CTE_INTEGER     reduce using rule 99 (empty -> .)
    CTE_FLOAT       reduce using rule 99 (empty -> .)
    =               reduce using rule 99 (empty -> .)
    <               reduce using rule 99 (empty -> .)
    >               reduce using rule 99 (empty -> .)
    ;               reduce using rule 99 (empty -> .)
    )               reduce using rule 99 (empty -> .)
    RED             reduce using rule 99 (empty -> .)
    YELLOW          reduce using rule 99 (empty -> .)
    BLUE            reduce using rule 99 (empty -> .)
    GREEN           reduce using rule 99 (empty -> .)
    BLACK           reduce using rule 99 (empty -> .)
    ORANGE          reduce using rule 99 (empty -> .)
    PURPLE          reduce using rule 99 (empty -> .)
    CYAN            reduce using rule 99 (empty -> .)
    ,               reduce using rule 99 (empty -> .)
    ]               reduce using rule 99 (empty -> .)

    empty                          shift and go to state 68
    termB                          shift and go to state 66
    termA                          shift and go to state 67

state 40

    (96) var_cte -> ID .

    *               reduce using rule 96 (var_cte -> ID .)
    /               reduce using rule 96 (var_cte -> ID .)
    +               reduce using rule 96 (var_cte -> ID .)
    -               reduce using rule 96 (var_cte -> ID .)
    CTE_INTEGER     reduce using rule 96 (var_cte -> ID .)
    =               reduce using rule 96 (var_cte -> ID .)
    <               reduce using rule 96 (var_cte -> ID .)
    >               reduce using rule 96 (var_cte -> ID .)
    ;               reduce using rule 96 (var_cte -> ID .)
    (               reduce using rule 96 (var_cte -> ID .)
    ID              reduce using rule 96 (var_cte -> ID .)
    CTE_FLOAT       reduce using rule 96 (var_cte -> ID .)
    )               reduce using rule 96 (var_cte -> ID .)
    RED             reduce using rule 96 (var_cte -> ID .)
    YELLOW          reduce using rule 96 (var_cte -> ID .)
    BLUE            reduce using rule 96 (var_cte -> ID .)
    GREEN           reduce using rule 96 (var_cte -> ID .)
    BLACK           reduce using rule 96 (var_cte -> ID .)
    ORANGE          reduce using rule 96 (var_cte -> ID .)
    PURPLE          reduce using rule 96 (var_cte -> ID .)
    CYAN            reduce using rule 96 (var_cte -> ID .)
    ,               reduce using rule 96 (var_cte -> ID .)
    ]               reduce using rule 96 (var_cte -> ID .)


state 41

    (55) repeat -> REPLAY CTE_INTEGER . [ repeatA ] ;

    [               shift and go to state 69


state 42

    (43) pipeline -> PIPE ID . pipelineA
    (44) pipelineA -> . [ pipelineB ] ;
    (45) pipelineA -> . IN ( var_cte ) ;
    (46) pipelineA -> . OUT ( ) ;
    (47) pipelineA -> . COUNT ;

    [               shift and go to state 73
    IN              shift and go to state 71
    OUT             shift and go to state 74
    COUNT           shift and go to state 70

    pipelineA                      shift and go to state 72

state 43

    (42) write -> " CTE_STRING . " ;

    "               shift and go to state 75


state 44

    (41) write -> ECHO expression . ;

    ;               shift and go to state 76


state 45

    (59) expression -> exp . = = exp
    (60) expression -> exp . < > exp
    (61) expression -> exp . < = exp
    (62) expression -> exp . > = exp
    (63) expression -> exp . > exp
    (64) expression -> exp . < exp
    (65) expression -> exp .

    =               shift and go to state 77
    <               shift and go to state 78
    >               shift and go to state 79
    ;               reduce using rule 65 (expression -> exp .)
    )               reduce using rule 65 (expression -> exp .)
    ,               reduce using rule 65 (expression -> exp .)


state 46

    (52) command -> SAMPLE commandA .

    SAMPLE          reduce using rule 52 (command -> SAMPLE commandA .)
    OVAL            reduce using rule 52 (command -> SAMPLE commandA .)
    TRIO            reduce using rule 52 (command -> SAMPLE commandA .)
    QUAD            reduce using rule 52 (command -> SAMPLE commandA .)
    ARC             reduce using rule 52 (command -> SAMPLE commandA .)
    ]               reduce using rule 52 (command -> SAMPLE commandA .)
    MOD             reduce using rule 52 (command -> SAMPLE commandA .)
    ID              reduce using rule 52 (command -> SAMPLE commandA .)
    IF              reduce using rule 52 (command -> SAMPLE commandA .)
    ECHO            reduce using rule 52 (command -> SAMPLE commandA .)
    "               reduce using rule 52 (command -> SAMPLE commandA .)
    REPLAY          reduce using rule 52 (command -> SAMPLE commandA .)
    _               reduce using rule 52 (command -> SAMPLE commandA .)
    PIPE            reduce using rule 52 (command -> SAMPLE commandA .)
    WHERE           reduce using rule 52 (command -> SAMPLE commandA .)
    CLEAR           reduce using rule 52 (command -> SAMPLE commandA .)
    END             reduce using rule 52 (command -> SAMPLE commandA .)
    }               reduce using rule 52 (command -> SAMPLE commandA .)


state 47

    (54) commandA -> OFF . move exp ;
    (82) move -> . UP
    (83) move -> . DOWN
    (84) move -> . LEFT
    (85) move -> . RIGHT

    UP              shift and go to state 82
    DOWN            shift and go to state 83
    LEFT            shift and go to state 84
    RIGHT           shift and go to state 80

    move                           shift and go to state 81

state 48

    (53) commandA -> ON . move exp CTE_INTEGER color ;
    (82) move -> . UP
    (83) move -> . DOWN
    (84) move -> . LEFT
    (85) move -> . RIGHT

    UP              shift and go to state 82
    DOWN            shift and go to state 83
    LEFT            shift and go to state 84
    RIGHT           shift and go to state 80

    move                           shift and go to state 85

state 49

    (2) programA -> programB END .

    $end            reduce using rule 2 (programA -> programB END .)


state 50

    (37) assign -> ID = . expression ;
    (59) expression -> . exp = = exp
    (60) expression -> . exp < > exp
    (61) expression -> . exp < = exp
    (62) expression -> . exp > = exp
    (63) expression -> . exp > exp
    (64) expression -> . exp < exp
    (65) expression -> . exp
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    exp                            shift and go to state 45
    var_cte                        shift and go to state 36
    factor                         shift and go to state 39
    expression                     shift and go to state 86

state 51

    (25) calling -> _ ID . ( callingA

    (               shift and go to state 87


state 52

    (38) condition -> IF ( . expression ) block conditionA
    (59) expression -> . exp = = exp
    (60) expression -> . exp < > exp
    (61) expression -> . exp < = exp
    (62) expression -> . exp > = exp
    (63) expression -> . exp > exp
    (64) expression -> . exp < exp
    (65) expression -> . exp
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    var_cte                        shift and go to state 36
    exp                            shift and go to state 45
    factor                         shift and go to state 39
    expression                     shift and go to state 88

state 53

    (6) programC -> empty .

    END             reduce using rule 6 (programC -> empty .)


state 54

    (5) programC -> programB .

    END             reduce using rule 5 (programC -> programB .)


state 55

    (4) programB -> workspace programC .

    END             reduce using rule 4 (programB -> workspace programC .)


state 56

    (17) module -> MOD _ . ID moduleA

    ID              shift and go to state 89


state 57

    (69) expB -> + . exp
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    exp                            shift and go to state 90
    var_cte                        shift and go to state 36
    factor                         shift and go to state 39

state 58

    (70) expB -> - . exp
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    exp                            shift and go to state 91
    var_cte                        shift and go to state 36
    factor                         shift and go to state 39

state 59

    (67) expA -> expB .

    (               reduce using rule 67 (expA -> expB .)
    ID              reduce using rule 67 (expA -> expB .)
    CTE_INTEGER     reduce using rule 67 (expA -> expB .)
    CTE_FLOAT       reduce using rule 67 (expA -> expB .)
    =               reduce using rule 67 (expA -> expB .)
    <               reduce using rule 67 (expA -> expB .)
    >               reduce using rule 67 (expA -> expB .)
    ;               reduce using rule 67 (expA -> expB .)
    )               reduce using rule 67 (expA -> expB .)
    RED             reduce using rule 67 (expA -> expB .)
    YELLOW          reduce using rule 67 (expA -> expB .)
    BLUE            reduce using rule 67 (expA -> expB .)
    GREEN           reduce using rule 67 (expA -> expB .)
    BLACK           reduce using rule 67 (expA -> expB .)
    ORANGE          reduce using rule 67 (expA -> expB .)
    PURPLE          reduce using rule 67 (expA -> expB .)
    CYAN            reduce using rule 67 (expA -> expB .)
    ,               reduce using rule 67 (expA -> expB .)
    ]               reduce using rule 67 (expA -> expB .)


state 60

    (66) exp -> term expA .

    =               reduce using rule 66 (exp -> term expA .)
    <               reduce using rule 66 (exp -> term expA .)
    >               reduce using rule 66 (exp -> term expA .)
    ;               reduce using rule 66 (exp -> term expA .)
    (               reduce using rule 66 (exp -> term expA .)
    ID              reduce using rule 66 (exp -> term expA .)
    CTE_INTEGER     reduce using rule 66 (exp -> term expA .)
    CTE_FLOAT       reduce using rule 66 (exp -> term expA .)
    ,               reduce using rule 66 (exp -> term expA .)
    ]               reduce using rule 66 (exp -> term expA .)
    )               reduce using rule 66 (exp -> term expA .)
    RED             reduce using rule 66 (exp -> term expA .)
    YELLOW          reduce using rule 66 (exp -> term expA .)
    BLUE            reduce using rule 66 (exp -> term expA .)
    GREEN           reduce using rule 66 (exp -> term expA .)
    BLACK           reduce using rule 66 (exp -> term expA .)
    ORANGE          reduce using rule 66 (exp -> term expA .)
    PURPLE          reduce using rule 66 (exp -> term expA .)
    CYAN            reduce using rule 66 (exp -> term expA .)


state 61

    (68) expA -> empty .

    (               reduce using rule 68 (expA -> empty .)
    ID              reduce using rule 68 (expA -> empty .)
    CTE_INTEGER     reduce using rule 68 (expA -> empty .)
    CTE_FLOAT       reduce using rule 68 (expA -> empty .)
    =               reduce using rule 68 (expA -> empty .)
    <               reduce using rule 68 (expA -> empty .)
    >               reduce using rule 68 (expA -> empty .)
    ;               reduce using rule 68 (expA -> empty .)
    )               reduce using rule 68 (expA -> empty .)
    RED             reduce using rule 68 (expA -> empty .)
    YELLOW          reduce using rule 68 (expA -> empty .)
    BLUE            reduce using rule 68 (expA -> empty .)
    GREEN           reduce using rule 68 (expA -> empty .)
    BLACK           reduce using rule 68 (expA -> empty .)
    ORANGE          reduce using rule 68 (expA -> empty .)
    PURPLE          reduce using rule 68 (expA -> empty .)
    CYAN            reduce using rule 68 (expA -> empty .)
    ,               reduce using rule 68 (expA -> empty .)
    ]               reduce using rule 68 (expA -> empty .)


state 62

    (76) factor -> ( expression . )

    )               shift and go to state 92


state 63

    (51) command -> figure exp exp . color ;
    (86) color -> . RED
    (87) color -> . YELLOW
    (88) color -> . BLUE
    (89) color -> . GREEN
    (90) color -> . BLACK
    (91) color -> . ORANGE
    (92) color -> . PURPLE
    (93) color -> . CYAN

    RED             shift and go to state 101
    YELLOW          shift and go to state 95
    BLUE            shift and go to state 93
    GREEN           shift and go to state 97
    BLACK           shift and go to state 100
    ORANGE          shift and go to state 99
    PURPLE          shift and go to state 96
    CYAN            shift and go to state 98

    color                          shift and go to state 94

state 64

    (74) termB -> * . term
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 102
    var_cte                        shift and go to state 36
    factor                         shift and go to state 39

state 65

    (75) termB -> / . term
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 103
    var_cte                        shift and go to state 36
    factor                         shift and go to state 39

state 66

    (72) termA -> termB .

    +               reduce using rule 72 (termA -> termB .)
    -               reduce using rule 72 (termA -> termB .)
    (               reduce using rule 72 (termA -> termB .)
    ID              reduce using rule 72 (termA -> termB .)
    CTE_INTEGER     reduce using rule 72 (termA -> termB .)
    CTE_FLOAT       reduce using rule 72 (termA -> termB .)
    =               reduce using rule 72 (termA -> termB .)
    <               reduce using rule 72 (termA -> termB .)
    >               reduce using rule 72 (termA -> termB .)
    ;               reduce using rule 72 (termA -> termB .)
    )               reduce using rule 72 (termA -> termB .)
    RED             reduce using rule 72 (termA -> termB .)
    YELLOW          reduce using rule 72 (termA -> termB .)
    BLUE            reduce using rule 72 (termA -> termB .)
    GREEN           reduce using rule 72 (termA -> termB .)
    BLACK           reduce using rule 72 (termA -> termB .)
    ORANGE          reduce using rule 72 (termA -> termB .)
    PURPLE          reduce using rule 72 (termA -> termB .)
    CYAN            reduce using rule 72 (termA -> termB .)
    ,               reduce using rule 72 (termA -> termB .)
    ]               reduce using rule 72 (termA -> termB .)


state 67

    (71) term -> factor termA .

    +               reduce using rule 71 (term -> factor termA .)
    -               reduce using rule 71 (term -> factor termA .)
    (               reduce using rule 71 (term -> factor termA .)
    ID              reduce using rule 71 (term -> factor termA .)
    CTE_INTEGER     reduce using rule 71 (term -> factor termA .)
    CTE_FLOAT       reduce using rule 71 (term -> factor termA .)
    =               reduce using rule 71 (term -> factor termA .)
    <               reduce using rule 71 (term -> factor termA .)
    >               reduce using rule 71 (term -> factor termA .)
    ;               reduce using rule 71 (term -> factor termA .)
    )               reduce using rule 71 (term -> factor termA .)
    RED             reduce using rule 71 (term -> factor termA .)
    YELLOW          reduce using rule 71 (term -> factor termA .)
    BLUE            reduce using rule 71 (term -> factor termA .)
    GREEN           reduce using rule 71 (term -> factor termA .)
    BLACK           reduce using rule 71 (term -> factor termA .)
    ORANGE          reduce using rule 71 (term -> factor termA .)
    PURPLE          reduce using rule 71 (term -> factor termA .)
    CYAN            reduce using rule 71 (term -> factor termA .)
    ,               reduce using rule 71 (term -> factor termA .)
    ]               reduce using rule 71 (term -> factor termA .)


state 68

    (73) termA -> empty .

    +               reduce using rule 73 (termA -> empty .)
    -               reduce using rule 73 (termA -> empty .)
    (               reduce using rule 73 (termA -> empty .)
    ID              reduce using rule 73 (termA -> empty .)
    CTE_INTEGER     reduce using rule 73 (termA -> empty .)
    CTE_FLOAT       reduce using rule 73 (termA -> empty .)
    =               reduce using rule 73 (termA -> empty .)
    <               reduce using rule 73 (termA -> empty .)
    >               reduce using rule 73 (termA -> empty .)
    ;               reduce using rule 73 (termA -> empty .)
    )               reduce using rule 73 (termA -> empty .)
    RED             reduce using rule 73 (termA -> empty .)
    YELLOW          reduce using rule 73 (termA -> empty .)
    BLUE            reduce using rule 73 (termA -> empty .)
    GREEN           reduce using rule 73 (termA -> empty .)
    BLACK           reduce using rule 73 (termA -> empty .)
    ORANGE          reduce using rule 73 (termA -> empty .)
    PURPLE          reduce using rule 73 (termA -> empty .)
    CYAN            reduce using rule 73 (termA -> empty .)
    ,               reduce using rule 73 (termA -> empty .)
    ]               reduce using rule 73 (termA -> empty .)


state 69

    (55) repeat -> REPLAY CTE_INTEGER [ . repeatA ] ;
    (56) repeatA -> . command repeatB
    (51) command -> . figure exp exp color ;
    (52) command -> . SAMPLE commandA
    (78) figure -> . OVAL
    (79) figure -> . TRIO
    (80) figure -> . QUAD
    (81) figure -> . ARC

    SAMPLE          shift and go to state 17
    OVAL            shift and go to state 7
    TRIO            shift and go to state 12
    QUAD            shift and go to state 20
    ARC             shift and go to state 28

    figure                         shift and go to state 3
    repeatA                        shift and go to state 104
    command                        shift and go to state 105

state 70

    (47) pipelineA -> COUNT . ;

    ;               shift and go to state 106


state 71

    (45) pipelineA -> IN . ( var_cte ) ;

    (               shift and go to state 107


state 72

    (43) pipeline -> PIPE ID pipelineA .

    MOD             reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    ID              reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    IF              reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    ECHO            reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    "               reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    REPLAY          reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    SAMPLE          reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    _               reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    PIPE            reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    WHERE           reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    CLEAR           reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    OVAL            reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    TRIO            reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    QUAD            reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    ARC             reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    END             reduce using rule 43 (pipeline -> PIPE ID pipelineA .)
    }               reduce using rule 43 (pipeline -> PIPE ID pipelineA .)


state 73

    (44) pipelineA -> [ . pipelineB ] ;
    (48) pipelineB -> . exp pipelineC
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    var_cte                        shift and go to state 36
    pipelineB                      shift and go to state 108
    exp                            shift and go to state 109
    factor                         shift and go to state 39

state 74

    (46) pipelineA -> OUT . ( ) ;

    (               shift and go to state 110


state 75

    (42) write -> " CTE_STRING " . ;

    ;               shift and go to state 111


state 76

    (41) write -> ECHO expression ; .

    MOD             reduce using rule 41 (write -> ECHO expression ; .)
    ID              reduce using rule 41 (write -> ECHO expression ; .)
    IF              reduce using rule 41 (write -> ECHO expression ; .)
    ECHO            reduce using rule 41 (write -> ECHO expression ; .)
    "               reduce using rule 41 (write -> ECHO expression ; .)
    REPLAY          reduce using rule 41 (write -> ECHO expression ; .)
    SAMPLE          reduce using rule 41 (write -> ECHO expression ; .)
    _               reduce using rule 41 (write -> ECHO expression ; .)
    PIPE            reduce using rule 41 (write -> ECHO expression ; .)
    WHERE           reduce using rule 41 (write -> ECHO expression ; .)
    CLEAR           reduce using rule 41 (write -> ECHO expression ; .)
    OVAL            reduce using rule 41 (write -> ECHO expression ; .)
    TRIO            reduce using rule 41 (write -> ECHO expression ; .)
    QUAD            reduce using rule 41 (write -> ECHO expression ; .)
    ARC             reduce using rule 41 (write -> ECHO expression ; .)
    END             reduce using rule 41 (write -> ECHO expression ; .)
    }               reduce using rule 41 (write -> ECHO expression ; .)


state 77

    (59) expression -> exp = . = exp

    =               shift and go to state 112


state 78

    (60) expression -> exp < . > exp
    (61) expression -> exp < . = exp
    (64) expression -> exp < . exp
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    >               shift and go to state 115
    =               shift and go to state 114
    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    exp                            shift and go to state 113
    var_cte                        shift and go to state 36
    factor                         shift and go to state 39

state 79

    (62) expression -> exp > . = exp
    (63) expression -> exp > . exp
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    =               shift and go to state 117
    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    exp                            shift and go to state 116
    var_cte                        shift and go to state 36
    factor                         shift and go to state 39

state 80

    (85) move -> RIGHT .

    (               reduce using rule 85 (move -> RIGHT .)
    ID              reduce using rule 85 (move -> RIGHT .)
    CTE_INTEGER     reduce using rule 85 (move -> RIGHT .)
    CTE_FLOAT       reduce using rule 85 (move -> RIGHT .)


state 81

    (54) commandA -> OFF move . exp ;
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    exp                            shift and go to state 118
    var_cte                        shift and go to state 36
    factor                         shift and go to state 39

state 82

    (82) move -> UP .

    (               reduce using rule 82 (move -> UP .)
    ID              reduce using rule 82 (move -> UP .)
    CTE_INTEGER     reduce using rule 82 (move -> UP .)
    CTE_FLOAT       reduce using rule 82 (move -> UP .)


state 83

    (83) move -> DOWN .

    (               reduce using rule 83 (move -> DOWN .)
    ID              reduce using rule 83 (move -> DOWN .)
    CTE_INTEGER     reduce using rule 83 (move -> DOWN .)
    CTE_FLOAT       reduce using rule 83 (move -> DOWN .)


state 84

    (84) move -> LEFT .

    (               reduce using rule 84 (move -> LEFT .)
    ID              reduce using rule 84 (move -> LEFT .)
    CTE_INTEGER     reduce using rule 84 (move -> LEFT .)
    CTE_FLOAT       reduce using rule 84 (move -> LEFT .)


state 85

    (53) commandA -> ON move . exp CTE_INTEGER color ;
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    var_cte                        shift and go to state 36
    exp                            shift and go to state 119
    factor                         shift and go to state 39

state 86

    (37) assign -> ID = expression . ;

    ;               shift and go to state 120


state 87

    (25) calling -> _ ID ( . callingA
    (26) callingA -> . callingB ) ;
    (27) callingA -> . ) ;
    (28) callingB -> . expression callingC
    (59) expression -> . exp = = exp
    (60) expression -> . exp < > exp
    (61) expression -> . exp < = exp
    (62) expression -> . exp > = exp
    (63) expression -> . exp > exp
    (64) expression -> . exp < exp
    (65) expression -> . exp
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    )               shift and go to state 121
    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    var_cte                        shift and go to state 36
    callingA                       shift and go to state 122
    callingB                       shift and go to state 123
    exp                            shift and go to state 45
    factor                         shift and go to state 39
    expression                     shift and go to state 124

state 88

    (38) condition -> IF ( expression . ) block conditionA

    )               shift and go to state 125


state 89

    (17) module -> MOD _ ID . moduleA
    (18) moduleA -> . ( vars ) block
    (19) moduleA -> . block
    (31) block -> . { blockA

    (               shift and go to state 127
    {               shift and go to state 128

    block                          shift and go to state 126
    moduleA                        shift and go to state 129

state 90

    (69) expB -> + exp .

    (               reduce using rule 69 (expB -> + exp .)
    ID              reduce using rule 69 (expB -> + exp .)
    CTE_INTEGER     reduce using rule 69 (expB -> + exp .)
    CTE_FLOAT       reduce using rule 69 (expB -> + exp .)
    =               reduce using rule 69 (expB -> + exp .)
    <               reduce using rule 69 (expB -> + exp .)
    >               reduce using rule 69 (expB -> + exp .)
    ;               reduce using rule 69 (expB -> + exp .)
    )               reduce using rule 69 (expB -> + exp .)
    RED             reduce using rule 69 (expB -> + exp .)
    YELLOW          reduce using rule 69 (expB -> + exp .)
    BLUE            reduce using rule 69 (expB -> + exp .)
    GREEN           reduce using rule 69 (expB -> + exp .)
    BLACK           reduce using rule 69 (expB -> + exp .)
    ORANGE          reduce using rule 69 (expB -> + exp .)
    PURPLE          reduce using rule 69 (expB -> + exp .)
    CYAN            reduce using rule 69 (expB -> + exp .)
    ,               reduce using rule 69 (expB -> + exp .)
    ]               reduce using rule 69 (expB -> + exp .)


state 91

    (70) expB -> - exp .

    (               reduce using rule 70 (expB -> - exp .)
    ID              reduce using rule 70 (expB -> - exp .)
    CTE_INTEGER     reduce using rule 70 (expB -> - exp .)
    CTE_FLOAT       reduce using rule 70 (expB -> - exp .)
    =               reduce using rule 70 (expB -> - exp .)
    <               reduce using rule 70 (expB -> - exp .)
    >               reduce using rule 70 (expB -> - exp .)
    ;               reduce using rule 70 (expB -> - exp .)
    )               reduce using rule 70 (expB -> - exp .)
    RED             reduce using rule 70 (expB -> - exp .)
    YELLOW          reduce using rule 70 (expB -> - exp .)
    BLUE            reduce using rule 70 (expB -> - exp .)
    GREEN           reduce using rule 70 (expB -> - exp .)
    BLACK           reduce using rule 70 (expB -> - exp .)
    ORANGE          reduce using rule 70 (expB -> - exp .)
    PURPLE          reduce using rule 70 (expB -> - exp .)
    CYAN            reduce using rule 70 (expB -> - exp .)
    ,               reduce using rule 70 (expB -> - exp .)
    ]               reduce using rule 70 (expB -> - exp .)


state 92

    (76) factor -> ( expression ) .

    *               reduce using rule 76 (factor -> ( expression ) .)
    /               reduce using rule 76 (factor -> ( expression ) .)
    +               reduce using rule 76 (factor -> ( expression ) .)
    -               reduce using rule 76 (factor -> ( expression ) .)
    ;               reduce using rule 76 (factor -> ( expression ) .)
    )               reduce using rule 76 (factor -> ( expression ) .)
    ,               reduce using rule 76 (factor -> ( expression ) .)
    =               reduce using rule 76 (factor -> ( expression ) .)
    <               reduce using rule 76 (factor -> ( expression ) .)
    >               reduce using rule 76 (factor -> ( expression ) .)
    (               reduce using rule 76 (factor -> ( expression ) .)
    ID              reduce using rule 76 (factor -> ( expression ) .)
    CTE_INTEGER     reduce using rule 76 (factor -> ( expression ) .)
    CTE_FLOAT       reduce using rule 76 (factor -> ( expression ) .)
    ]               reduce using rule 76 (factor -> ( expression ) .)
    RED             reduce using rule 76 (factor -> ( expression ) .)
    YELLOW          reduce using rule 76 (factor -> ( expression ) .)
    BLUE            reduce using rule 76 (factor -> ( expression ) .)
    GREEN           reduce using rule 76 (factor -> ( expression ) .)
    BLACK           reduce using rule 76 (factor -> ( expression ) .)
    ORANGE          reduce using rule 76 (factor -> ( expression ) .)
    PURPLE          reduce using rule 76 (factor -> ( expression ) .)
    CYAN            reduce using rule 76 (factor -> ( expression ) .)


state 93

    (88) color -> BLUE .

    ;               reduce using rule 88 (color -> BLUE .)


state 94

    (51) command -> figure exp exp color . ;

    ;               shift and go to state 130


state 95

    (87) color -> YELLOW .

    ;               reduce using rule 87 (color -> YELLOW .)


state 96

    (92) color -> PURPLE .

    ;               reduce using rule 92 (color -> PURPLE .)


state 97

    (89) color -> GREEN .

    ;               reduce using rule 89 (color -> GREEN .)


state 98

    (93) color -> CYAN .

    ;               reduce using rule 93 (color -> CYAN .)


state 99

    (91) color -> ORANGE .

    ;               reduce using rule 91 (color -> ORANGE .)


state 100

    (90) color -> BLACK .

    ;               reduce using rule 90 (color -> BLACK .)


state 101

    (86) color -> RED .

    ;               reduce using rule 86 (color -> RED .)


state 102

    (74) termB -> * term .

    +               reduce using rule 74 (termB -> * term .)
    -               reduce using rule 74 (termB -> * term .)
    (               reduce using rule 74 (termB -> * term .)
    ID              reduce using rule 74 (termB -> * term .)
    CTE_INTEGER     reduce using rule 74 (termB -> * term .)
    CTE_FLOAT       reduce using rule 74 (termB -> * term .)
    =               reduce using rule 74 (termB -> * term .)
    <               reduce using rule 74 (termB -> * term .)
    >               reduce using rule 74 (termB -> * term .)
    ;               reduce using rule 74 (termB -> * term .)
    )               reduce using rule 74 (termB -> * term .)
    RED             reduce using rule 74 (termB -> * term .)
    YELLOW          reduce using rule 74 (termB -> * term .)
    BLUE            reduce using rule 74 (termB -> * term .)
    GREEN           reduce using rule 74 (termB -> * term .)
    BLACK           reduce using rule 74 (termB -> * term .)
    ORANGE          reduce using rule 74 (termB -> * term .)
    PURPLE          reduce using rule 74 (termB -> * term .)
    CYAN            reduce using rule 74 (termB -> * term .)
    ,               reduce using rule 74 (termB -> * term .)
    ]               reduce using rule 74 (termB -> * term .)


state 103

    (75) termB -> / term .

    +               reduce using rule 75 (termB -> / term .)
    -               reduce using rule 75 (termB -> / term .)
    (               reduce using rule 75 (termB -> / term .)
    ID              reduce using rule 75 (termB -> / term .)
    CTE_INTEGER     reduce using rule 75 (termB -> / term .)
    CTE_FLOAT       reduce using rule 75 (termB -> / term .)
    =               reduce using rule 75 (termB -> / term .)
    <               reduce using rule 75 (termB -> / term .)
    >               reduce using rule 75 (termB -> / term .)
    ;               reduce using rule 75 (termB -> / term .)
    )               reduce using rule 75 (termB -> / term .)
    RED             reduce using rule 75 (termB -> / term .)
    YELLOW          reduce using rule 75 (termB -> / term .)
    BLUE            reduce using rule 75 (termB -> / term .)
    GREEN           reduce using rule 75 (termB -> / term .)
    BLACK           reduce using rule 75 (termB -> / term .)
    ORANGE          reduce using rule 75 (termB -> / term .)
    PURPLE          reduce using rule 75 (termB -> / term .)
    CYAN            reduce using rule 75 (termB -> / term .)
    ,               reduce using rule 75 (termB -> / term .)
    ]               reduce using rule 75 (termB -> / term .)


state 104

    (55) repeat -> REPLAY CTE_INTEGER [ repeatA . ] ;

    ]               shift and go to state 131


state 105

    (56) repeatA -> command . repeatB
    (57) repeatB -> . repeatA
    (58) repeatB -> . empty
    (56) repeatA -> . command repeatB
    (99) empty -> .
    (51) command -> . figure exp exp color ;
    (52) command -> . SAMPLE commandA
    (78) figure -> . OVAL
    (79) figure -> . TRIO
    (80) figure -> . QUAD
    (81) figure -> . ARC

    ]               reduce using rule 99 (empty -> .)
    SAMPLE          shift and go to state 17
    OVAL            shift and go to state 7
    TRIO            shift and go to state 12
    QUAD            shift and go to state 20
    ARC             shift and go to state 28

    figure                         shift and go to state 3
    repeatA                        shift and go to state 132
    repeatB                        shift and go to state 133
    command                        shift and go to state 105
    empty                          shift and go to state 134

state 106

    (47) pipelineA -> COUNT ; .

    MOD             reduce using rule 47 (pipelineA -> COUNT ; .)
    ID              reduce using rule 47 (pipelineA -> COUNT ; .)
    IF              reduce using rule 47 (pipelineA -> COUNT ; .)
    ECHO            reduce using rule 47 (pipelineA -> COUNT ; .)
    "               reduce using rule 47 (pipelineA -> COUNT ; .)
    REPLAY          reduce using rule 47 (pipelineA -> COUNT ; .)
    SAMPLE          reduce using rule 47 (pipelineA -> COUNT ; .)
    _               reduce using rule 47 (pipelineA -> COUNT ; .)
    PIPE            reduce using rule 47 (pipelineA -> COUNT ; .)
    WHERE           reduce using rule 47 (pipelineA -> COUNT ; .)
    CLEAR           reduce using rule 47 (pipelineA -> COUNT ; .)
    OVAL            reduce using rule 47 (pipelineA -> COUNT ; .)
    TRIO            reduce using rule 47 (pipelineA -> COUNT ; .)
    QUAD            reduce using rule 47 (pipelineA -> COUNT ; .)
    ARC             reduce using rule 47 (pipelineA -> COUNT ; .)
    END             reduce using rule 47 (pipelineA -> COUNT ; .)
    }               reduce using rule 47 (pipelineA -> COUNT ; .)


state 107

    (45) pipelineA -> IN ( . var_cte ) ;
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    var_cte                        shift and go to state 135

state 108

    (44) pipelineA -> [ pipelineB . ] ;

    ]               shift and go to state 136


state 109

    (48) pipelineB -> exp . pipelineC
    (49) pipelineC -> . , pipelineB
    (50) pipelineC -> . empty
    (99) empty -> .

    ,               shift and go to state 139
    ]               reduce using rule 99 (empty -> .)

    empty                          shift and go to state 137
    pipelineC                      shift and go to state 138

state 110

    (46) pipelineA -> OUT ( . ) ;

    )               shift and go to state 140


state 111

    (42) write -> " CTE_STRING " ; .

    MOD             reduce using rule 42 (write -> " CTE_STRING " ; .)
    ID              reduce using rule 42 (write -> " CTE_STRING " ; .)
    IF              reduce using rule 42 (write -> " CTE_STRING " ; .)
    ECHO            reduce using rule 42 (write -> " CTE_STRING " ; .)
    "               reduce using rule 42 (write -> " CTE_STRING " ; .)
    REPLAY          reduce using rule 42 (write -> " CTE_STRING " ; .)
    SAMPLE          reduce using rule 42 (write -> " CTE_STRING " ; .)
    _               reduce using rule 42 (write -> " CTE_STRING " ; .)
    PIPE            reduce using rule 42 (write -> " CTE_STRING " ; .)
    WHERE           reduce using rule 42 (write -> " CTE_STRING " ; .)
    CLEAR           reduce using rule 42 (write -> " CTE_STRING " ; .)
    OVAL            reduce using rule 42 (write -> " CTE_STRING " ; .)
    TRIO            reduce using rule 42 (write -> " CTE_STRING " ; .)
    QUAD            reduce using rule 42 (write -> " CTE_STRING " ; .)
    ARC             reduce using rule 42 (write -> " CTE_STRING " ; .)
    END             reduce using rule 42 (write -> " CTE_STRING " ; .)
    }               reduce using rule 42 (write -> " CTE_STRING " ; .)


state 112

    (59) expression -> exp = = . exp
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    exp                            shift and go to state 141
    var_cte                        shift and go to state 36
    factor                         shift and go to state 39

state 113

    (64) expression -> exp < exp .

    ;               reduce using rule 64 (expression -> exp < exp .)
    )               reduce using rule 64 (expression -> exp < exp .)
    ,               reduce using rule 64 (expression -> exp < exp .)


state 114

    (61) expression -> exp < = . exp
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    exp                            shift and go to state 142
    var_cte                        shift and go to state 36
    factor                         shift and go to state 39

state 115

    (60) expression -> exp < > . exp
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    exp                            shift and go to state 143
    var_cte                        shift and go to state 36
    factor                         shift and go to state 39

state 116

    (63) expression -> exp > exp .

    ;               reduce using rule 63 (expression -> exp > exp .)
    )               reduce using rule 63 (expression -> exp > exp .)
    ,               reduce using rule 63 (expression -> exp > exp .)


state 117

    (62) expression -> exp > = . exp
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    exp                            shift and go to state 144
    var_cte                        shift and go to state 36
    factor                         shift and go to state 39

state 118

    (54) commandA -> OFF move exp . ;

    ;               shift and go to state 145


state 119

    (53) commandA -> ON move exp . CTE_INTEGER color ;

    CTE_INTEGER     shift and go to state 146


state 120

    (37) assign -> ID = expression ; .

    ID              reduce using rule 37 (assign -> ID = expression ; .)
    IF              reduce using rule 37 (assign -> ID = expression ; .)
    ECHO            reduce using rule 37 (assign -> ID = expression ; .)
    "               reduce using rule 37 (assign -> ID = expression ; .)
    REPLAY          reduce using rule 37 (assign -> ID = expression ; .)
    SAMPLE          reduce using rule 37 (assign -> ID = expression ; .)
    _               reduce using rule 37 (assign -> ID = expression ; .)
    PIPE            reduce using rule 37 (assign -> ID = expression ; .)
    WHERE           reduce using rule 37 (assign -> ID = expression ; .)
    CLEAR           reduce using rule 37 (assign -> ID = expression ; .)
    OVAL            reduce using rule 37 (assign -> ID = expression ; .)
    TRIO            reduce using rule 37 (assign -> ID = expression ; .)
    QUAD            reduce using rule 37 (assign -> ID = expression ; .)
    ARC             reduce using rule 37 (assign -> ID = expression ; .)
    }               reduce using rule 37 (assign -> ID = expression ; .)
    MOD             reduce using rule 37 (assign -> ID = expression ; .)
    END             reduce using rule 37 (assign -> ID = expression ; .)


state 121

    (27) callingA -> ) . ;

    ;               shift and go to state 147


state 122

    (25) calling -> _ ID ( callingA .

    ID              reduce using rule 25 (calling -> _ ID ( callingA .)
    IF              reduce using rule 25 (calling -> _ ID ( callingA .)
    ECHO            reduce using rule 25 (calling -> _ ID ( callingA .)
    "               reduce using rule 25 (calling -> _ ID ( callingA .)
    REPLAY          reduce using rule 25 (calling -> _ ID ( callingA .)
    SAMPLE          reduce using rule 25 (calling -> _ ID ( callingA .)
    _               reduce using rule 25 (calling -> _ ID ( callingA .)
    PIPE            reduce using rule 25 (calling -> _ ID ( callingA .)
    WHERE           reduce using rule 25 (calling -> _ ID ( callingA .)
    CLEAR           reduce using rule 25 (calling -> _ ID ( callingA .)
    OVAL            reduce using rule 25 (calling -> _ ID ( callingA .)
    TRIO            reduce using rule 25 (calling -> _ ID ( callingA .)
    QUAD            reduce using rule 25 (calling -> _ ID ( callingA .)
    ARC             reduce using rule 25 (calling -> _ ID ( callingA .)
    }               reduce using rule 25 (calling -> _ ID ( callingA .)
    MOD             reduce using rule 25 (calling -> _ ID ( callingA .)
    END             reduce using rule 25 (calling -> _ ID ( callingA .)


state 123

    (26) callingA -> callingB . ) ;

    )               shift and go to state 148


state 124

    (28) callingB -> expression . callingC
    (29) callingC -> . , callingB
    (30) callingC -> . empty
    (99) empty -> .

    ,               shift and go to state 150
    )               reduce using rule 99 (empty -> .)

    callingC                       shift and go to state 149
    empty                          shift and go to state 151

state 125

    (38) condition -> IF ( expression ) . block conditionA
    (31) block -> . { blockA

    {               shift and go to state 128

    block                          shift and go to state 152

state 126

    (19) moduleA -> block .

    MOD             reduce using rule 19 (moduleA -> block .)
    ID              reduce using rule 19 (moduleA -> block .)
    IF              reduce using rule 19 (moduleA -> block .)
    ECHO            reduce using rule 19 (moduleA -> block .)
    "               reduce using rule 19 (moduleA -> block .)
    REPLAY          reduce using rule 19 (moduleA -> block .)
    SAMPLE          reduce using rule 19 (moduleA -> block .)
    _               reduce using rule 19 (moduleA -> block .)
    PIPE            reduce using rule 19 (moduleA -> block .)
    WHERE           reduce using rule 19 (moduleA -> block .)
    CLEAR           reduce using rule 19 (moduleA -> block .)
    OVAL            reduce using rule 19 (moduleA -> block .)
    TRIO            reduce using rule 19 (moduleA -> block .)
    QUAD            reduce using rule 19 (moduleA -> block .)
    ARC             reduce using rule 19 (moduleA -> block .)
    END             reduce using rule 19 (moduleA -> block .)


state 127

    (18) moduleA -> ( . vars ) block
    (20) vars -> . type ID varsA
    (23) type -> . INT
    (24) type -> . FLOAT

    INT             shift and go to state 155
    FLOAT           shift and go to state 154

    type                           shift and go to state 156
    vars                           shift and go to state 153

state 128

    (31) block -> { . blockA
    (32) blockA -> . blockB }
    (33) blockA -> . }
    (34) blockB -> . statute blockC
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . repeat
    (13) statute -> . command
    (14) statute -> . calling
    (15) statute -> . pipeline
    (16) statute -> . screen
    (37) assign -> . ID = expression ;
    (38) condition -> . IF ( expression ) block conditionA
    (41) write -> . ECHO expression ;
    (42) write -> . " CTE_STRING " ;
    (55) repeat -> . REPLAY CTE_INTEGER [ repeatA ] ;
    (51) command -> . figure exp exp color ;
    (52) command -> . SAMPLE commandA
    (25) calling -> . _ ID ( callingA
    (43) pipeline -> . PIPE ID pipelineA
    (94) screen -> . WHERE
    (95) screen -> . CLEAR
    (78) figure -> . OVAL
    (79) figure -> . TRIO
    (80) figure -> . QUAD
    (81) figure -> . ARC

    }               shift and go to state 158
    ID              shift and go to state 21
    IF              shift and go to state 23
    ECHO            shift and go to state 16
    "               shift and go to state 9
    REPLAY          shift and go to state 6
    SAMPLE          shift and go to state 17
    _               shift and go to state 22
    PIPE            shift and go to state 8
    WHERE           shift and go to state 27
    CLEAR           shift and go to state 11
    OVAL            shift and go to state 7
    TRIO            shift and go to state 12
    QUAD            shift and go to state 20
    ARC             shift and go to state 28

    figure                         shift and go to state 3
    blockA                         shift and go to state 160
    write                          shift and go to state 10
    command                        shift and go to state 29
    repeat                         shift and go to state 13
    screen                         shift and go to state 15
    condition                      shift and go to state 4
    statute                        shift and go to state 157
    pipeline                       shift and go to state 25
    calling                        shift and go to state 26
    blockB                         shift and go to state 159
    assign                         shift and go to state 31

state 129

    (17) module -> MOD _ ID moduleA .

    MOD             reduce using rule 17 (module -> MOD _ ID moduleA .)
    ID              reduce using rule 17 (module -> MOD _ ID moduleA .)
    IF              reduce using rule 17 (module -> MOD _ ID moduleA .)
    ECHO            reduce using rule 17 (module -> MOD _ ID moduleA .)
    "               reduce using rule 17 (module -> MOD _ ID moduleA .)
    REPLAY          reduce using rule 17 (module -> MOD _ ID moduleA .)
    SAMPLE          reduce using rule 17 (module -> MOD _ ID moduleA .)
    _               reduce using rule 17 (module -> MOD _ ID moduleA .)
    PIPE            reduce using rule 17 (module -> MOD _ ID moduleA .)
    WHERE           reduce using rule 17 (module -> MOD _ ID moduleA .)
    CLEAR           reduce using rule 17 (module -> MOD _ ID moduleA .)
    OVAL            reduce using rule 17 (module -> MOD _ ID moduleA .)
    TRIO            reduce using rule 17 (module -> MOD _ ID moduleA .)
    QUAD            reduce using rule 17 (module -> MOD _ ID moduleA .)
    ARC             reduce using rule 17 (module -> MOD _ ID moduleA .)
    END             reduce using rule 17 (module -> MOD _ ID moduleA .)


state 130

    (51) command -> figure exp exp color ; .

    SAMPLE          reduce using rule 51 (command -> figure exp exp color ; .)
    OVAL            reduce using rule 51 (command -> figure exp exp color ; .)
    TRIO            reduce using rule 51 (command -> figure exp exp color ; .)
    QUAD            reduce using rule 51 (command -> figure exp exp color ; .)
    ARC             reduce using rule 51 (command -> figure exp exp color ; .)
    ]               reduce using rule 51 (command -> figure exp exp color ; .)
    MOD             reduce using rule 51 (command -> figure exp exp color ; .)
    ID              reduce using rule 51 (command -> figure exp exp color ; .)
    IF              reduce using rule 51 (command -> figure exp exp color ; .)
    ECHO            reduce using rule 51 (command -> figure exp exp color ; .)
    "               reduce using rule 51 (command -> figure exp exp color ; .)
    REPLAY          reduce using rule 51 (command -> figure exp exp color ; .)
    _               reduce using rule 51 (command -> figure exp exp color ; .)
    PIPE            reduce using rule 51 (command -> figure exp exp color ; .)
    WHERE           reduce using rule 51 (command -> figure exp exp color ; .)
    CLEAR           reduce using rule 51 (command -> figure exp exp color ; .)
    END             reduce using rule 51 (command -> figure exp exp color ; .)
    }               reduce using rule 51 (command -> figure exp exp color ; .)


state 131

    (55) repeat -> REPLAY CTE_INTEGER [ repeatA ] . ;

    ;               shift and go to state 161


state 132

    (57) repeatB -> repeatA .

    ]               reduce using rule 57 (repeatB -> repeatA .)


state 133

    (56) repeatA -> command repeatB .

    ]               reduce using rule 56 (repeatA -> command repeatB .)


state 134

    (58) repeatB -> empty .

    ]               reduce using rule 58 (repeatB -> empty .)


state 135

    (45) pipelineA -> IN ( var_cte . ) ;

    )               shift and go to state 162


state 136

    (44) pipelineA -> [ pipelineB ] . ;

    ;               shift and go to state 163


state 137

    (50) pipelineC -> empty .

    ]               reduce using rule 50 (pipelineC -> empty .)


state 138

    (48) pipelineB -> exp pipelineC .

    ]               reduce using rule 48 (pipelineB -> exp pipelineC .)


state 139

    (49) pipelineC -> , . pipelineB
    (48) pipelineB -> . exp pipelineC
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    var_cte                        shift and go to state 36
    pipelineB                      shift and go to state 164
    exp                            shift and go to state 109
    factor                         shift and go to state 39

state 140

    (46) pipelineA -> OUT ( ) . ;

    ;               shift and go to state 165


state 141

    (59) expression -> exp = = exp .

    ;               reduce using rule 59 (expression -> exp = = exp .)
    )               reduce using rule 59 (expression -> exp = = exp .)
    ,               reduce using rule 59 (expression -> exp = = exp .)


state 142

    (61) expression -> exp < = exp .

    ;               reduce using rule 61 (expression -> exp < = exp .)
    )               reduce using rule 61 (expression -> exp < = exp .)
    ,               reduce using rule 61 (expression -> exp < = exp .)


state 143

    (60) expression -> exp < > exp .

    ;               reduce using rule 60 (expression -> exp < > exp .)
    )               reduce using rule 60 (expression -> exp < > exp .)
    ,               reduce using rule 60 (expression -> exp < > exp .)


state 144

    (62) expression -> exp > = exp .

    ;               reduce using rule 62 (expression -> exp > = exp .)
    )               reduce using rule 62 (expression -> exp > = exp .)
    ,               reduce using rule 62 (expression -> exp > = exp .)


state 145

    (54) commandA -> OFF move exp ; .

    MOD             reduce using rule 54 (commandA -> OFF move exp ; .)
    ID              reduce using rule 54 (commandA -> OFF move exp ; .)
    IF              reduce using rule 54 (commandA -> OFF move exp ; .)
    ECHO            reduce using rule 54 (commandA -> OFF move exp ; .)
    "               reduce using rule 54 (commandA -> OFF move exp ; .)
    REPLAY          reduce using rule 54 (commandA -> OFF move exp ; .)
    SAMPLE          reduce using rule 54 (commandA -> OFF move exp ; .)
    _               reduce using rule 54 (commandA -> OFF move exp ; .)
    PIPE            reduce using rule 54 (commandA -> OFF move exp ; .)
    WHERE           reduce using rule 54 (commandA -> OFF move exp ; .)
    CLEAR           reduce using rule 54 (commandA -> OFF move exp ; .)
    OVAL            reduce using rule 54 (commandA -> OFF move exp ; .)
    TRIO            reduce using rule 54 (commandA -> OFF move exp ; .)
    QUAD            reduce using rule 54 (commandA -> OFF move exp ; .)
    ARC             reduce using rule 54 (commandA -> OFF move exp ; .)
    END             reduce using rule 54 (commandA -> OFF move exp ; .)
    ]               reduce using rule 54 (commandA -> OFF move exp ; .)
    }               reduce using rule 54 (commandA -> OFF move exp ; .)


state 146

    (53) commandA -> ON move exp CTE_INTEGER . color ;
    (86) color -> . RED
    (87) color -> . YELLOW
    (88) color -> . BLUE
    (89) color -> . GREEN
    (90) color -> . BLACK
    (91) color -> . ORANGE
    (92) color -> . PURPLE
    (93) color -> . CYAN

    RED             shift and go to state 101
    YELLOW          shift and go to state 95
    BLUE            shift and go to state 93
    GREEN           shift and go to state 97
    BLACK           shift and go to state 100
    ORANGE          shift and go to state 99
    PURPLE          shift and go to state 96
    CYAN            shift and go to state 98

    color                          shift and go to state 166

state 147

    (27) callingA -> ) ; .

    MOD             reduce using rule 27 (callingA -> ) ; .)
    ID              reduce using rule 27 (callingA -> ) ; .)
    IF              reduce using rule 27 (callingA -> ) ; .)
    ECHO            reduce using rule 27 (callingA -> ) ; .)
    "               reduce using rule 27 (callingA -> ) ; .)
    REPLAY          reduce using rule 27 (callingA -> ) ; .)
    SAMPLE          reduce using rule 27 (callingA -> ) ; .)
    _               reduce using rule 27 (callingA -> ) ; .)
    PIPE            reduce using rule 27 (callingA -> ) ; .)
    WHERE           reduce using rule 27 (callingA -> ) ; .)
    CLEAR           reduce using rule 27 (callingA -> ) ; .)
    OVAL            reduce using rule 27 (callingA -> ) ; .)
    TRIO            reduce using rule 27 (callingA -> ) ; .)
    QUAD            reduce using rule 27 (callingA -> ) ; .)
    ARC             reduce using rule 27 (callingA -> ) ; .)
    END             reduce using rule 27 (callingA -> ) ; .)
    }               reduce using rule 27 (callingA -> ) ; .)


state 148

    (26) callingA -> callingB ) . ;

    ;               shift and go to state 167


state 149

    (28) callingB -> expression callingC .

    )               reduce using rule 28 (callingB -> expression callingC .)


state 150

    (29) callingC -> , . callingB
    (28) callingB -> . expression callingC
    (59) expression -> . exp = = exp
    (60) expression -> . exp < > exp
    (61) expression -> . exp < = exp
    (62) expression -> . exp > = exp
    (63) expression -> . exp > exp
    (64) expression -> . exp < exp
    (65) expression -> . exp
    (66) exp -> . term expA
    (71) term -> . factor termA
    (76) factor -> . ( expression )
    (77) factor -> . var_cte
    (96) var_cte -> . ID
    (97) var_cte -> . CTE_INTEGER
    (98) var_cte -> . CTE_FLOAT

    (               shift and go to state 34
    ID              shift and go to state 40
    CTE_INTEGER     shift and go to state 37
    CTE_FLOAT       shift and go to state 35

    term                           shift and go to state 33
    var_cte                        shift and go to state 36
    callingB                       shift and go to state 168
    exp                            shift and go to state 45
    factor                         shift and go to state 39
    expression                     shift and go to state 124

state 151

    (30) callingC -> empty .

    )               reduce using rule 30 (callingC -> empty .)


state 152

    (38) condition -> IF ( expression ) block . conditionA
    (39) conditionA -> . ELSE block
    (40) conditionA -> . empty
    (99) empty -> .

    ELSE            shift and go to state 170
    MOD             reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    ECHO            reduce using rule 99 (empty -> .)
    "               reduce using rule 99 (empty -> .)
    REPLAY          reduce using rule 99 (empty -> .)
    SAMPLE          reduce using rule 99 (empty -> .)
    _               reduce using rule 99 (empty -> .)
    PIPE            reduce using rule 99 (empty -> .)
    WHERE           reduce using rule 99 (empty -> .)
    CLEAR           reduce using rule 99 (empty -> .)
    OVAL            reduce using rule 99 (empty -> .)
    TRIO            reduce using rule 99 (empty -> .)
    QUAD            reduce using rule 99 (empty -> .)
    ARC             reduce using rule 99 (empty -> .)
    END             reduce using rule 99 (empty -> .)
    }               reduce using rule 99 (empty -> .)

    empty                          shift and go to state 171
    conditionA                     shift and go to state 169

state 153

    (18) moduleA -> ( vars . ) block

    )               shift and go to state 172


state 154

    (24) type -> FLOAT .

    ID              reduce using rule 24 (type -> FLOAT .)


state 155

    (23) type -> INT .

    ID              reduce using rule 23 (type -> INT .)


state 156

    (20) vars -> type . ID varsA

    ID              shift and go to state 173


state 157

    (34) blockB -> statute . blockC
    (35) blockC -> . blockB
    (36) blockC -> . empty
    (34) blockB -> . statute blockC
    (99) empty -> .
    (9) statute -> . assign
    (10) statute -> . condition
    (11) statute -> . write
    (12) statute -> . repeat
    (13) statute -> . command
    (14) statute -> . calling
    (15) statute -> . pipeline
    (16) statute -> . screen
    (37) assign -> . ID = expression ;
    (38) condition -> . IF ( expression ) block conditionA
    (41) write -> . ECHO expression ;
    (42) write -> . " CTE_STRING " ;
    (55) repeat -> . REPLAY CTE_INTEGER [ repeatA ] ;
    (51) command -> . figure exp exp color ;
    (52) command -> . SAMPLE commandA
    (25) calling -> . _ ID ( callingA
    (43) pipeline -> . PIPE ID pipelineA
    (94) screen -> . WHERE
    (95) screen -> . CLEAR
    (78) figure -> . OVAL
    (79) figure -> . TRIO
    (80) figure -> . QUAD
    (81) figure -> . ARC

    }               reduce using rule 99 (empty -> .)
    ID              shift and go to state 21
    IF              shift and go to state 23
    ECHO            shift and go to state 16
    "               shift and go to state 9
    REPLAY          shift and go to state 6
    SAMPLE          shift and go to state 17
    _               shift and go to state 22
    PIPE            shift and go to state 8
    WHERE           shift and go to state 27
    CLEAR           shift and go to state 11
    OVAL            shift and go to state 7
    TRIO            shift and go to state 12
    QUAD            shift and go to state 20
    ARC             shift and go to state 28

    figure                         shift and go to state 3
    write                          shift and go to state 10
    command                        shift and go to state 29
    empty                          shift and go to state 174
    repeat                         shift and go to state 13
    screen                         shift and go to state 15
    condition                      shift and go to state 4
    statute                        shift and go to state 157
    pipeline                       shift and go to state 25
    calling                        shift and go to state 26
    blockC                         shift and go to state 175
    blockB                         shift and go to state 176
    assign                         shift and go to state 31

state 158

    (33) blockA -> } .

    MOD             reduce using rule 33 (blockA -> } .)
    ID              reduce using rule 33 (blockA -> } .)
    IF              reduce using rule 33 (blockA -> } .)
    ECHO            reduce using rule 33 (blockA -> } .)
    "               reduce using rule 33 (blockA -> } .)
    REPLAY          reduce using rule 33 (blockA -> } .)
    SAMPLE          reduce using rule 33 (blockA -> } .)
    _               reduce using rule 33 (blockA -> } .)
    PIPE            reduce using rule 33 (blockA -> } .)
    WHERE           reduce using rule 33 (blockA -> } .)
    CLEAR           reduce using rule 33 (blockA -> } .)
    OVAL            reduce using rule 33 (blockA -> } .)
    TRIO            reduce using rule 33 (blockA -> } .)
    QUAD            reduce using rule 33 (blockA -> } .)
    ARC             reduce using rule 33 (blockA -> } .)
    END             reduce using rule 33 (blockA -> } .)
    ELSE            reduce using rule 33 (blockA -> } .)
    }               reduce using rule 33 (blockA -> } .)


state 159

    (32) blockA -> blockB . }

    }               shift and go to state 177


state 160

    (31) block -> { blockA .

    MOD             reduce using rule 31 (block -> { blockA .)
    ID              reduce using rule 31 (block -> { blockA .)
    IF              reduce using rule 31 (block -> { blockA .)
    ECHO            reduce using rule 31 (block -> { blockA .)
    "               reduce using rule 31 (block -> { blockA .)
    REPLAY          reduce using rule 31 (block -> { blockA .)
    SAMPLE          reduce using rule 31 (block -> { blockA .)
    _               reduce using rule 31 (block -> { blockA .)
    PIPE            reduce using rule 31 (block -> { blockA .)
    WHERE           reduce using rule 31 (block -> { blockA .)
    CLEAR           reduce using rule 31 (block -> { blockA .)
    OVAL            reduce using rule 31 (block -> { blockA .)
    TRIO            reduce using rule 31 (block -> { blockA .)
    QUAD            reduce using rule 31 (block -> { blockA .)
    ARC             reduce using rule 31 (block -> { blockA .)
    END             reduce using rule 31 (block -> { blockA .)
    ELSE            reduce using rule 31 (block -> { blockA .)
    }               reduce using rule 31 (block -> { blockA .)


state 161

    (55) repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .

    ID              reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    IF              reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    ECHO            reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    "               reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    REPLAY          reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    SAMPLE          reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    _               reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    PIPE            reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    WHERE           reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    CLEAR           reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    OVAL            reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    TRIO            reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    QUAD            reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    ARC             reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    }               reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    MOD             reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)
    END             reduce using rule 55 (repeat -> REPLAY CTE_INTEGER [ repeatA ] ; .)


state 162

    (45) pipelineA -> IN ( var_cte ) . ;

    ;               shift and go to state 178


state 163

    (44) pipelineA -> [ pipelineB ] ; .

    MOD             reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    ID              reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    IF              reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    ECHO            reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    "               reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    REPLAY          reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    SAMPLE          reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    _               reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    PIPE            reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    WHERE           reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    CLEAR           reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    OVAL            reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    TRIO            reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    QUAD            reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    ARC             reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    END             reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)
    }               reduce using rule 44 (pipelineA -> [ pipelineB ] ; .)


state 164

    (49) pipelineC -> , pipelineB .

    ]               reduce using rule 49 (pipelineC -> , pipelineB .)


state 165

    (46) pipelineA -> OUT ( ) ; .

    MOD             reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    ID              reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    IF              reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    ECHO            reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    "               reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    REPLAY          reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    SAMPLE          reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    _               reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    PIPE            reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    WHERE           reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    CLEAR           reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    OVAL            reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    TRIO            reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    QUAD            reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    ARC             reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    END             reduce using rule 46 (pipelineA -> OUT ( ) ; .)
    }               reduce using rule 46 (pipelineA -> OUT ( ) ; .)


state 166

    (53) commandA -> ON move exp CTE_INTEGER color . ;

    ;               shift and go to state 179


state 167

    (26) callingA -> callingB ) ; .

    MOD             reduce using rule 26 (callingA -> callingB ) ; .)
    ID              reduce using rule 26 (callingA -> callingB ) ; .)
    IF              reduce using rule 26 (callingA -> callingB ) ; .)
    ECHO            reduce using rule 26 (callingA -> callingB ) ; .)
    "               reduce using rule 26 (callingA -> callingB ) ; .)
    REPLAY          reduce using rule 26 (callingA -> callingB ) ; .)
    SAMPLE          reduce using rule 26 (callingA -> callingB ) ; .)
    _               reduce using rule 26 (callingA -> callingB ) ; .)
    PIPE            reduce using rule 26 (callingA -> callingB ) ; .)
    WHERE           reduce using rule 26 (callingA -> callingB ) ; .)
    CLEAR           reduce using rule 26 (callingA -> callingB ) ; .)
    OVAL            reduce using rule 26 (callingA -> callingB ) ; .)
    TRIO            reduce using rule 26 (callingA -> callingB ) ; .)
    QUAD            reduce using rule 26 (callingA -> callingB ) ; .)
    ARC             reduce using rule 26 (callingA -> callingB ) ; .)
    END             reduce using rule 26 (callingA -> callingB ) ; .)
    }               reduce using rule 26 (callingA -> callingB ) ; .)


state 168

    (29) callingC -> , callingB .

    )               reduce using rule 29 (callingC -> , callingB .)


state 169

    (38) condition -> IF ( expression ) block conditionA .

    ID              reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    IF              reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    ECHO            reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    "               reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    REPLAY          reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    SAMPLE          reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    _               reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    PIPE            reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    WHERE           reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    CLEAR           reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    OVAL            reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    TRIO            reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    QUAD            reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    ARC             reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    }               reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    MOD             reduce using rule 38 (condition -> IF ( expression ) block conditionA .)
    END             reduce using rule 38 (condition -> IF ( expression ) block conditionA .)


state 170

    (39) conditionA -> ELSE . block
    (31) block -> . { blockA

    {               shift and go to state 128

    block                          shift and go to state 180

state 171

    (40) conditionA -> empty .

    MOD             reduce using rule 40 (conditionA -> empty .)
    ID              reduce using rule 40 (conditionA -> empty .)
    IF              reduce using rule 40 (conditionA -> empty .)
    ECHO            reduce using rule 40 (conditionA -> empty .)
    "               reduce using rule 40 (conditionA -> empty .)
    REPLAY          reduce using rule 40 (conditionA -> empty .)
    SAMPLE          reduce using rule 40 (conditionA -> empty .)
    _               reduce using rule 40 (conditionA -> empty .)
    PIPE            reduce using rule 40 (conditionA -> empty .)
    WHERE           reduce using rule 40 (conditionA -> empty .)
    CLEAR           reduce using rule 40 (conditionA -> empty .)
    OVAL            reduce using rule 40 (conditionA -> empty .)
    TRIO            reduce using rule 40 (conditionA -> empty .)
    QUAD            reduce using rule 40 (conditionA -> empty .)
    ARC             reduce using rule 40 (conditionA -> empty .)
    END             reduce using rule 40 (conditionA -> empty .)
    }               reduce using rule 40 (conditionA -> empty .)


state 172

    (18) moduleA -> ( vars ) . block
    (31) block -> . { blockA

    {               shift and go to state 128

    block                          shift and go to state 181

state 173

    (20) vars -> type ID . varsA
    (21) varsA -> . , vars
    (22) varsA -> . empty
    (99) empty -> .

    ,               shift and go to state 183
    )               reduce using rule 99 (empty -> .)

    varsA                          shift and go to state 182
    empty                          shift and go to state 184

state 174

    (36) blockC -> empty .

    }               reduce using rule 36 (blockC -> empty .)


state 175

    (34) blockB -> statute blockC .

    }               reduce using rule 34 (blockB -> statute blockC .)


state 176

    (35) blockC -> blockB .

    }               reduce using rule 35 (blockC -> blockB .)


state 177

    (32) blockA -> blockB } .

    MOD             reduce using rule 32 (blockA -> blockB } .)
    ID              reduce using rule 32 (blockA -> blockB } .)
    IF              reduce using rule 32 (blockA -> blockB } .)
    ECHO            reduce using rule 32 (blockA -> blockB } .)
    "               reduce using rule 32 (blockA -> blockB } .)
    REPLAY          reduce using rule 32 (blockA -> blockB } .)
    SAMPLE          reduce using rule 32 (blockA -> blockB } .)
    _               reduce using rule 32 (blockA -> blockB } .)
    PIPE            reduce using rule 32 (blockA -> blockB } .)
    WHERE           reduce using rule 32 (blockA -> blockB } .)
    CLEAR           reduce using rule 32 (blockA -> blockB } .)
    OVAL            reduce using rule 32 (blockA -> blockB } .)
    TRIO            reduce using rule 32 (blockA -> blockB } .)
    QUAD            reduce using rule 32 (blockA -> blockB } .)
    ARC             reduce using rule 32 (blockA -> blockB } .)
    END             reduce using rule 32 (blockA -> blockB } .)
    ELSE            reduce using rule 32 (blockA -> blockB } .)
    }               reduce using rule 32 (blockA -> blockB } .)


state 178

    (45) pipelineA -> IN ( var_cte ) ; .

    MOD             reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    ID              reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    IF              reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    ECHO            reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    "               reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    REPLAY          reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    SAMPLE          reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    _               reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    PIPE            reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    WHERE           reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    CLEAR           reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    OVAL            reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    TRIO            reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    QUAD            reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    ARC             reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    END             reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)
    }               reduce using rule 45 (pipelineA -> IN ( var_cte ) ; .)


state 179

    (53) commandA -> ON move exp CTE_INTEGER color ; .

    MOD             reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    ID              reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    IF              reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    ECHO            reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    "               reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    REPLAY          reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    SAMPLE          reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    _               reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    PIPE            reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    WHERE           reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    CLEAR           reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    OVAL            reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    TRIO            reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    QUAD            reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    ARC             reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    END             reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    ]               reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)
    }               reduce using rule 53 (commandA -> ON move exp CTE_INTEGER color ; .)


state 180

    (39) conditionA -> ELSE block .

    MOD             reduce using rule 39 (conditionA -> ELSE block .)
    ID              reduce using rule 39 (conditionA -> ELSE block .)
    IF              reduce using rule 39 (conditionA -> ELSE block .)
    ECHO            reduce using rule 39 (conditionA -> ELSE block .)
    "               reduce using rule 39 (conditionA -> ELSE block .)
    REPLAY          reduce using rule 39 (conditionA -> ELSE block .)
    SAMPLE          reduce using rule 39 (conditionA -> ELSE block .)
    _               reduce using rule 39 (conditionA -> ELSE block .)
    PIPE            reduce using rule 39 (conditionA -> ELSE block .)
    WHERE           reduce using rule 39 (conditionA -> ELSE block .)
    CLEAR           reduce using rule 39 (conditionA -> ELSE block .)
    OVAL            reduce using rule 39 (conditionA -> ELSE block .)
    TRIO            reduce using rule 39 (conditionA -> ELSE block .)
    QUAD            reduce using rule 39 (conditionA -> ELSE block .)
    ARC             reduce using rule 39 (conditionA -> ELSE block .)
    END             reduce using rule 39 (conditionA -> ELSE block .)
    }               reduce using rule 39 (conditionA -> ELSE block .)


state 181

    (18) moduleA -> ( vars ) block .

    MOD             reduce using rule 18 (moduleA -> ( vars ) block .)
    ID              reduce using rule 18 (moduleA -> ( vars ) block .)
    IF              reduce using rule 18 (moduleA -> ( vars ) block .)
    ECHO            reduce using rule 18 (moduleA -> ( vars ) block .)
    "               reduce using rule 18 (moduleA -> ( vars ) block .)
    REPLAY          reduce using rule 18 (moduleA -> ( vars ) block .)
    SAMPLE          reduce using rule 18 (moduleA -> ( vars ) block .)
    _               reduce using rule 18 (moduleA -> ( vars ) block .)
    PIPE            reduce using rule 18 (moduleA -> ( vars ) block .)
    WHERE           reduce using rule 18 (moduleA -> ( vars ) block .)
    CLEAR           reduce using rule 18 (moduleA -> ( vars ) block .)
    OVAL            reduce using rule 18 (moduleA -> ( vars ) block .)
    TRIO            reduce using rule 18 (moduleA -> ( vars ) block .)
    QUAD            reduce using rule 18 (moduleA -> ( vars ) block .)
    ARC             reduce using rule 18 (moduleA -> ( vars ) block .)
    END             reduce using rule 18 (moduleA -> ( vars ) block .)


state 182

    (20) vars -> type ID varsA .

    )               reduce using rule 20 (vars -> type ID varsA .)


state 183

    (21) varsA -> , . vars
    (20) vars -> . type ID varsA
    (23) type -> . INT
    (24) type -> . FLOAT

    INT             shift and go to state 155
    FLOAT           shift and go to state 154

    type                           shift and go to state 156
    vars                           shift and go to state 185

state 184

    (22) varsA -> empty .

    )               reduce using rule 22 (varsA -> empty .)


state 185

    (21) varsA -> , vars .

    )               reduce using rule 21 (varsA -> , vars .)

